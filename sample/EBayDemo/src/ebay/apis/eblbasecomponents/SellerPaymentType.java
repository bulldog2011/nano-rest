// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

/**
 * 
 * A payment between Half.com and a seller. The financial value of a payment is
 * typically based on an amount that a buyer paid to Half.com for one order line
 * item, plus the buyer's shipping cost, minus Half.com's commission. 
 * 
 */
public class SellerPaymentType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "ItemID")
	private String itemID;
	
	@Element(name = "TransactionID")
	private String transactionID;
	
	@Element(name = "OrderID")
	private String orderID;
	
	@Element(name = "SellerInventoryID")
	private String sellerInventoryID;
	
	@Element(name = "PrivateNotes")
	private String privateNotes;
	
	@Element(name = "ExternalProductID")
	private ExternalProductIDType externalProductID;
	
	@Element(name = "Title")
	private String title;
	
	@Element(name = "PaymentType")
	private PaymentTypeCodeType paymentType;
	
	@Element(name = "TransactionPrice")
	private AmountType transactionPrice;
	
	@Element(name = "ShippingReimbursement")
	private AmountType shippingReimbursement;
	
	@Element(name = "Commission")
	private AmountType commission;
	
	@Element(name = "AmountPaid")
	private AmountType amountPaid;
	
	@Element(name = "PaidTime")
	private Date paidTime;
	
	@Element(name = "OrderLineItemID")
	private String orderLineItemID;
	
    
	/**
     * public getter
     *
     * 
     * Unique identifier for the Half.com item listing.
     * 
     *
     * @returns java.lang.String
	 */
	public String getItemID() {
	    return this.itemID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Unique identifier for the Half.com item listing.
     * 
     *
     * @param java.lang.String
	 */
	public void setItemID(String itemID) {
	    this.itemID = itemID;
	}
	/**
     * public getter
     *
     * 
     * Unique identifier for a Half.com order line item (transaction). An order
     * line item is created once there is a commitment from a buyer to purchase an
     * item. Along with its corresponding <b>ItemID</b>, a <b>TransactionID</b> is used and
     * referenced during an order checkout flow and after checkout has been
     * completed.
     * 
     *
     * @returns java.lang.String
	 */
	public String getTransactionID() {
	    return this.transactionID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Unique identifier for a Half.com order line item (transaction). An order
     * line item is created once there is a commitment from a buyer to purchase an
     * item. Along with its corresponding <b>ItemID</b>, a <b>TransactionID</b> is used and
     * referenced during an order checkout flow and after checkout has been
     * completed.
     * 
     *
     * @param java.lang.String
	 */
	public void setTransactionID(String transactionID) {
	    this.transactionID = transactionID;
	}
	/**
     * public getter
     *
     * 
     * A unique identifier that identifies a single line item or multiple line item
     * (Combined Payment) Half.com order. 
     * <br><br>
     * For a single line item order, the <b>OrderID</b> value is identical to the
     * <b>OrderLineItemID</b> value that is generated upon creation of the order line
     * item. For a Combined Payment order, the <b>OrderID</b> value is created by eBay
     * when the buyer or seller (sharing multiple, common order line items)
     * combines multiple order line items into a Combined Payment order through
     * the Half.com site. 
     * 
     *
     * @returns java.lang.String
	 */
	public String getOrderID() {
	    return this.orderID;
	}
	
	/**
	 * public setter
	 *
     * 
     * A unique identifier that identifies a single line item or multiple line item
     * (Combined Payment) Half.com order. 
     * <br><br>
     * For a single line item order, the <b>OrderID</b> value is identical to the
     * <b>OrderLineItemID</b> value that is generated upon creation of the order line
     * item. For a Combined Payment order, the <b>OrderID</b> value is created by eBay
     * when the buyer or seller (sharing multiple, common order line items)
     * combines multiple order line items into a Combined Payment order through
     * the Half.com site. 
     * 
     *
     * @param java.lang.String
	 */
	public void setOrderID(String orderID) {
	    this.orderID = orderID;
	}
	/**
     * public getter
     *
     * 
     * An ID that the seller specified when they listed the Half.com item, if any.
     * It can be used for the seller's SKU. Note that <b>SellerInventoryID</b> is not
     * returned if no ID was specified. (Note: The SKU field used for eBay.com
     * listings is not applicable to Half.com listings.)
     * 
     *
     * @returns java.lang.String
	 */
	public String getSellerInventoryID() {
	    return this.sellerInventoryID;
	}
	
	/**
	 * public setter
	 *
     * 
     * An ID that the seller specified when they listed the Half.com item, if any.
     * It can be used for the seller's SKU. Note that <b>SellerInventoryID</b> is not
     * returned if no ID was specified. (Note: The SKU field used for eBay.com
     * listings is not applicable to Half.com listings.)
     * 
     *
     * @param java.lang.String
	 */
	public void setSellerInventoryID(String sellerInventoryID) {
	    this.sellerInventoryID = sellerInventoryID;
	}
	/**
     * public getter
     *
     * 
     * A text note that the seller specified for the Half.com item, if any. Only
     * visible to the seller. Not returned if the seller specified no notes.
     * 
     *
     * @returns java.lang.String
	 */
	public String getPrivateNotes() {
	    return this.privateNotes;
	}
	
	/**
	 * public setter
	 *
     * 
     * A text note that the seller specified for the Half.com item, if any. Only
     * visible to the seller. Not returned if the seller specified no notes.
     * 
     *
     * @param java.lang.String
	 */
	public void setPrivateNotes(String privateNotes) {
	    this.privateNotes = privateNotes;
	}
	/**
     * public getter
     *
     * 
     * Contains an ISBN, UPC, or EAN value from the catalog product associated with
     * the Half.com item. All Half.com items are listed with Pre-filled Item
     * Information.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ExternalProductIDType
	 */
	public ExternalProductIDType getExternalProductID() {
	    return this.externalProductID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains an ISBN, UPC, or EAN value from the catalog product associated with
     * the Half.com item. All Half.com items are listed with Pre-filled Item
     * Information.
     * 
     *
     * @param ebay.apis.eblbasecomponents.ExternalProductIDType
	 */
	public void setExternalProductID(ExternalProductIDType externalProductID) {
	    this.externalProductID = externalProductID;
	}
	/**
     * public getter
     *
     * 
     * The title of the item listing as it appears on Half.com.
     * <br><br>
     * <span class="tablenote"><b>Note:</b>
     * The maximum length of an eBay Item Title has increased to 80 characters as of
     * September 2011.
     * </span>
     * 
     *
     * @returns java.lang.String
	 */
	public String getTitle() {
	    return this.title;
	}
	
	/**
	 * public setter
	 *
     * 
     * The title of the item listing as it appears on Half.com.
     * <br><br>
     * <span class="tablenote"><b>Note:</b>
     * The maximum length of an eBay Item Title has increased to 80 characters as of
     * September 2011.
     * </span>
     * 
     *
     * @param java.lang.String
	 */
	public void setTitle(String title) {
	    this.title = title;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the payment is for a Half.com sale or a refund.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PaymentTypeCodeType
	 */
	public PaymentTypeCodeType getPaymentType() {
	    return this.paymentType;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the payment is for a Half.com sale or a refund.
     * 
     *
     * @param ebay.apis.eblbasecomponents.PaymentTypeCodeType
	 */
	public void setPaymentType(PaymentTypeCodeType paymentType) {
	    this.paymentType = paymentType;
	}
	/**
     * public getter
     *
     * 
     * Price of the order line item (transaction) before shipping and other costs.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getTransactionPrice() {
	    return this.transactionPrice;
	}
	
	/**
	 * public setter
	 *
     * 
     * Price of the order line item (transaction) before shipping and other costs.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setTransactionPrice(AmountType transactionPrice) {
	    this.transactionPrice = transactionPrice;
	}
	/**
     * public getter
     *
     * 
     * The adjusted shipping cost that Half.com pays the seller. For a multiple
     * line item (Combined Payment) order, the total shipping cost may be less than
     * the cost to ship the items individually, which makes the adjustment
     * necessary. The shipping cost may also be adjusted due to Half.com handling
     * charges. 
     * <br><br>
     * <b>Note</b>: Due to the way shipping costs are calculated, this
     * value may be different for identical items in different orders.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getShippingReimbursement() {
	    return this.shippingReimbursement;
	}
	
	/**
	 * public setter
	 *
     * 
     * The adjusted shipping cost that Half.com pays the seller. For a multiple
     * line item (Combined Payment) order, the total shipping cost may be less than
     * the cost to ship the items individually, which makes the adjustment
     * necessary. The shipping cost may also be adjusted due to Half.com handling
     * charges. 
     * <br><br>
     * <b>Note</b>: Due to the way shipping costs are calculated, this
     * value may be different for identical items in different orders.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setShippingReimbursement(AmountType shippingReimbursement) {
	    this.shippingReimbursement = shippingReimbursement;
	}
	/**
     * public getter
     *
     * 
     * Amount of commission charged by Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getCommission() {
	    return this.commission;
	}
	
	/**
	 * public setter
	 *
     * 
     * Amount of commission charged by Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setCommission(AmountType commission) {
	    this.commission = commission;
	}
	/**
     * public getter
     *
     * 
     * Total amount paid by buyer for the Half.com order.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getAmountPaid() {
	    return this.amountPaid;
	}
	
	/**
	 * public setter
	 *
     * 
     * Total amount paid by buyer for the Half.com order.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setAmountPaid(AmountType amountPaid) {
	    this.amountPaid = amountPaid;
	}
	/**
     * public getter
     *
     * 
     * The time and date when Half.com created the payment. Half.com creates a
     * payment when the buyer pays for an order. This time is specified
     * in GMT (not Pacific time). See "Time Values" in the eBay Web Services guide
     * for information about converting between GMT and other time zones.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getPaidTime() {
	    return this.paidTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * The time and date when Half.com created the payment. Half.com creates a
     * payment when the buyer pays for an order. This time is specified
     * in GMT (not Pacific time). See "Time Values" in the eBay Web Services guide
     * for information about converting between GMT and other time zones.
     * 
     *
     * @param java.util.Date
	 */
	public void setPaidTime(Date paidTime) {
	    this.paidTime = paidTime;
	}
	/**
     * public getter
     *
     * 
     * A unique identifier for a Half.com order line item. This field is created as
     * soon as there is a commitment to buy from the seller, and its value is based
     * upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in between
     * these two IDs. For a single line item order, the <b>OrderLineItemID</b> value is
     * identical to the <b>OrderID</b> value.
     * 
     *
     * @returns java.lang.String
	 */
	public String getOrderLineItemID() {
	    return this.orderLineItemID;
	}
	
	/**
	 * public setter
	 *
     * 
     * A unique identifier for a Half.com order line item. This field is created as
     * soon as there is a commitment to buy from the seller, and its value is based
     * upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in between
     * these two IDs. For a single line item order, the <b>OrderLineItemID</b> value is
     * identical to the <b>OrderID</b> value.
     * 
     *
     * @param java.lang.String
	 */
	public void setOrderLineItemID(String orderLineItemID) {
	    this.orderLineItemID = orderLineItemID;
	}

}