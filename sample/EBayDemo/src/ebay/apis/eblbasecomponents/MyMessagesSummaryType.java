// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * Summary data for a given user's alerts and messages.
 * This includes the numbers of new alerts and messages,
 * unresolved alerts, flagged messages, and total alerts
 * and messages.
 * 
 */
public class MyMessagesSummaryType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "FolderSummary")
	private List<MyMessagesFolderSummaryType> folderSummary;
	
	@Element(name = "NewAlertCount")
	private Integer newAlertCount;
	
	@Element(name = "NewMessageCount")
	private Integer newMessageCount;
	
	@Element(name = "UnresolvedAlertCount")
	private Integer unresolvedAlertCount;
	
	@Element(name = "FlaggedMessageCount")
	private Integer flaggedMessageCount;
	
	@Element(name = "TotalAlertCount")
	private Integer totalAlertCount;
	
	@Element(name = "TotalMessageCount")
	private Integer totalMessageCount;
	
	@Element(name = "NewHighPriorityCount")
	private Integer newHighPriorityCount;
	
	@Element(name = "TotalHighPriorityCount")
	private Integer totalHighPriorityCount;
	
    
	/**
     * public getter
     *
     * 
     * Folder summary for each folder. Always
     * returned for detail level ReturnSummary.
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.MyMessagesFolderSummaryType>
	 */
	public List<MyMessagesFolderSummaryType> getFolderSummary() {
	    return this.folderSummary;
	}
	
	/**
	 * public setter
	 *
     * 
     * Folder summary for each folder. Always
     * returned for detail level ReturnSummary.
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.MyMessagesFolderSummaryType>
	 */
	public void setFolderSummary(List<MyMessagesFolderSummaryType> folderSummary) {
	    this.folderSummary = folderSummary;
	}
	/**
     * public getter
     *
     * 
     * This field has been deprecated, starting with the 685 release. Alerts are now
     * synonymous with Flagged messages, and are added to the
     * Summary.FlaggedMessageCount value.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getNewAlertCount() {
	    return this.newAlertCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * This field has been deprecated, starting with the 685 release. Alerts are now
     * synonymous with Flagged messages, and are added to the
     * Summary.FlaggedMessageCount value.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setNewAlertCount(Integer newAlertCount) {
	    this.newAlertCount = newAlertCount;
	}
	/**
     * public getter
     *
     * 
     * The number of new messages that a given user has. Always returned for detail level ReturnSummary.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getNewMessageCount() {
	    return this.newMessageCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The number of new messages that a given user has. Always returned for detail level ReturnSummary.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setNewMessageCount(Integer newMessageCount) {
	    this.newMessageCount = newMessageCount;
	}
	/**
     * public getter
     *
     * 
     * The number of alerts that are not yet
     * resolved. Always returned for detail level
     * ReturnSummary.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getUnresolvedAlertCount() {
	    return this.unresolvedAlertCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The number of alerts that are not yet
     * resolved. Always returned for detail level
     * ReturnSummary.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setUnresolvedAlertCount(Integer unresolvedAlertCount) {
	    this.unresolvedAlertCount = unresolvedAlertCount;
	}
	/**
     * public getter
     *
     * 
     * The number of messages that have been flagged.
     * Always returned for detail level ReturnSummary.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getFlaggedMessageCount() {
	    return this.flaggedMessageCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The number of messages that have been flagged.
     * Always returned for detail level ReturnSummary.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setFlaggedMessageCount(Integer flaggedMessageCount) {
	    this.flaggedMessageCount = flaggedMessageCount;
	}
	/**
     * public getter
     *
     * 
     * This field has been deprecated, starting with the 685 release. Alerts are now
     * synonymous with Flagged messages, and are added to the
     * Summary.FlaggedMessageCount value.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getTotalAlertCount() {
	    return this.totalAlertCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * This field has been deprecated, starting with the 685 release. Alerts are now
     * synonymous with Flagged messages, and are added to the
     * Summary.FlaggedMessageCount value.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setTotalAlertCount(Integer totalAlertCount) {
	    this.totalAlertCount = totalAlertCount;
	}
	/**
     * public getter
     *
     * 
     * The total number of messages for a given user.
     * Always returned for detail level ReturnSummary.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getTotalMessageCount() {
	    return this.totalMessageCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total number of messages for a given user.
     * Always returned for detail level ReturnSummary.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setTotalMessageCount(Integer totalMessageCount) {
	    this.totalMessageCount = totalMessageCount;
	}
	/**
     * public getter
     *
     * 
     * The total number of new high priority messages that a given user has.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getNewHighPriorityCount() {
	    return this.newHighPriorityCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total number of new high priority messages that a given user has.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setNewHighPriorityCount(Integer newHighPriorityCount) {
	    this.newHighPriorityCount = newHighPriorityCount;
	}
	/**
     * public getter
     *
     * 
     * The total number of high priority messages that a given user has.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getTotalHighPriorityCount() {
	    return this.totalHighPriorityCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total number of high priority messages that a given user has.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setTotalHighPriorityCount(Integer totalHighPriorityCount) {
	    this.totalHighPriorityCount = totalHighPriorityCount;
	}

}