// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

/**
 * 
 * Contains the definition of a rule that governs the number of times your
 * application can access the eBay API (invoke a call) on an hourly, daily, or
 * periodic basis.
 * 
 */
public class ApiAccessRuleType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "CallName")
	private String callName;
	
	@Element(name = "CountsTowardAggregate")
	private Boolean countsTowardAggregate;
	
	@Element(name = "DailyHardLimit")
	private Long dailyHardLimit;
	
	@Element(name = "DailySoftLimit")
	private Long dailySoftLimit;
	
	@Element(name = "DailyUsage")
	private Long dailyUsage;
	
	@Element(name = "HourlyHardLimit")
	private Long hourlyHardLimit;
	
	@Element(name = "HourlySoftLimit")
	private Long hourlySoftLimit;
	
	@Element(name = "HourlyUsage")
	private Long hourlyUsage;
	
	@Element(name = "Period")
	private Integer period;
	
	@Element(name = "PeriodicHardLimit")
	private Long periodicHardLimit;
	
	@Element(name = "PeriodicSoftLimit")
	private Long periodicSoftLimit;
	
	@Element(name = "PeriodicUsage")
	private Long periodicUsage;
	
	@Element(name = "PeriodicStartDate")
	private Date periodicStartDate;
	
	@Element(name = "ModTime")
	private Date modTime;
	
	@Element(name = "RuleCurrentStatus")
	private AccessRuleCurrentStatusCodeType ruleCurrentStatus;
	
	@Element(name = "RuleStatus")
	private AccessRuleStatusCodeType ruleStatus;
	
    
	/**
     * public getter
     *
     * 
     * The name of the call that has an access rule. Can be a call name (e.g.,
     * AddItem), ApplicationAggregate (returns totals for all calls),
     * PasswordAuthenticationLimiter (dummy call), or NonUTF8UsageLimiter.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCallName() {
	    return this.callName;
	}
	
	/**
	 * public setter
	 *
     * 
     * The name of the call that has an access rule. Can be a call name (e.g.,
     * AddItem), ApplicationAggregate (returns totals for all calls),
     * PasswordAuthenticationLimiter (dummy call), or NonUTF8UsageLimiter.
     * 
     *
     * @param java.lang.String
	 */
	public void setCallName(String callName) {
	    this.callName = callName;
	}
	/**
     * public getter
     *
     * 
     * Whether use of this call counts toward the application's
     * aggregate limit for all calls.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getCountsTowardAggregate() {
	    return this.countsTowardAggregate;
	}
	
	/**
	 * public setter
	 *
     * 
     * Whether use of this call counts toward the application's
     * aggregate limit for all calls.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setCountsTowardAggregate(Boolean countsTowardAggregate) {
	    this.countsTowardAggregate = countsTowardAggregate;
	}
	/**
     * public getter
     *
     * 
     * The number of calls per day that your application can make to this call before
     * being refused.
     * The day starts at midnight, 00:00:00 PST (not GMT).
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getDailyHardLimit() {
	    return this.dailyHardLimit;
	}
	
	/**
	 * public setter
	 *
     * 
     * The number of calls per day that your application can make to this call before
     * being refused.
     * The day starts at midnight, 00:00:00 PST (not GMT).
     * 
     *
     * @param java.lang.Long
	 */
	public void setDailyHardLimit(Long dailyHardLimit) {
	    this.dailyHardLimit = dailyHardLimit;
	}
	/**
     * public getter
     *
     * 
     * The number of calls per day that your application can make to this call
     * before you receive a warning.
     * The day starts at midnight, 00:00:00 PST.
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getDailySoftLimit() {
	    return this.dailySoftLimit;
	}
	
	/**
	 * public setter
	 *
     * 
     * The number of calls per day that your application can make to this call
     * before you receive a warning.
     * The day starts at midnight, 00:00:00 PST.
     * 
     *
     * @param java.lang.Long
	 */
	public void setDailySoftLimit(Long dailySoftLimit) {
	    this.dailySoftLimit = dailySoftLimit;
	}
	/**
     * public getter
     *
     * 
     *  The number of times your application has used this
     *  call today.
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getDailyUsage() {
	    return this.dailyUsage;
	}
	
	/**
	 * public setter
	 *
     * 
     *  The number of times your application has used this
     *  call today.
     * 
     *
     * @param java.lang.Long
	 */
	public void setDailyUsage(Long dailyUsage) {
	    this.dailyUsage = dailyUsage;
	}
	/**
     * public getter
     *
     * 
     * The number of calls that your application can make per hour to this call
     * before being refused. Each count begins on the hour (e.g. 1:00:00).
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getHourlyHardLimit() {
	    return this.hourlyHardLimit;
	}
	
	/**
	 * public setter
	 *
     * 
     * The number of calls that your application can make per hour to this call
     * before being refused. Each count begins on the hour (e.g. 1:00:00).
     * 
     *
     * @param java.lang.Long
	 */
	public void setHourlyHardLimit(Long hourlyHardLimit) {
	    this.hourlyHardLimit = hourlyHardLimit;
	}
	/**
     * public getter
     *
     * 
     * The number of calls that your application can make to this call per hour
     * before you receive a warning. Each count begins on the hour (e.g. 1:00:00).
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getHourlySoftLimit() {
	    return this.hourlySoftLimit;
	}
	
	/**
	 * public setter
	 *
     * 
     * The number of calls that your application can make to this call per hour
     * before you receive a warning. Each count begins on the hour (e.g. 1:00:00).
     * 
     *
     * @param java.lang.Long
	 */
	public void setHourlySoftLimit(Long hourlySoftLimit) {
	    this.hourlySoftLimit = hourlySoftLimit;
	}
	/**
     * public getter
     *
     * 
     * The number of times your application has executed this call during this hour.
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getHourlyUsage() {
	    return this.hourlyUsage;
	}
	
	/**
	 * public setter
	 *
     * 
     * The number of times your application has executed this call during this hour.
     * 
     *
     * @param java.lang.Long
	 */
	public void setHourlyUsage(Long hourlyUsage) {
	    this.hourlyUsage = hourlyUsage;
	}
	/**
     * public getter
     *
     * 
     * The length of time before your application's perodic usage counter restarts
     * for this call. If the number of calls you make exceeds the periodic hard limit
     * before the current period ends, further calls will be refused until the next
     * period starts. Possible values: -1 (Periodic limit not enforced, could be any
     * negative integer), 0 (Calendar month), 30 (Number of days, could be any
     * positive integer). If the period is based on the calendar month, the usage
     * counters restart on the same day of every month, regardless of the number of
     * days in the month.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getPeriod() {
	    return this.period;
	}
	
	/**
	 * public setter
	 *
     * 
     * The length of time before your application's perodic usage counter restarts
     * for this call. If the number of calls you make exceeds the periodic hard limit
     * before the current period ends, further calls will be refused until the next
     * period starts. Possible values: -1 (Periodic limit not enforced, could be any
     * negative integer), 0 (Calendar month), 30 (Number of days, could be any
     * positive integer). If the period is based on the calendar month, the usage
     * counters restart on the same day of every month, regardless of the number of
     * days in the month.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setPeriod(Integer period) {
	    this.period = period;
	}
	/**
     * public getter
     *
     * 
     * Number of calls per period that your application may make before a call is
     * refused, if the periodic limit is enforced. The length of the period is
     * specified in Period.
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getPeriodicHardLimit() {
	    return this.periodicHardLimit;
	}
	
	/**
	 * public setter
	 *
     * 
     * Number of calls per period that your application may make before a call is
     * refused, if the periodic limit is enforced. The length of the period is
     * specified in Period.
     * 
     *
     * @param java.lang.Long
	 */
	public void setPeriodicHardLimit(Long periodicHardLimit) {
	    this.periodicHardLimit = periodicHardLimit;
	}
	/**
     * public getter
     *
     * 
     * Number of calls per period that your application may make before you receive a
     * warning, if the periodic limit is enforced. The length of the period is
     * specified in Period.
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getPeriodicSoftLimit() {
	    return this.periodicSoftLimit;
	}
	
	/**
	 * public setter
	 *
     * 
     * Number of calls per period that your application may make before you receive a
     * warning, if the periodic limit is enforced. The length of the period is
     * specified in Period.
     * 
     *
     * @param java.lang.Long
	 */
	public void setPeriodicSoftLimit(Long periodicSoftLimit) {
	    this.periodicSoftLimit = periodicSoftLimit;
	}
	/**
     * public getter
     *
     * 
     * Number of calls that your application has already made this period. Returns 0
     * if the periodic access rule has not been configured for the application. The
     * length of the period is specified in Period. The start date of the period is
     * specified in PeriodicStartDate.
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getPeriodicUsage() {
	    return this.periodicUsage;
	}
	
	/**
	 * public setter
	 *
     * 
     * Number of calls that your application has already made this period. Returns 0
     * if the periodic access rule has not been configured for the application. The
     * length of the period is specified in Period. The start date of the period is
     * specified in PeriodicStartDate.
     * 
     *
     * @param java.lang.Long
	 */
	public void setPeriodicUsage(Long periodicUsage) {
	    this.periodicUsage = periodicUsage;
	}
	/**
     * public getter
     *
     * 
     * The time (in GMT) when this access rule's period started. The period starts at
     * midnight Pacific time. For example, if the period begins on June 29 in 2005
     * when California is on Pacific Daylight Time, the GMT value returned would be
     * 2005-06-29T07:00:00.000Z If the period begins on December 29 in 2005 when
     * California is on Pacific Standard Time, the GMT value returned would be
     * 2005-12-29T08:00:00.000Z. Only returned when the eBay Developers Program has
     * configured the start date for the access rule. The start date can vary per
     * application and per call name (i.e., per access rule).
     * 
     *
     * @returns java.util.Date
	 */
	public Date getPeriodicStartDate() {
	    return this.periodicStartDate;
	}
	
	/**
	 * public setter
	 *
     * 
     * The time (in GMT) when this access rule's period started. The period starts at
     * midnight Pacific time. For example, if the period begins on June 29 in 2005
     * when California is on Pacific Daylight Time, the GMT value returned would be
     * 2005-06-29T07:00:00.000Z If the period begins on December 29 in 2005 when
     * California is on Pacific Standard Time, the GMT value returned would be
     * 2005-12-29T08:00:00.000Z. Only returned when the eBay Developers Program has
     * configured the start date for the access rule. The start date can vary per
     * application and per call name (i.e., per access rule).
     * 
     *
     * @param java.util.Date
	 */
	public void setPeriodicStartDate(Date periodicStartDate) {
	    this.periodicStartDate = periodicStartDate;
	}
	/**
     * public getter
     *
     * 
     * The date and time this access rule was last modified by eBay.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getModTime() {
	    return this.modTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * The date and time this access rule was last modified by eBay.
     * 
     *
     * @param java.util.Date
	 */
	public void setModTime(Date modTime) {
	    this.modTime = modTime;
	}
	/**
     * public getter
     *
     * 
     * Your application's current status for this rule, including whether the rule is
     * set for your application and whether the application has exceeded its daily or
     * hourly limit.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AccessRuleCurrentStatusCodeType
	 */
	public AccessRuleCurrentStatusCodeType getRuleCurrentStatus() {
	    return this.ruleCurrentStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * Your application's current status for this rule, including whether the rule is
     * set for your application and whether the application has exceeded its daily or
     * hourly limit.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AccessRuleCurrentStatusCodeType
	 */
	public void setRuleCurrentStatus(AccessRuleCurrentStatusCodeType ruleCurrentStatus) {
	    this.ruleCurrentStatus = ruleCurrentStatus;
	}
	/**
     * public getter
     *
     * 
     * The status of the access rule, including whether the rule is turned on or off
     * and whether the application is currently blocked from using this call. No
     * effect if RuleCurrentStatus is set to NotSet.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AccessRuleStatusCodeType
	 */
	public AccessRuleStatusCodeType getRuleStatus() {
	    return this.ruleStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * The status of the access rule, including whether the rule is turned on or off
     * and whether the application is currently blocked from using this call. No
     * effect if RuleCurrentStatus is set to NotSet.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AccessRuleStatusCodeType
	 */
	public void setRuleStatus(AccessRuleStatusCodeType ruleStatus) {
	    this.ruleStatus = ruleStatus;
	}

}