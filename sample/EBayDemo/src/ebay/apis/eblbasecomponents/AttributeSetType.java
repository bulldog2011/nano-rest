// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * No longer applicable to any eBay categories.
 * 
 */
public class AttributeSetType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "Attribute")
	private List<AttributeType> attribute;
	
	@Attribute  
	private Integer attributeSetID;
	
	@Attribute  
	private String attributeSetVersion;
	
    
	/**
     * public getter
     *
     * 
     * A salient aspect or feature of an item in a given category.
     * Attributes are known as "Item Specifics" in the eBay Web site.
     * Use attributes to describe an item in a standard way so that buyers can find it more easily.
     * For example, "Publication Year" is a standard attribute for books.
     * In item-listing requests, multiple attributes can be specified.
     * Some categories (e.g., Tickets) always require certain attributes to be specified.
     * Therefore, in item-listing requests you need to at least specify "editable" attributes
     * (EditType 0 and EditType 2 attributes) if they are identified as required
     * in the attribute meta-data. See the eBay Web Services guide for information
     * about attribute meta-data, how to determine the valid attributes for a category,
     * and how to determine whether attributes are required.
     * <br><br>
     * If you are revising or relisting an item, you don't need to pass in attributes
     * that were already specified in the original listing.
     * To remove an optional attribute, set all its value IDs to "-100". If the item has bids
     * (or items have been sold) but there are more than 12 hours remaining until the listing ends,
     * you can add Attribute nodes but you cannot remove or modify data in previously
     * specified Attribute nodes. If the item has bids and the listing ends within 12 hours,
     * you cannot add or remove Attribute nodes or modify the contents of previously
     * specified Attribute nodes.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.AttributeType>
	 */
	public List<AttributeType> getAttribute() {
	    return this.attribute;
	}
	
	/**
	 * public setter
	 *
     * 
     * A salient aspect or feature of an item in a given category.
     * Attributes are known as "Item Specifics" in the eBay Web site.
     * Use attributes to describe an item in a standard way so that buyers can find it more easily.
     * For example, "Publication Year" is a standard attribute for books.
     * In item-listing requests, multiple attributes can be specified.
     * Some categories (e.g., Tickets) always require certain attributes to be specified.
     * Therefore, in item-listing requests you need to at least specify "editable" attributes
     * (EditType 0 and EditType 2 attributes) if they are identified as required
     * in the attribute meta-data. See the eBay Web Services guide for information
     * about attribute meta-data, how to determine the valid attributes for a category,
     * and how to determine whether attributes are required.
     * <br><br>
     * If you are revising or relisting an item, you don't need to pass in attributes
     * that were already specified in the original listing.
     * To remove an optional attribute, set all its value IDs to "-100". If the item has bids
     * (or items have been sold) but there are more than 12 hours remaining until the listing ends,
     * you can add Attribute nodes but you cannot remove or modify data in previously
     * specified Attribute nodes. If the item has bids and the listing ends within 12 hours,
     * you cannot add or remove Attribute nodes or modify the contents of previously
     * specified Attribute nodes.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.AttributeType>
	 */
	public void setAttribute(List<AttributeType> attribute) {
	    this.attribute = attribute;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.Integer
	 */
	public Integer getAttributeSetID() {
	    return this.attributeSetID;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.Integer
	 */
	public void setAttributeSetID(Integer attributeSetID) {
	    this.attributeSetID = attributeSetID;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getAttributeSetVersion() {
	    return this.attributeSetVersion;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setAttributeSetVersion(String attributeSetVersion) {
	    this.attributeSetVersion = attributeSetVersion;
	}

}