// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * This type is deprecated as the call is no longer available.
 * 
 * 
 */
@RootElement(name = "GetProductFinderRequest", namespace = "urn:ebay:apis:eBLBaseComponents")
public class GetProductFinderRequestType extends AbstractRequestType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "AttributeSystemVersion")
	private String attributeSystemVersion;
	
	@Element(name = "ProductFinderID")
	private List<Integer> productFinderID;
	
    
	/**
     * public getter
     *
     * 
     * 
     * A version of the product finder attribute definitions for the site.
     * Typically, an application passes the version value that was returned the last
     * time the application executed this call.
     * Filter that causes the call to return only the Product Finders
     * for which the attribute meta-data has changed since the specified version.
     * The latest version value is not necessarily greater than the previous
     * value that was returned. Therefore, when comparing versions, only
     * compare whether the value has changed.
     * 
     *
     * @returns java.lang.String
	 */
	public String getAttributeSystemVersion() {
	    return this.attributeSystemVersion;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * A version of the product finder attribute definitions for the site.
     * Typically, an application passes the version value that was returned the last
     * time the application executed this call.
     * Filter that causes the call to return only the Product Finders
     * for which the attribute meta-data has changed since the specified version.
     * The latest version value is not necessarily greater than the previous
     * value that was returned. Therefore, when comparing versions, only
     * compare whether the value has changed.
     * 
     *
     * @param java.lang.String
	 */
	public void setAttributeSystemVersion(String attributeSystemVersion) {
	    this.attributeSystemVersion = attributeSystemVersion;
	}
	/**
     * public getter
     *
     * 
     * 
     * A number that uniquely identifies a product finder. <br>
     * <br>
     * For sell-side searches, you can determine the
     * product finder IDs for a category by calling GetCategory2CS.<br>
     * <br>
     * For buy-side searches, you can't use GetCategory2CS to reliably determine
     * the product finder IDs for an eBay category.
     * GetProductFinder may work for some attributes. Alternatively, you can
     * use the pfid parameter from the URL of the Product Finder search page
     * on the site you're interested in.
     * See the Knowledge Base article referenced below for more details.<br>
     * <br>
     * Multiple categories can be mapped to the same product finder ID.
     * You can pass zero or multiple IDs in the request. When IDs are specified, the call
     * only returns product finder meta-data for the specified product finders.
     * When no IDs are specified, the call returns all the current product finder
     * meta-data available on the site.
     * 
     *
     * @returns java.util.List<java.lang.Integer>
	 */
	public List<Integer> getProductFinderID() {
	    return this.productFinderID;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * A number that uniquely identifies a product finder. <br>
     * <br>
     * For sell-side searches, you can determine the
     * product finder IDs for a category by calling GetCategory2CS.<br>
     * <br>
     * For buy-side searches, you can't use GetCategory2CS to reliably determine
     * the product finder IDs for an eBay category.
     * GetProductFinder may work for some attributes. Alternatively, you can
     * use the pfid parameter from the URL of the Product Finder search page
     * on the site you're interested in.
     * See the Knowledge Base article referenced below for more details.<br>
     * <br>
     * Multiple categories can be mapped to the same product finder ID.
     * You can pass zero or multiple IDs in the request. When IDs are specified, the call
     * only returns product finder meta-data for the specified product finders.
     * When no IDs are specified, the call returns all the current product finder
     * meta-data available on the site.
     * 
     *
     * @param java.util.List<java.lang.Integer>
	 */
	public void setProductFinderID(List<Integer> productFinderID) {
	    this.productFinderID = productFinderID;
	}

}