// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.util.Date;

/**
 * 
 * There are single line item and multiple line item orders. A single
 * payment is made for both order types.
 * <br>
 * <br>
 * We strongly recommend that you avoid mixing digital and non-digital listings in
 * the same Combined Payment order.
 * 
 */
public class OrderType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "OrderID")
	private String orderID;
	
	@Element(name = "OrderStatus")
	private OrderStatusCodeType orderStatus;
	
	@Element(name = "AdjustmentAmount")
	private AmountType adjustmentAmount;
	
	@Element(name = "AmountPaid")
	private AmountType amountPaid;
	
	@Element(name = "AmountSaved")
	private AmountType amountSaved;
	
	@Element(name = "CheckoutStatus")
	private CheckoutStatusType checkoutStatus;
	
	@Element(name = "ShippingDetails")
	private ShippingDetailsType shippingDetails;
	
	@Element(name = "CreatingUserRole")
	private TradingRoleCodeType creatingUserRole;
	
	@Element(name = "CreatedTime")
	private Date createdTime;
	
	@Element(name = "PaymentMethods")
	private List<BuyerPaymentMethodCodeType> paymentMethods;
	
	@Element(name = "SellerEmail")
	private String sellerEmail;
	
	@Element(name = "ShippingAddress")
	private AddressType shippingAddress;
	
	@Element(name = "ShippingServiceSelected")
	private ShippingServiceOptionsType shippingServiceSelected;
	
	@Element(name = "Subtotal")
	private AmountType subtotal;
	
	@Element(name = "Total")
	private AmountType total;
	
	@Element(name = "ExternalTransaction")
	private List<ExternalTransactionType> externalTransaction;
	
	@Element(name = "TransactionArray")
	private TransactionArrayType transactionArray;
	
	@Element(name = "BuyerUserID")
	private String buyerUserID;
	
	@Element(name = "PaidTime")
	private Date paidTime;
	
	@Element(name = "ShippedTime")
	private Date shippedTime;
	
	@Element(name = "IntegratedMerchantCreditCardEnabled")
	private Boolean integratedMerchantCreditCardEnabled;
	
	@Element(name = "BundlePurchase")
	private Boolean bundlePurchase;
	
	@Element(name = "BuyerCheckoutMessage")
	private String buyerCheckoutMessage;
	
	@Element(name = "EIASToken")
	private String eiasToken;
	
	@Element(name = "PaymentHoldStatus")
	private PaymentHoldStatusCodeType paymentHoldStatus;
	
	@Element(name = "PaymentHoldDetails")
	private PaymentHoldDetailType paymentHoldDetails;
	
	@Element(name = "RefundArray")
	private RefundArrayType refundArray;
	
	@Element(name = "RefundAmount")
	private AmountType refundAmount;
	
	@Element(name = "RefundStatus")
	private String refundStatus;
	
	@Element(name = "IsMultiLegShipping")
	private Boolean isMultiLegShipping;
	
	@Element(name = "MultiLegShippingDetails")
	private MultiLegShippingDetailsType multiLegShippingDetails;
	
    
	/**
     * public getter
     *
     * 
     * A unique identifier that identifies a single line item or multiple line
     * item order.
     * <br><br>
     * For a single line item order, the <b>OrderID</b> value is identical to the
     * <b>OrderLineItemID</b> value that is generated upon creation of the order line
     * item. For a Combined Payment order or an order that goes through the eBay shopping cart flow, the <b>OrderID</b>
     * value is automatically created by eBay. A Combined Payment order can be created through the site by a buyer
     * or seller when the buyer or seller share multiple, common order line items. A Combined Payment order can
     * also be created by the seller through the <b>AddOrder</b> call.
     * <br><br>
     * An <b>OrderID</b> value overrides an <b>OrderLineItemID</b> value or an
     * <b>ItemID/TransactionID</b> pair if these fields are also specified in the same request.
     * <br><br>
     * Also applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns java.lang.String
	 */
	public String getOrderID() {
	    return this.orderID;
	}
	
	/**
	 * public setter
	 *
     * 
     * A unique identifier that identifies a single line item or multiple line
     * item order.
     * <br><br>
     * For a single line item order, the <b>OrderID</b> value is identical to the
     * <b>OrderLineItemID</b> value that is generated upon creation of the order line
     * item. For a Combined Payment order or an order that goes through the eBay shopping cart flow, the <b>OrderID</b>
     * value is automatically created by eBay. A Combined Payment order can be created through the site by a buyer
     * or seller when the buyer or seller share multiple, common order line items. A Combined Payment order can
     * also be created by the seller through the <b>AddOrder</b> call.
     * <br><br>
     * An <b>OrderID</b> value overrides an <b>OrderLineItemID</b> value or an
     * <b>ItemID/TransactionID</b> pair if these fields are also specified in the same request.
     * <br><br>
     * Also applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param java.lang.String
	 */
	public void setOrderID(String orderID) {
	    this.orderID = orderID;
	}
	/**
     * public getter
     *
     * 
     * This enumeration value indicates the current status of the order.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.OrderStatusCodeType
	 */
	public OrderStatusCodeType getOrderStatus() {
	    return this.orderStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * This enumeration value indicates the current status of the order.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param ebay.apis.eblbasecomponents.OrderStatusCodeType
	 */
	public void setOrderStatus(OrderStatusCodeType orderStatus) {
	    this.orderStatus = orderStatus;
	}
	/**
     * public getter
     *
     * 
     * This value indicates the dollar amount by which the buyer has adjusted the order
     * total. Adjustments to order costs may include shipping and handling, shipping
     * insurance, buyer discounts, or added services. A positive amount indicates the
     * amount is an extra charge being paid to the seller by the buyer. A negative
     * value indicates this amount is a credit given to the buyer by the seller.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getAdjustmentAmount() {
	    return this.adjustmentAmount;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the dollar amount by which the buyer has adjusted the order
     * total. Adjustments to order costs may include shipping and handling, shipping
     * insurance, buyer discounts, or added services. A positive amount indicates the
     * amount is an extra charge being paid to the seller by the buyer. A negative
     * value indicates this amount is a credit given to the buyer by the seller.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setAdjustmentAmount(AmountType adjustmentAmount) {
	    this.adjustmentAmount = adjustmentAmount;
	}
	/**
     * public getter
     *
     * 
     * This value indicates the total amount of the order. This amount includes the
     * sale price of each line item, shipping and handling charges, shipping insurance
     * (if offered and selected by the buyer), additional services, and any applied
     * sales tax. This value is returned after the buyer has completed checkout (the
     * <b>CheckoutStatus.Status</b> output field reads 'Complete').
     * <br><br>
     * <span class="tablenote"><strong>Note:</strong>
     * For auction listings on North American sites and on eBay Motors Parts and
     * Accessories, the <b>AmountPaid</b> value minus any applied sales tax is the amount
     * subject to the final value fee calculation. The sales tax amount is returned in
     * the <b>ShippingDetails.SalesTax.SalesTaxAmount</b> field. For more information on how
     * final value fees are calculated, see the
     * <a href="http://pages.ebay.com/help/sell/fvf.html">final value fees</a> help
     * page.
     * </span>
     * <br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getAmountPaid() {
	    return this.amountPaid;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the total amount of the order. This amount includes the
     * sale price of each line item, shipping and handling charges, shipping insurance
     * (if offered and selected by the buyer), additional services, and any applied
     * sales tax. This value is returned after the buyer has completed checkout (the
     * <b>CheckoutStatus.Status</b> output field reads 'Complete').
     * <br><br>
     * <span class="tablenote"><strong>Note:</strong>
     * For auction listings on North American sites and on eBay Motors Parts and
     * Accessories, the <b>AmountPaid</b> value minus any applied sales tax is the amount
     * subject to the final value fee calculation. The sales tax amount is returned in
     * the <b>ShippingDetails.SalesTax.SalesTaxAmount</b> field. For more information on how
     * final value fees are calculated, see the
     * <a href="http://pages.ebay.com/help/sell/fvf.html">final value fees</a> help
     * page.
     * </span>
     * <br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setAmountPaid(AmountType amountPaid) {
	    this.amountPaid = amountPaid;
	}
	/**
     * public getter
     *
     * 
     * This value indicates the shipping discount experienced by the buyer as a result
     * of creating a Combined Payment order. This value is returned as 0.00 for single
     * line item orders.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getAmountSaved() {
	    return this.amountSaved;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the shipping discount experienced by the buyer as a result
     * of creating a Combined Payment order. This value is returned as 0.00 for single
     * line item orders.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setAmountSaved(AmountType amountSaved) {
	    this.amountSaved = amountSaved;
	}
	/**
     * public getter
     *
     * 
     * Container consisting of details related to the current checkout status of the
     * order.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.CheckoutStatusType
	 */
	public CheckoutStatusType getCheckoutStatus() {
	    return this.checkoutStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of details related to the current checkout status of the
     * order.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param ebay.apis.eblbasecomponents.CheckoutStatusType
	 */
	public void setCheckoutStatus(CheckoutStatusType checkoutStatus) {
	    this.checkoutStatus = checkoutStatus;
	}
	/**
     * public getter
     *
     * 
     * Container consisting of all shipping-related details for an order, including
     * domestic and international shipping service options, shipment tracking
     * information, and shipping insurance information.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ShippingDetailsType
	 */
	public ShippingDetailsType getShippingDetails() {
	    return this.shippingDetails;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of all shipping-related details for an order, including
     * domestic and international shipping service options, shipment tracking
     * information, and shipping insurance information.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param ebay.apis.eblbasecomponents.ShippingDetailsType
	 */
	public void setShippingDetails(ShippingDetailsType shippingDetails) {
	    this.shippingDetails = shippingDetails;
	}
	/**
     * public getter
     *
     * 
     * This value indicates whether a Combined Payment order was created by the buyer
     * or by the seller. This field is only returned for Combined Payment orders.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.TradingRoleCodeType
	 */
	public TradingRoleCodeType getCreatingUserRole() {
	    return this.creatingUserRole;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates whether a Combined Payment order was created by the buyer
     * or by the seller. This field is only returned for Combined Payment orders.
     * 
     *
     * @param ebay.apis.eblbasecomponents.TradingRoleCodeType
	 */
	public void setCreatingUserRole(TradingRoleCodeType creatingUserRole) {
	    this.creatingUserRole = creatingUserRole;
	}
	/**
     * public getter
     *
     * 
     * Timestamp that indicates the date and time that the order was created. For
     * single line item orders, this value is the same as <b>CreatedDate</b> in the
     * <b>Transaction</b> container.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns java.util.Date
	 */
	public Date getCreatedTime() {
	    return this.createdTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * Timestamp that indicates the date and time that the order was created. For
     * single line item orders, this value is the same as <b>CreatedDate</b> in the
     * <b>Transaction</b> container.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param java.util.Date
	 */
	public void setCreatedTime(Date createdTime) {
	    this.createdTime = createdTime;
	}
	/**
     * public getter
     *
     * 
     *       This field indicates a payment method available to the buyer to pay for the
     * order. There can be multiple <b>PaymentMethods</b> fields.
     * <br><br>
     * For DE and AT orders subject to the new eBay payment process, only one
     * <b>PaymentMethods</b> field will be returned, and the value will
     * always be 'StandardPayment'.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.BuyerPaymentMethodCodeType>
	 */
	public List<BuyerPaymentMethodCodeType> getPaymentMethods() {
	    return this.paymentMethods;
	}
	
	/**
	 * public setter
	 *
     * 
     *       This field indicates a payment method available to the buyer to pay for the
     * order. There can be multiple <b>PaymentMethods</b> fields.
     * <br><br>
     * For DE and AT orders subject to the new eBay payment process, only one
     * <b>PaymentMethods</b> field will be returned, and the value will
     * always be 'StandardPayment'.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.BuyerPaymentMethodCodeType>
	 */
	public void setPaymentMethods(List<BuyerPaymentMethodCodeType> paymentMethods) {
	    this.paymentMethods = paymentMethods;
	}
	/**
     * public getter
     *
     * 
     * The email address of the seller involved in the order.
     * 
     *
     * @returns java.lang.String
	 */
	public String getSellerEmail() {
	    return this.sellerEmail;
	}
	
	/**
	 * public setter
	 *
     * 
     * The email address of the seller involved in the order.
     * 
     *
     * @param java.lang.String
	 */
	public void setSellerEmail(String sellerEmail) {
	    this.sellerEmail = sellerEmail;
	}
	/**
     * public getter
     *
     * 
     * Container holding the shipping address of the buyer involved in the order.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AddressType
	 */
	public AddressType getShippingAddress() {
	    return this.shippingAddress;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container holding the shipping address of the buyer involved in the order.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param ebay.apis.eblbasecomponents.AddressType
	 */
	public void setShippingAddress(AddressType shippingAddress) {
	    this.shippingAddress = shippingAddress;
	}
	/**
     * public getter
     *
     * 
     * Container consisting of details about the domestic or international shipping
     * service selected by the buyer.
     *       <br/><br/>
     *                   <span class="tablenote">
     *                   <strong>Note:</strong> For GetOrders and GetOrderTransactions, if you provide <strong>OrderLineItemID</strong> values in the <strong>OrderID</strong> field, this container does not return accurate shipping service and cost information for multiple line item orders. You must provide the order's combined <strong>OrderID</strong> value to ensure that the <strong>ShippingService</strong> and <strong>ShippingServiceCost</strong> fields return the correct values for the order. 
     *                   </span>
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ShippingServiceOptionsType
	 */
	public ShippingServiceOptionsType getShippingServiceSelected() {
	    return this.shippingServiceSelected;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of details about the domestic or international shipping
     * service selected by the buyer.
     *       <br/><br/>
     *                   <span class="tablenote">
     *                   <strong>Note:</strong> For GetOrders and GetOrderTransactions, if you provide <strong>OrderLineItemID</strong> values in the <strong>OrderID</strong> field, this container does not return accurate shipping service and cost information for multiple line item orders. You must provide the order's combined <strong>OrderID</strong> value to ensure that the <strong>ShippingService</strong> and <strong>ShippingServiceCost</strong> fields return the correct values for the order. 
     *                   </span>
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param ebay.apis.eblbasecomponents.ShippingServiceOptionsType
	 */
	public void setShippingServiceSelected(ShippingServiceOptionsType shippingServiceSelected) {
	    this.shippingServiceSelected = shippingServiceSelected;
	}
	/**
     * public getter
     *
     * 
     * The subtotal amount for the order is the total cost of all order line items. This value does not include any shipping/handling, shipping insurance, or sales tax costs.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getSubtotal() {
	    return this.subtotal;
	}
	
	/**
	 * public setter
	 *
     * 
     * The subtotal amount for the order is the total cost of all order line items. This value does not include any shipping/handling, shipping insurance, or sales tax costs.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setSubtotal(AmountType subtotal) {
	    this.subtotal = subtotal;
	}
	/**
     * public getter
     *
     * 
     * The <b>Total</b> amount equals the <b>Subtotal</b> value plus the shipping/handling, shipping insurance, and sales tax costs.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getTotal() {
	    return this.total;
	}
	
	/**
	 * public setter
	 *
     * 
     * The <b>Total</b> amount equals the <b>Subtotal</b> value plus the shipping/handling, shipping insurance, and sales tax costs.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setTotal(AmountType total) {
	    this.total = total;
	}
	/**
     * public getter
     *
     * 
     * Container consisting of payment details for an eBay order. PayPal transactions may
     * include a buyer payment or refund, or a fee or credit applied to the seller's
     * account. This field is only returned after payment for the order has occurred. For
     * DE and AT orders going through the new eBay payment process, the <b>
     * PaymentHoldDetails</b> container and <b>PaymentHoldStatus</b>
     * field will be returned instead of the <b> ExternalTransaction</b>
     * container.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.ExternalTransactionType>
	 */
	public List<ExternalTransactionType> getExternalTransaction() {
	    return this.externalTransaction;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of payment details for an eBay order. PayPal transactions may
     * include a buyer payment or refund, or a fee or credit applied to the seller's
     * account. This field is only returned after payment for the order has occurred. For
     * DE and AT orders going through the new eBay payment process, the <b>
     * PaymentHoldDetails</b> container and <b>PaymentHoldStatus</b>
     * field will be returned instead of the <b> ExternalTransaction</b>
     * container.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.ExternalTransactionType>
	 */
	public void setExternalTransaction(List<ExternalTransactionType> externalTransaction) {
	    this.externalTransaction = externalTransaction;
	}
	/**
     * public getter
     *
     * 
     * Container consisting of one or more line items that comprise an order. The data for
     * an order line item is stored in the <b>Transaction</b> container. For
     * the <b>AddOrder</b> call, there will always be at least two order line
     * items in the container, but no more than 40.
     * <br><br>
     * We strongly recommend that you avoid mixing transactions for digital and non-digital listings in the same Combined Payment order. (In the future, <b>AddOrder</b> may enforce this recommendation.)
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.TransactionArrayType
	 */
	public TransactionArrayType getTransactionArray() {
	    return this.transactionArray;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of one or more line items that comprise an order. The data for
     * an order line item is stored in the <b>Transaction</b> container. For
     * the <b>AddOrder</b> call, there will always be at least two order line
     * items in the container, but no more than 40.
     * <br><br>
     * We strongly recommend that you avoid mixing transactions for digital and non-digital listings in the same Combined Payment order. (In the future, <b>AddOrder</b> may enforce this recommendation.)
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param ebay.apis.eblbasecomponents.TransactionArrayType
	 */
	public void setTransactionArray(TransactionArrayType transactionArray) {
	    this.transactionArray = transactionArray;
	}
	/**
     * public getter
     *
     * 
     * eBay user ID of the order's buyer.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.String
	 */
	public String getBuyerUserID() {
	    return this.buyerUserID;
	}
	
	/**
	 * public setter
	 *
     * 
     * eBay user ID of the order's buyer.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.String
	 */
	public void setBuyerUserID(String buyerUserID) {
	    this.buyerUserID = buyerUserID;
	}
	/**
     * public getter
     *
     * 
     * Timestamp indicating the date and time of order payment. This field is not returned until payment has been made and checkout is complete.
     * <br><br>
     * This time is specified in GMT (not Pacific time). See "Time Values" in the eBay Web Services guide for information about converting between GMT and other time zones.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns java.util.Date
	 */
	public Date getPaidTime() {
	    return this.paidTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * Timestamp indicating the date and time of order payment. This field is not returned until payment has been made and checkout is complete.
     * <br><br>
     * This time is specified in GMT (not Pacific time). See "Time Values" in the eBay Web Services guide for information about converting between GMT and other time zones.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param java.util.Date
	 */
	public void setPaidTime(Date paidTime) {
	    this.paidTime = paidTime;
	}
	/**
     * public getter
     *
     * 
     * Timestamp indicating the date and time of order shipment. This field is not returned until the order has been marked as shipped. Note that sellers have the ability to set the shipped time up to three calendar days in the future.
     * <br><br>
     * This time is specified in GMT (not Pacific time). See "Time Values" in the eBay Web Services guide for information about converting between GMT and other time zones.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns java.util.Date
	 */
	public Date getShippedTime() {
	    return this.shippedTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * Timestamp indicating the date and time of order shipment. This field is not returned until the order has been marked as shipped. Note that sellers have the ability to set the shipped time up to three calendar days in the future.
     * <br><br>
     * This time is specified in GMT (not Pacific time). See "Time Values" in the eBay Web Services guide for information about converting between GMT and other time zones.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param java.util.Date
	 */
	public void setShippedTime(Date shippedTime) {
	    this.shippedTime = shippedTime;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the item can be paid for through a payment gateway (Payflow) account. If <b>IntegratedMerchantCreditCardEnabled</b> is true, then integrated merchant credit card (IMCC) is enabled for credit cards because the seller has a payment gateway account. Therefore, if <b>IntegratedMerchantCreditCardEnabled</b> is true, and AmEx, Discover, or VisaMC is returned for an item, then on checkout, an online credit-card payment is processed through a payment gateway account.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getIntegratedMerchantCreditCardEnabled() {
	    return this.integratedMerchantCreditCardEnabled;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the item can be paid for through a payment gateway (Payflow) account. If <b>IntegratedMerchantCreditCardEnabled</b> is true, then integrated merchant credit card (IMCC) is enabled for credit cards because the seller has a payment gateway account. Therefore, if <b>IntegratedMerchantCreditCardEnabled</b> is true, and AmEx, Discover, or VisaMC is returned for an item, then on checkout, an online credit-card payment is processed through a payment gateway account.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setIntegratedMerchantCreditCardEnabled(Boolean integratedMerchantCreditCardEnabled) {
	    this.integratedMerchantCreditCardEnabled = integratedMerchantCreditCardEnabled;
	}
	/**
     * public getter
     *
     * 
     * Reserved for future use.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getBundlePurchase() {
	    return this.bundlePurchase;
	}
	
	/**
	 * public setter
	 *
     * 
     * Reserved for future use.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setBundlePurchase(Boolean bundlePurchase) {
	    this.bundlePurchase = bundlePurchase;
	}
	/**
     * public getter
     *
     * 
     * This field is returned if the buyer left a message for the seller during
     * checkout.
     * 
     *
     * @returns java.lang.String
	 */
	public String getBuyerCheckoutMessage() {
	    return this.buyerCheckoutMessage;
	}
	
	/**
	 * public setter
	 *
     * 
     * This field is returned if the buyer left a message for the seller during
     * checkout.
     * 
     *
     * @param java.lang.String
	 */
	public void setBuyerCheckoutMessage(String buyerCheckoutMessage) {
	    this.buyerCheckoutMessage = buyerCheckoutMessage;
	}
	/**
     * public getter
     *
     * 
     * Unique identifier for the user that does not change when the eBay user name
     * is changed. Use when an application needs to associate a new eBay user name
     * with the corresponding eBay user.
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to that
     * bidder, and to the seller of an item that the user is bidding on.
     * 
     *
     * @returns java.lang.String
	 */
	public String getEiasToken() {
	    return this.eiasToken;
	}
	
	/**
	 * public setter
	 *
     * 
     * Unique identifier for the user that does not change when the eBay user name
     * is changed. Use when an application needs to associate a new eBay user name
     * with the corresponding eBay user.
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to that
     * bidder, and to the seller of an item that the user is bidding on.
     * 
     *
     * @param java.lang.String
	 */
	public void setEiasToken(String eiasToken) {
	    this.eiasToken = eiasToken;
	}
	/**
     * public getter
     *
     * 
     * This field indicates the type and/or status of a payment hold on the item.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PaymentHoldStatusCodeType
	 */
	public PaymentHoldStatusCodeType getPaymentHoldStatus() {
	    return this.paymentHoldStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * This field indicates the type and/or status of a payment hold on the item.
     * 
     *
     * @param ebay.apis.eblbasecomponents.PaymentHoldStatusCodeType
	 */
	public void setPaymentHoldStatus(PaymentHoldStatusCodeType paymentHoldStatus) {
	    this.paymentHoldStatus = paymentHoldStatus;
	}
	/**
     * public getter
     *
     * 
     * This container will be returned for DE and AT orders going through the new eBay
     * payment process. This container consists of the expected payout distribution to the
     * seller's account, as well as possible actions that a seller can take to expedite the
     * payout for the order.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PaymentHoldDetailType
	 */
	public PaymentHoldDetailType getPaymentHoldDetails() {
	    return this.paymentHoldDetails;
	}
	
	/**
	 * public setter
	 *
     * 
     * This container will be returned for DE and AT orders going through the new eBay
     * payment process. This container consists of the expected payout distribution to the
     * seller's account, as well as possible actions that a seller can take to expedite the
     * payout for the order.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @param ebay.apis.eblbasecomponents.PaymentHoldDetailType
	 */
	public void setPaymentHoldDetails(PaymentHoldDetailType paymentHoldDetails) {
	    this.paymentHoldDetails = paymentHoldDetails;
	}
	/**
     * public getter
     *
     * 
     * Container consisting of one or more refunds for Half.com orders or DE/AT orders
     * subject to the new eBay payment process. This container is returned only if a refund
     * to a Half.com buyer has occurred or a refund was issued for an order subject to the 
     * new eBay payment Process.<br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @returns ebay.apis.eblbasecomponents.RefundArrayType
	 */
	public RefundArrayType getRefundArray() {
	    return this.refundArray;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of one or more refunds for Half.com orders or DE/AT orders
     * subject to the new eBay payment process. This container is returned only if a refund
     * to a Half.com buyer has occurred or a refund was issued for an order subject to the 
     * new eBay payment Process.<br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @param ebay.apis.eblbasecomponents.RefundArrayType
	 */
	public void setRefundArray(RefundArrayType refundArray) {
	    this.refundArray = refundArray;
	}
	/**
     * public getter
     *
     * 
     * Amount of the refund issued to the buyer. This field is only returned for a DE/AT
     * order subject to the new eBay payment process, and if a refund was issued to the
     * buyer.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getRefundAmount() {
	    return this.refundAmount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Amount of the refund issued to the buyer. This field is only returned for a DE/AT
     * order subject to the new eBay payment process, and if a refund was issued to the
     * buyer.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setRefundAmount(AmountType refundAmount) {
	    this.refundAmount = refundAmount;
	}
	/**
     * public getter
     *
     * 
     * String value indicating the result of a refund (Success, Failure, Pending) to the
     * buyer for an DE/AT order subject to the new eBay payment process.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @returns java.lang.String
	 */
	public String getRefundStatus() {
	    return this.refundStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * String value indicating the result of a refund (Success, Failure, Pending) to the
     * buyer for an DE/AT order subject to the new eBay payment process.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @param java.lang.String
	 */
	public void setRefundStatus(String refundStatus) {
	    this.refundStatus = refundStatus;
	}
	/**
     * public getter
     *
     * 
     * If <strong>IsMultilegShipping</strong> is true, the order or transaction uses the Global Shipping Program, in which the shipment has a domestic leg and an international leg. The buyer's shipping address is in a country other than the country where the items were listed, and the seller has specified InternationalPriorityShipping as the default international shipping service in the listings of all the items in the shipment.
     * <br/><br/>
     * If <strong>IsMultilegShipping</strong> is false, the order or transaction doesn't use the Global Shipping Program. The shipment might use a different international shipping service, or it might be domestic.
     *       </span>
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getIsMultiLegShipping() {
	    return this.isMultiLegShipping;
	}
	
	/**
	 * public setter
	 *
     * 
     * If <strong>IsMultilegShipping</strong> is true, the order or transaction uses the Global Shipping Program, in which the shipment has a domestic leg and an international leg. The buyer's shipping address is in a country other than the country where the items were listed, and the seller has specified InternationalPriorityShipping as the default international shipping service in the listings of all the items in the shipment.
     * <br/><br/>
     * If <strong>IsMultilegShipping</strong> is false, the order or transaction doesn't use the Global Shipping Program. The shipment might use a different international shipping service, or it might be domestic.
     *       </span>
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setIsMultiLegShipping(Boolean isMultiLegShipping) {
	    this.isMultiLegShipping = isMultiLegShipping;
	}
	/**
     * public getter
     *
     * 
     * Contains details about the domestic leg of a Global Shipping Program shipment.
     * <br/><br/>
     * This information is not returned if <strong>IsMultilegShipping</strong> is false.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.MultiLegShippingDetailsType
	 */
	public MultiLegShippingDetailsType getMultiLegShippingDetails() {
	    return this.multiLegShippingDetails;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains details about the domestic leg of a Global Shipping Program shipment.
     * <br/><br/>
     * This information is not returned if <strong>IsMultilegShipping</strong> is false.
     * 
     *
     * @param ebay.apis.eblbasecomponents.MultiLegShippingDetailsType
	 */
	public void setMultiLegShippingDetails(MultiLegShippingDetailsType multiLegShippingDetails) {
	    this.multiLegShippingDetails = multiLegShippingDetails;
	}

}