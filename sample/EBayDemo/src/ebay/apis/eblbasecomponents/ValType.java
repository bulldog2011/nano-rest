// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

public class ValType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "ValueLiteral")
	private String valueLiteral;
	
	@Element(name = "SuggestedValueLiteral")
	private List<String> suggestedValueLiteral;
	
	@Element(name = "ValueID")
	private Integer valueID;
	
    
	/**
     * public getter
     *
     * 
     * For Half.com, use AttributeArray.Attribute.Value.ValueLiteral
     * in listing requests.
     * For Half.com,
     * AttributeArray.Attribute.Value.ValueLiteral is required when
     * you use AddItem. See the eBay Web Services Guide for valid
     * values. For the Half.com Notes attribute, the max
     * length is 500 characters. You can revise
     * AttributeArray.Attribute.Value.ValueLiteral for Half.com
     * listings.
     * 
     *
     * @returns java.lang.String
	 */
	public String getValueLiteral() {
	    return this.valueLiteral;
	}
	
	/**
	 * public setter
	 *
     * 
     * For Half.com, use AttributeArray.Attribute.Value.ValueLiteral
     * in listing requests.
     * For Half.com,
     * AttributeArray.Attribute.Value.ValueLiteral is required when
     * you use AddItem. See the eBay Web Services Guide for valid
     * values. For the Half.com Notes attribute, the max
     * length is 500 characters. You can revise
     * AttributeArray.Attribute.Value.ValueLiteral for Half.com
     * listings.
     * 
     *
     * @param java.lang.String
	 */
	public void setValueLiteral(String valueLiteral) {
	    this.valueLiteral = valueLiteral;
	}
	/**
     * public getter
     *
     * 
     * (out) Reserved for future use. Suggested alternative text for
     * ValueLiteral. Multiple SuggestedValueLiteral elements can be
     * returned in a Value node. Not applicable to Half.com.
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getSuggestedValueLiteral() {
	    return this.suggestedValueLiteral;
	}
	
	/**
	 * public setter
	 *
     * 
     * (out) Reserved for future use. Suggested alternative text for
     * ValueLiteral. Multiple SuggestedValueLiteral elements can be
     * returned in a Value node. Not applicable to Half.com.
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setSuggestedValueLiteral(List<String> suggestedValueLiteral) {
	    this.suggestedValueLiteral = suggestedValueLiteral;
	}
	/**
     * public getter
     *
     * 
     * Constant value that identifies the attribute or characteristic
     * in a language-independent way. Unique within the
     * characteristic set.<br>
     * <br>
     * In item-listing requests, if the ID is defined as -3
     * or -6 (Other) in GetAttributesCS or GetProductSellingPages,
     * use ValueLiteral to specify the string value that the
     * user entered. Otherwise, use ValueID to specify the ID
     * that is pre-defined in GetAttributesCS or GetProductSellingPages.
     * In item-listing requests and product searches,
     * the possible ID values are:<br>
     * -3 = User entered an arbitrary value (not an "Other" field)<br>
     * -6 = User entered a value in an "Other" field<br>
     * -100 = Value not specified (null)<br>
     * #### (integer) = Identifier for a pre-defined value
     * that the user selected (e.g., -14 or 1001)<br>
     * For eBay.com, required if ValueList is specified.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getValueID() {
	    return this.valueID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Constant value that identifies the attribute or characteristic
     * in a language-independent way. Unique within the
     * characteristic set.<br>
     * <br>
     * In item-listing requests, if the ID is defined as -3
     * or -6 (Other) in GetAttributesCS or GetProductSellingPages,
     * use ValueLiteral to specify the string value that the
     * user entered. Otherwise, use ValueID to specify the ID
     * that is pre-defined in GetAttributesCS or GetProductSellingPages.
     * In item-listing requests and product searches,
     * the possible ID values are:<br>
     * -3 = User entered an arbitrary value (not an "Other" field)<br>
     * -6 = User entered a value in an "Other" field<br>
     * -100 = Value not specified (null)<br>
     * #### (integer) = Identifier for a pre-defined value
     * that the user selected (e.g., -14 or 1001)<br>
     * For eBay.com, required if ValueList is specified.
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setValueID(Integer valueID) {
	    this.valueID = valueID;
	}

}