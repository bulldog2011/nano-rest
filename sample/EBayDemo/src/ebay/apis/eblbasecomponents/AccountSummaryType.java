// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.util.Date;

/**
 * 
 * Summary data for the requesting user's seller account as a whole. This includes a
 * balance for the account, any past due amount and date, and defining data for
 * additional accounts (if the user has changed country of residency while having an
 * active eBay account).
 * 
 */
public class AccountSummaryType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "AccountState")
	private AccountStateCodeType accountState;
	
	@Element(name = "InvoicePayment")
	private AmountType invoicePayment;
	
	@Element(name = "InvoiceCredit")
	private AmountType invoiceCredit;
	
	@Element(name = "InvoiceNewFee")
	private AmountType invoiceNewFee;
	
	@Element(name = "AdditionalAccount")
	private List<AdditionalAccountType> additionalAccount;
	
	@Element(name = "AmountPastDue")
	private AmountType amountPastDue;
	
	@Element(name = "BankAccountInfo")
	private String bankAccountInfo;
	
	@Element(name = "BankModifyDate")
	private Date bankModifyDate;
	
	@Element(name = "BillingCycleDate")
	private Integer billingCycleDate;
	
	@Element(name = "CreditCardExpiration")
	private Date creditCardExpiration;
	
	@Element(name = "CreditCardInfo")
	private String creditCardInfo;
	
	@Element(name = "CreditCardModifyDate")
	private Date creditCardModifyDate;
	
	@Element(name = "CurrentBalance")
	private AmountType currentBalance;
	
	@Element(name = "Email")
	private String email;
	
	@Element(name = "InvoiceBalance")
	private AmountType invoiceBalance;
	
	@Element(name = "InvoiceDate")
	private Date invoiceDate;
	
	@Element(name = "LastAmountPaid")
	private AmountType lastAmountPaid;
	
	@Element(name = "LastPaymentDate")
	private Date lastPaymentDate;
	
	@Element(name = "PastDue")
	private Boolean pastDue;
	
	@Element(name = "PaymentMethod")
	private SellerPaymentMethodCodeType paymentMethod;
	
    
	/**
     * public getter
     *
     * 
     * Indicates the current state of the account (such as active or inactive).
     * Possible values are enumerated in the AccountStateCodeType code list.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AccountStateCodeType
	 */
	public AccountStateCodeType getAccountState() {
	    return this.accountState;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the current state of the account (such as active or inactive).
     * Possible values are enumerated in the AccountStateCodeType code list.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AccountStateCodeType
	 */
	public void setAccountState(AccountStateCodeType accountState) {
	    this.accountState = accountState;
	}
	/**
     * public getter
     *
     * 
     * Specifies payment made since the previous invoice, but is
     * returned only if AccountHistorySelection is LastInvoice or Specified
     * Invoice. The value is positive for debits and negative for credits.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getInvoicePayment() {
	    return this.invoicePayment;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies payment made since the previous invoice, but is
     * returned only if AccountHistorySelection is LastInvoice or Specified
     * Invoice. The value is positive for debits and negative for credits.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setInvoicePayment(AmountType invoicePayment) {
	    this.invoicePayment = invoicePayment;
	}
	/**
     * public getter
     *
     * 
     * Specifies credits granted since the previous invoice, but
     * is only returned AccountHistorySelection is LastInvoice or Specified
     * Invoice.
     * The value is positive for debits and negative for credits.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getInvoiceCredit() {
	    return this.invoiceCredit;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies credits granted since the previous invoice, but
     * is only returned AccountHistorySelection is LastInvoice or Specified
     * Invoice.
     * The value is positive for debits and negative for credits.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setInvoiceCredit(AmountType invoiceCredit) {
	    this.invoiceCredit = invoiceCredit;
	}
	/**
     * public getter
     *
     * 
     * Specifies fees incurred since the last invoice, including
     * tax if applicable. Returned only if AccountHistorySelection
     * is LastInvoice or Specified Invoice. The value is positive for debits and negative for credits.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getInvoiceNewFee() {
	    return this.invoiceNewFee;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies fees incurred since the last invoice, including
     * tax if applicable. Returned only if AccountHistorySelection
     * is LastInvoice or Specified Invoice. The value is positive for debits and negative for credits.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setInvoiceNewFee(AmountType invoiceNewFee) {
	    this.invoiceNewFee = invoiceNewFee;
	}
	/**
     * public getter
     *
     * 
     * Contains the data for one additional account. An AccountSummaryType object
     * may return zero, one, or multiple additional accounts. See the schema
     * documentation for AdditionalAccountType for details on additional accounts.
     * The value is positive for debits and negative for credits.
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.AdditionalAccountType>
	 */
	public List<AdditionalAccountType> getAdditionalAccount() {
	    return this.additionalAccount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains the data for one additional account. An AccountSummaryType object
     * may return zero, one, or multiple additional accounts. See the schema
     * documentation for AdditionalAccountType for details on additional accounts.
     * The value is positive for debits and negative for credits.
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.AdditionalAccountType>
	 */
	public void setAdditionalAccount(List<AdditionalAccountType> additionalAccount) {
	    this.additionalAccount = additionalAccount;
	}
	/**
     * public getter
     *
     * 
     * Amount past due, 0.00 if not past due.
     * The value is positive for debits and negative for credits.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getAmountPastDue() {
	    return this.amountPastDue;
	}
	
	/**
	 * public setter
	 *
     * 
     * Amount past due, 0.00 if not past due.
     * The value is positive for debits and negative for credits.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setAmountPastDue(AmountType amountPastDue) {
	    this.amountPastDue = amountPastDue;
	}
	/**
     * public getter
     *
     * 
     * First four digits of the bank account the user associated with the seller
     * account (with remainder Xed-out). This may be an empty string depending
     * upon the payment type the user selected for the account (e.g., if no
     * debit-card specified).
     * 
     *
     * @returns java.lang.String
	 */
	public String getBankAccountInfo() {
	    return this.bankAccountInfo;
	}
	
	/**
	 * public setter
	 *
     * 
     * First four digits of the bank account the user associated with the seller
     * account (with remainder Xed-out). This may be an empty string depending
     * upon the payment type the user selected for the account (e.g., if no
     * debit-card specified).
     * 
     *
     * @param java.lang.String
	 */
	public void setBankAccountInfo(String bankAccountInfo) {
	    this.bankAccountInfo = bankAccountInfo;
	}
	/**
     * public getter
     *
     * 
     * Indicates the date and time BankAccountInfo was last modified, in GMT.
     * (Also see the Data Types appendix for more information on how GMT dates are
     * handled in SOAP.) This may be an empty string depending upon the payment
     * type the user selected for the account (e.g., if no debit-card specified).
     * 
     *
     * @returns java.util.Date
	 */
	public Date getBankModifyDate() {
	    return this.bankModifyDate;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the date and time BankAccountInfo was last modified, in GMT.
     * (Also see the Data Types appendix for more information on how GMT dates are
     * handled in SOAP.) This may be an empty string depending upon the payment
     * type the user selected for the account (e.g., if no debit-card specified).
     * 
     *
     * @param java.util.Date
	 */
	public void setBankModifyDate(Date bankModifyDate) {
	    this.bankModifyDate = bankModifyDate;
	}
	/**
     * public getter
     *
     * 
     * Indicates the billing cycle in which eBay sends a billing invoice to the
     * user. A value of 0 (zero) indicates an invoice sent on the last day of the
     * month. A value of 15 indicates an invoice sent on the 15th day of the
     * month.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getBillingCycleDate() {
	    return this.billingCycleDate;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the billing cycle in which eBay sends a billing invoice to the
     * user. A value of 0 (zero) indicates an invoice sent on the last day of the
     * month. A value of 15 indicates an invoice sent on the 15th day of the
     * month.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setBillingCycleDate(Integer billingCycleDate) {
	    this.billingCycleDate = billingCycleDate;
	}
	/**
     * public getter
     *
     * 
     * Expiration date for the credit card selected by the user as payment method
     * for the account, in GMT. (Also see the Data Types appendix for more
     * information on how GMT dates are handled in SOAP.) Empty string if no
     * credit card is on file or if the account is inactive - even if there is a
     * credit card on file.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getCreditCardExpiration() {
	    return this.creditCardExpiration;
	}
	
	/**
	 * public setter
	 *
     * 
     * Expiration date for the credit card selected by the user as payment method
     * for the account, in GMT. (Also see the Data Types appendix for more
     * information on how GMT dates are handled in SOAP.) Empty string if no
     * credit card is on file or if the account is inactive - even if there is a
     * credit card on file.
     * 
     *
     * @param java.util.Date
	 */
	public void setCreditCardExpiration(Date creditCardExpiration) {
	    this.creditCardExpiration = creditCardExpiration;
	}
	/**
     * public getter
     *
     * 
     * Last four digits of the credit card the user selected as payment method for
     * the account. Empty string if no credit is on file.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCreditCardInfo() {
	    return this.creditCardInfo;
	}
	
	/**
	 * public setter
	 *
     * 
     * Last four digits of the credit card the user selected as payment method for
     * the account. Empty string if no credit is on file.
     * 
     *
     * @param java.lang.String
	 */
	public void setCreditCardInfo(String creditCardInfo) {
	    this.creditCardInfo = creditCardInfo;
	}
	/**
     * public getter
     *
     * 
     * Indicates the date and time credit card or credit card expiration date was
     * last modified, in GMT. (Also see the Data Types appendix for more
     * information on how GMT dates are handled in SOAP.) This may be an empty
     * string depending on the payment method the user selected for the account
     * (e.g., Empty string if no credit card is on file.)
     * 
     *
     * @returns java.util.Date
	 */
	public Date getCreditCardModifyDate() {
	    return this.creditCardModifyDate;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the date and time credit card or credit card expiration date was
     * last modified, in GMT. (Also see the Data Types appendix for more
     * information on how GMT dates are handled in SOAP.) This may be an empty
     * string depending on the payment method the user selected for the account
     * (e.g., Empty string if no credit card is on file.)
     * 
     *
     * @param java.util.Date
	 */
	public void setCreditCardModifyDate(Date creditCardModifyDate) {
	    this.creditCardModifyDate = creditCardModifyDate;
	}
	/**
     * public getter
     *
     * 
     * Current balance for the account. Can be 0.00, positive, or negative.
     * The value is positive for debits and negative for credits.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getCurrentBalance() {
	    return this.currentBalance;
	}
	
	/**
	 * public setter
	 *
     * 
     * Current balance for the account. Can be 0.00, positive, or negative.
     * The value is positive for debits and negative for credits.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setCurrentBalance(AmountType currentBalance) {
	    this.currentBalance = currentBalance;
	}
	/**
     * public getter
     *
     * 
     * (out) Email address for the user. You cannot retrieve an email address for any
     * user with whom you do not have a transactional relationship, regardless of
     * site. Email is only returned for applicable calls when you are retrieving your
     * own user data OR when you and the other user are in a transactional
     * relationship and the call is being executed within a certain amount of time
     * after the transaction is created.
     * 
     *
     * @returns java.lang.String
	 */
	public String getEmail() {
	    return this.email;
	}
	
	/**
	 * public setter
	 *
     * 
     * (out) Email address for the user. You cannot retrieve an email address for any
     * user with whom you do not have a transactional relationship, regardless of
     * site. Email is only returned for applicable calls when you are retrieving your
     * own user data OR when you and the other user are in a transactional
     * relationship and the call is being executed within a certain amount of time
     * after the transaction is created.
     * 
     *
     * @param java.lang.String
	 */
	public void setEmail(String email) {
	    this.email = email;
	}
	/**
     * public getter
     *
     * 
     * Amount of last invoice. 0.00 if account not yet invoiced.
     * The value is positive for debits and negative for credits.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getInvoiceBalance() {
	    return this.invoiceBalance;
	}
	
	/**
	 * public setter
	 *
     * 
     * Amount of last invoice. 0.00 if account not yet invoiced.
     * The value is positive for debits and negative for credits.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setInvoiceBalance(AmountType invoiceBalance) {
	    this.invoiceBalance = invoiceBalance;
	}
	/**
     * public getter
     *
     * 
     * Date of last invoice sent by eBay to the user, in GMT. (Also see the Data
     * Types appendix for more information on how GMT dates are handled in SOAP.)
     * Empty string if this account has not been invoiced yet.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getInvoiceDate() {
	    return this.invoiceDate;
	}
	
	/**
	 * public setter
	 *
     * 
     * Date of last invoice sent by eBay to the user, in GMT. (Also see the Data
     * Types appendix for more information on how GMT dates are handled in SOAP.)
     * Empty string if this account has not been invoiced yet.
     * 
     *
     * @param java.util.Date
	 */
	public void setInvoiceDate(Date invoiceDate) {
	    this.invoiceDate = invoiceDate;
	}
	/**
     * public getter
     *
     * 
     * Amount of last payment posted, 0.00 if no payments posted.
     * The value is positive for debits and negative for credits.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getLastAmountPaid() {
	    return this.lastAmountPaid;
	}
	
	/**
	 * public setter
	 *
     * 
     * Amount of last payment posted, 0.00 if no payments posted.
     * The value is positive for debits and negative for credits.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setLastAmountPaid(AmountType lastAmountPaid) {
	    this.lastAmountPaid = lastAmountPaid;
	}
	/**
     * public getter
     *
     * 
     * Date of last payment by the user to eBay, in GMT. (Also see the Data Types
     * appendix for more information on how GMT dates are handled in SOAP.) Empty
     * string if no payments have been posted.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getLastPaymentDate() {
	    return this.lastPaymentDate;
	}
	
	/**
	 * public setter
	 *
     * 
     * Date of last payment by the user to eBay, in GMT. (Also see the Data Types
     * appendix for more information on how GMT dates are handled in SOAP.) Empty
     * string if no payments have been posted.
     * 
     *
     * @param java.util.Date
	 */
	public void setLastPaymentDate(Date lastPaymentDate) {
	    this.lastPaymentDate = lastPaymentDate;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the account has past due amounts outstanding. A value of
     * true indicates that the account is past due. A value of false indicates the
     * account is current.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getPastDue() {
	    return this.pastDue;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the account has past due amounts outstanding. A value of
     * true indicates that the account is past due. A value of false indicates the
     * account is current.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setPastDue(Boolean pastDue) {
	    this.pastDue = pastDue;
	}
	/**
     * public getter
     *
     * 
     * Indicates the method the user selected to pay eBay with for the account.
     * The values for PaymentMethod vary from one global eBay site to the next.
     * Payment methods are enumerated in the SellerPaymentMethodCodeType code
     * list.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SellerPaymentMethodCodeType
	 */
	public SellerPaymentMethodCodeType getPaymentMethod() {
	    return this.paymentMethod;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the method the user selected to pay eBay with for the account.
     * The values for PaymentMethod vary from one global eBay site to the next.
     * Payment methods are enumerated in the SellerPaymentMethodCodeType code
     * list.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SellerPaymentMethodCodeType
	 */
	public void setPaymentMethod(SellerPaymentMethodCodeType paymentMethod) {
	    this.paymentMethod = paymentMethod;
	}

}