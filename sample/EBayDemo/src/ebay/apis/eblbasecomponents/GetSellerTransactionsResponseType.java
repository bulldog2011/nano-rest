// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * 
 * Returns an array of order line item (transaction) data for the seller specified in the request.
 * The results can be used to create a report of data that is commonly
 * necessary for order processing.
 * Zero, one, or many <b>Transaction</b> objects can be returned in the <b>TransactionArray</b>.
 * The set of order line items returned is limited to those that were modified between
 * the times specified in the request's <b>ModTimeFrom</b> and <b>ModTimeTo</b> filters.
 * The order line items returned are sorted by <b>Transaction.Status.LastTimeModified</b>,
 * ascending order (that is, order line items that more recently were modified are returned last).
 * Also returns information about the seller whose order line items were requested.
 * If pagination filters were specified in the request, returns meta-data describing
 * the effects of those filters on the current response and the estimated effects if
 * the same filters are used in subsequent calls.
 * 
 */
@RootElement(name = "GetSellerTransactionsResponse", namespace = "urn:ebay:apis:eBLBaseComponents")
public class GetSellerTransactionsResponseType extends AbstractResponseType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "PaginationResult")
	private PaginationResultType paginationResult;
	
	@Element(name = "HasMoreTransactions")
	private Boolean hasMoreTransactions;
	
	@Element(name = "TransactionsPerPage")
	private Integer transactionsPerPage;
	
	@Element(name = "PageNumber")
	private Integer pageNumber;
	
	@Element(name = "ReturnedTransactionCountActual")
	private Integer returnedTransactionCountActual;
	
	@Element(name = "Seller")
	private UserType seller;
	
	@Element(name = "TransactionArray")
	private TransactionArrayType transactionArray;
	
	@Element(name = "PayPalPreferred")
	private Boolean payPalPreferred;
	
    
	/**
     * public getter
     *
     * 
     * Container consisting of the total number of order line items that match the input
     * criteria and the total number of pages that must be scrolled through to view all order
     * line items. To scroll through each page of order line item data, make subsequent 
     * <b>GetSellerTransactions</b> calls, incrementing the <b>Pagination.PageNumber</b> 
     * field by a value of '1' each time.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PaginationResultType
	 */
	public PaginationResultType getPaginationResult() {
	    return this.paginationResult;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of the total number of order line items that match the input
     * criteria and the total number of pages that must be scrolled through to view all order
     * line items. To scroll through each page of order line item data, make subsequent 
     * <b>GetSellerTransactions</b> calls, incrementing the <b>Pagination.PageNumber</b> 
     * field by a value of '1' each time.
     * 
     *
     * @param ebay.apis.eblbasecomponents.PaginationResultType
	 */
	public void setPaginationResult(PaginationResultType paginationResult) {
	    this.paginationResult = paginationResult;
	}
	/**
     * public getter
     *
     * 
     * This flag indicates whether there are additional pages of order line items to view.
     * This field will be returned as 'true' if there are additional pages or order line items
     * to view, or 'false' if the current page of order line item data is the last page of 
     * data.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getHasMoreTransactions() {
	    return this.hasMoreTransactions;
	}
	
	/**
	 * public setter
	 *
     * 
     * This flag indicates whether there are additional pages of order line items to view.
     * This field will be returned as 'true' if there are additional pages or order line items
     * to view, or 'false' if the current page of order line item data is the last page of 
     * data.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setHasMoreTransactions(Boolean hasMoreTransactions) {
	    this.hasMoreTransactions = hasMoreTransactions;
	}
	/**
     * public getter
     *
     * 
     * This value indicates the number of order line items returned per page (per call) and is
     * controlled by the <b>Pagination.EntriesPerPage</b> value passed in the call
     * request. Unless it is the last (or possibly only) page of data (<b>HasMoreTransactions=false</b>),  
     * the <b>TransactionsPerPage</b> value should equal the 
     * <b>Pagination.EntriesPerPage</b> value passed in the call request.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * Due to the fact that item data on the eBay platform has a shorter retention period than 
     * order data, it is possible that some retrieved pages will contain no data. For pages 
     * that contain no data, the <b>ReturnedTransactionCountActual</b> value will 
     * be '0'. It is also possible that pages 2, 3, and 4 have no data, but pages 1 and 5 do 
     * have data. Therefore, we recommend that you scroll through each page of data (making 
     * subsequent <b>GetSellerTransactions</b> calls and incrementing the
     * <b>Pagination.PageNumber</b> value by '1' each time) until you reach the 
     * last page, indicated by <b>HasMoreTransactions=false</b>.
     * </span>
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getTransactionsPerPage() {
	    return this.transactionsPerPage;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the number of order line items returned per page (per call) and is
     * controlled by the <b>Pagination.EntriesPerPage</b> value passed in the call
     * request. Unless it is the last (or possibly only) page of data (<b>HasMoreTransactions=false</b>),  
     * the <b>TransactionsPerPage</b> value should equal the 
     * <b>Pagination.EntriesPerPage</b> value passed in the call request.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * Due to the fact that item data on the eBay platform has a shorter retention period than 
     * order data, it is possible that some retrieved pages will contain no data. For pages 
     * that contain no data, the <b>ReturnedTransactionCountActual</b> value will 
     * be '0'. It is also possible that pages 2, 3, and 4 have no data, but pages 1 and 5 do 
     * have data. Therefore, we recommend that you scroll through each page of data (making 
     * subsequent <b>GetSellerTransactions</b> calls and incrementing the
     * <b>Pagination.PageNumber</b> value by '1' each time) until you reach the 
     * last page, indicated by <b>HasMoreTransactions=false</b>.
     * </span>
     * 
     *
     * @param java.lang.Integer
	 */
	public void setTransactionsPerPage(Integer transactionsPerPage) {
	    this.transactionsPerPage = transactionsPerPage;
	}
	/**
     * public getter
     *
     * 
     * This value indicates the page number of retrieved order line items that match the input
     * criteria. This value is controlled by the <b>Pagination.PageNumber</b>
     * value passed in the call request. To scroll through all pages of order line items that match the 
     * input criteria, you increment the <b>Pagination.PageNumber</b> value by '1' 
     * with each subsequent <b>GetSellerTransactions</b> call.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getPageNumber() {
	    return this.pageNumber;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the page number of retrieved order line items that match the input
     * criteria. This value is controlled by the <b>Pagination.PageNumber</b>
     * value passed in the call request. To scroll through all pages of order line items that match the 
     * input criteria, you increment the <b>Pagination.PageNumber</b> value by '1' 
     * with each subsequent <b>GetSellerTransactions</b> call.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setPageNumber(Integer pageNumber) {
	    this.pageNumber = pageNumber;
	}
	/**
     * public getter
     *
     * 
     * This value indicates the total number of (non-empty) order line items retrieved in the
     * current page of results. The <b>ReturnedTransactionCountActual</b> value
     * will be lower than the <b>TransactionsPerPage</b> value if one or more 
     * empty order line items are retreived on the page.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * Due to the fact that item data on the eBay platform has a shorter retention period than 
     * order data, it is possible that some retrieved pages will contain no data. For pages 
     * that contain no order line item data, the <b>ReturnedTransactionCountActual</b> value will 
     * be '0'. It is also possible that pages 2, 3, and 4 have no data, but pages 1 and 5 do 
     * have data. Therefore, we recommend that you scroll through each page of data (making 
     * subsequent <b>GetSellerTransactions</b> calls and incrementing the
     * <b>Pagination.PageNumber</b> value by '1' each time) until you reach the 
     * last page, indicated by <b>HasMoreTransactions=false</b>.
     * </span>
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getReturnedTransactionCountActual() {
	    return this.returnedTransactionCountActual;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the total number of (non-empty) order line items retrieved in the
     * current page of results. The <b>ReturnedTransactionCountActual</b> value
     * will be lower than the <b>TransactionsPerPage</b> value if one or more 
     * empty order line items are retreived on the page.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * Due to the fact that item data on the eBay platform has a shorter retention period than 
     * order data, it is possible that some retrieved pages will contain no data. For pages 
     * that contain no order line item data, the <b>ReturnedTransactionCountActual</b> value will 
     * be '0'. It is also possible that pages 2, 3, and 4 have no data, but pages 1 and 5 do 
     * have data. Therefore, we recommend that you scroll through each page of data (making 
     * subsequent <b>GetSellerTransactions</b> calls and incrementing the
     * <b>Pagination.PageNumber</b> value by '1' each time) until you reach the 
     * last page, indicated by <b>HasMoreTransactions=false</b>.
     * </span>
     * 
     *
     * @param java.lang.Integer
	 */
	public void setReturnedTransactionCountActual(Integer returnedTransactionCountActual) {
	    this.returnedTransactionCountActual = returnedTransactionCountActual;
	}
	/**
     * public getter
     *
     * 
     * Contains information about the seller whose order line items are being returned.
     * See the reference guide for information about the <b>Seller</b> object fields
     * that are returned.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.UserType
	 */
	public UserType getSeller() {
	    return this.seller;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains information about the seller whose order line items are being returned.
     * See the reference guide for information about the <b>Seller</b> object fields
     * that are returned.
     * 
     *
     * @param ebay.apis.eblbasecomponents.UserType
	 */
	public void setSeller(UserType seller) {
	    this.seller = seller;
	}
	/**
     * public getter
     *
     * 
     * List of <b>Transaction</b> objects representing the seller's recent sales.
     * Each <b>Transaction</b> object contains the data for one purchase
     * (of one or more items in the same listing).
     * See the reference guide for more information about the fields that are returned
     * for each order line item.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.TransactionArrayType
	 */
	public TransactionArrayType getTransactionArray() {
	    return this.transactionArray;
	}
	
	/**
	 * public setter
	 *
     * 
     * List of <b>Transaction</b> objects representing the seller's recent sales.
     * Each <b>Transaction</b> object contains the data for one purchase
     * (of one or more items in the same listing).
     * See the reference guide for more information about the fields that are returned
     * for each order line item.
     * 
     *
     * @param ebay.apis.eblbasecomponents.TransactionArrayType
	 */
	public void setTransactionArray(TransactionArrayType transactionArray) {
	    this.transactionArray = transactionArray;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the seller has the preference enabled that shows that the seller
     * prefers PayPal as the method of payment for an item. This preference is indicated on
     * an item's View Item page and is intended to influence a buyer to use PayPal
     * to pay for the item.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getPayPalPreferred() {
	    return this.payPalPreferred;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the seller has the preference enabled that shows that the seller
     * prefers PayPal as the method of payment for an item. This preference is indicated on
     * an item's View Item page and is intended to influence a buyer to use PayPal
     * to pay for the item.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setPayPalPreferred(Boolean payPalPreferred) {
	    this.payPalPreferred = payPalPreferred;
	}

}