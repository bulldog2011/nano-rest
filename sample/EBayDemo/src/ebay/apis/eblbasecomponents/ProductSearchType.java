// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * This type is deprecated as <b>GetProduct*</b> calls were deprecated.
 * 
 * 
 */
public class ProductSearchType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "ProductSearchID")
	private String productSearchID;
	
	@Element(name = "AttributeSetID")
	private int attributeSetID;
	
	@Element(name = "ProductFinderID")
	private Integer productFinderID;
	
	@Element(name = "ProductID")
	private String productID;
	
	@Element(name = "SortAttributeID")
	private Integer sortAttributeID;
	
	@Element(name = "MaxChildrenPerFamily")
	private Integer maxChildrenPerFamily;
	
	@Element(name = "SearchAttributes")
	private List<SearchAttributesType> searchAttributes;
	
	@Element(name = "Pagination")
	private PaginationType pagination;
	
	@Element(name = "AvailableItemsOnly")
	private Boolean availableItemsOnly;
	
	@Element(name = "QueryKeywords")
	private String queryKeywords;
	
	@Element(name = "CharacteristicSetIDs")
	private CharacteristicSetIDsType characteristicSetIDs;
	
	@Element(name = "ProductReferenceID")
	private String productReferenceID;
	
	@Element(name = "ExternalProductID")
	private ExternalProductIDType externalProductID;
	
    
	/**
     * public getter
     *
     * 
     * 
     * Unique alphanumeric key help you distinguish between query results in the response.
     * You define the key. Each search request ID must be unique within the same call.
     * Primarily useful when conducting multiple searches in the same call.
     * If not specified, the ProductSearchResult.ID values in the response are
     * indexed starting from 0 (zero).
     * 
     *
     * @returns java.lang.String
	 */
	public String getProductSearchID() {
	    return this.productSearchID;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * Unique alphanumeric key help you distinguish between query results in the response.
     * You define the key. Each search request ID must be unique within the same call.
     * Primarily useful when conducting multiple searches in the same call.
     * If not specified, the ProductSearchResult.ID values in the response are
     * indexed starting from 0 (zero).
     * 
     *
     * @param java.lang.String
	 */
	public void setProductSearchID(String productSearchID) {
	    this.productSearchID = productSearchID;
	}
	/**
     * public getter
     *
     * 
     * 
     * <b>For GetProductFinder and GetProductSearchResults
     * only:</b> Identifier for a characteristic set
     * (an attribute set) that is mapped to
     * a catalog-enabled category (unique across all eBay sites).
     * Required when you use SearchAttributes
     * (for searches based on product search page and product finder data).
     * Returns an error with QueryKeywords (use CharacteristicSetIDs instead).
     * Use GetProductSearchPage or GetProductFinder to determine valid IDs for the
     * type of search you are performing.
     * 
     *
     * @returns .int
	 */
	public int getAttributeSetID() {
	    return this.attributeSetID;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * <b>For GetProductFinder and GetProductSearchResults
     * only:</b> Identifier for a characteristic set
     * (an attribute set) that is mapped to
     * a catalog-enabled category (unique across all eBay sites).
     * Required when you use SearchAttributes
     * (for searches based on product search page and product finder data).
     * Returns an error with QueryKeywords (use CharacteristicSetIDs instead).
     * Use GetProductSearchPage or GetProductFinder to determine valid IDs for the
     * type of search you are performing.
     * 
     *
     * @param .int
	 */
	public void setAttributeSetID(int attributeSetID) {
	    this.attributeSetID = attributeSetID;
	}
	/**
     * public getter
     *
     * 
     * 
     * Required when you are performing a sell-side product finder search.
     * (Not applicable to product search page searches.)
     * Numeric identifier for a sell-side product finder that was used to retrieve
     * the search attributes being used in the request. The product finder must be
     * mapped to a catalog-enabled category (i.e., it cannot be a buy-side product finder ID)
     * associated with the characteristics set.
     * Use a product finder when you want to specify multiple attributes in a
     * product search query. Call GetCategory2CS to determine which categories
     * support sell-side product finder searches.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getProductFinderID() {
	    return this.productFinderID;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * Required when you are performing a sell-side product finder search.
     * (Not applicable to product search page searches.)
     * Numeric identifier for a sell-side product finder that was used to retrieve
     * the search attributes being used in the request. The product finder must be
     * mapped to a catalog-enabled category (i.e., it cannot be a buy-side product finder ID)
     * associated with the characteristics set.
     * Use a product finder when you want to specify multiple attributes in a
     * product search query. Call GetCategory2CS to determine which categories
     * support sell-side product finder searches.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setProductFinderID(Integer productFinderID) {
	    this.productFinderID = productFinderID;
	}
	/**
     * public getter
     *
     * 
     * 
     * Identifier for a representative stock product in a product family.
     * Used as input in GetProductFamilyMembers requests to identify a product family.
     * Use GetProductSearchResults to determine the available IDs.
     * 
     *
     * @returns java.lang.String
	 */
	public String getProductID() {
	    return this.productID;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * Identifier for a representative stock product in a product family.
     * Used as input in GetProductFamilyMembers requests to identify a product family.
     * Use GetProductSearchResults to determine the available IDs.
     * 
     *
     * @param java.lang.String
	 */
	public void setProductID(String productID) {
	    this.productID = productID;
	}
	/**
     * public getter
     *
     * 
     * 
     * Unique identifier for a sortable attribute. Use GetProductSearchPage
     * or GetProductFinder to determine the valid sort attribute IDs for the
     * specified characteristic set (including the default sort attribute that will be
     * used if you do not specify this field).
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getSortAttributeID() {
	    return this.sortAttributeID;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * Unique identifier for a sortable attribute. Use GetProductSearchPage
     * or GetProductFinder to determine the valid sort attribute IDs for the
     * specified characteristic set (including the default sort attribute that will be
     * used if you do not specify this field).
     * 
     *
     * @param java.lang.Integer
	 */
	public void setSortAttributeID(Integer sortAttributeID) {
	    this.sortAttributeID = sortAttributeID;
	}
	/**
     * public getter
     *
     * 
     * 
     * Pagination instruction that specifies the maximum quantity of products to return for
     * each product family within the search response whose ID matches the current request's
     * ID. In the response, if the last family returned contains MaxChildrenPerFamily or fewer
     * additional products, those additional products are also returned (i.e., the actual
     * quantity returned for the last family can exceed the specified maximum value). See
     * "Limit the Quantity of Products Returned Per Family" in the eBay Web Services Guide.
     * The value should not include punctuation (i.e., a thousands separator is not valid).
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getMaxChildrenPerFamily() {
	    return this.maxChildrenPerFamily;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * Pagination instruction that specifies the maximum quantity of products to return for
     * each product family within the search response whose ID matches the current request's
     * ID. In the response, if the last family returned contains MaxChildrenPerFamily or fewer
     * additional products, those additional products are also returned (i.e., the actual
     * quantity returned for the last family can exceed the specified maximum value). See
     * "Limit the Quantity of Products Returned Per Family" in the eBay Web Services Guide.
     * The value should not include punctuation (i.e., a thousands separator is not valid).
     * 
     *
     * @param java.lang.Integer
	 */
	public void setMaxChildrenPerFamily(Integer maxChildrenPerFamily) {
	    this.maxChildrenPerFamily = maxChildrenPerFamily;
	}
	/**
     * public getter
     *
     * 
     * 
     * A predefined attribute against which to search (e.g., Author). Use this to create a
     * query based on a set of Item Specifics from the catalog. Both the product title and
     * product Item Specifics are searched. If the query includes multiple SearchAttributes
     * fields (one for each attribute), the search engine will apply "AND" logic to the query.
     * Call GetProductSearchPage or GetProductFinder to determine the list of valid attributes
     * and how many are permitted for the specified characteristic set. See the eBay Web
     * Services guide for details. For each ProductSearch, either SearchAttributes or
     * QueryKeywords is required (but do not pass both).
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.SearchAttributesType>
	 */
	public List<SearchAttributesType> getSearchAttributes() {
	    return this.searchAttributes;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * A predefined attribute against which to search (e.g., Author). Use this to create a
     * query based on a set of Item Specifics from the catalog. Both the product title and
     * product Item Specifics are searched. If the query includes multiple SearchAttributes
     * fields (one for each attribute), the search engine will apply "AND" logic to the query.
     * Call GetProductSearchPage or GetProductFinder to determine the list of valid attributes
     * and how many are permitted for the specified characteristic set. See the eBay Web
     * Services guide for details. For each ProductSearch, either SearchAttributes or
     * QueryKeywords is required (but do not pass both).
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.SearchAttributesType>
	 */
	public void setSearchAttributes(List<SearchAttributesType> searchAttributes) {
	    this.searchAttributes = searchAttributes;
	}
	/**
     * public getter
     *
     * 
     * 
     * Pagination instruction that specifies the virtual page of data to return
     * per search request.
     * When you use ExternalProductID or ProductReferenceID, only one page of
     * data is typically returned.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PaginationType
	 */
	public PaginationType getPagination() {
	    return this.pagination;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * Pagination instruction that specifies the virtual page of data to return
     * per search request.
     * When you use ExternalProductID or ProductReferenceID, only one page of
     * data is typically returned.
     * 
     *
     * @param ebay.apis.eblbasecomponents.PaginationType
	 */
	public void setPagination(PaginationType pagination) {
	    this.pagination = pagination;
	}
	/**
     * public getter
     *
     * 
     * 
     * If true, only retrieve products that have been used to pre-fill
     * active listings on the specified eBay site.
     * If false, retrieve all products that match the query.<br>
     * <br>
     * <b>For GetProductSearchResults:</b> Ths can be useful when
     * you want to find products that other sellers have recently used to
     * pre-fill similar listings.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getAvailableItemsOnly() {
	    return this.availableItemsOnly;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * If true, only retrieve products that have been used to pre-fill
     * active listings on the specified eBay site.
     * If false, retrieve all products that match the query.<br>
     * <br>
     * <b>For GetProductSearchResults:</b> Ths can be useful when
     * you want to find products that other sellers have recently used to
     * pre-fill similar listings.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setAvailableItemsOnly(Boolean availableItemsOnly) {
	    this.availableItemsOnly = availableItemsOnly;
	}
	/**
     * public getter
     *
     * 
     * 
     * One or more keywords to search for. The words "and" and "or" are treated like any other
     * word. Only use "and", "or", or "the" if you are searching for products containing these
     * words. To use AND or OR logic, use eBay's standard search string modifiers. Wildcards
     * (+, -, or *) are also supported. Be careful when using spaces before or after modifiers
     * and wildcards.
     * <br><br>
     * <b>For GetProductSearchResults:</b>
     * eBay searches only in the characteristic set specified in CharacteristicSetIDs. Both
     * the product title and Item Specifics are searched. For each ProductSearch, either
     * SearchAttributes or QueryKeywords is required (but do not pass both). Blank searches
     * are not applicable (and result in a warning). If your search is using a Keyword
     * attribute returned by GetProductSearchPage, use SearchAttributes instead.
     * 
     *
     * @returns java.lang.String
	 */
	public String getQueryKeywords() {
	    return this.queryKeywords;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * One or more keywords to search for. The words "and" and "or" are treated like any other
     * word. Only use "and", "or", or "the" if you are searching for products containing these
     * words. To use AND or OR logic, use eBay's standard search string modifiers. Wildcards
     * (+, -, or *) are also supported. Be careful when using spaces before or after modifiers
     * and wildcards.
     * <br><br>
     * <b>For GetProductSearchResults:</b>
     * eBay searches only in the characteristic set specified in CharacteristicSetIDs. Both
     * the product title and Item Specifics are searched. For each ProductSearch, either
     * SearchAttributes or QueryKeywords is required (but do not pass both). Blank searches
     * are not applicable (and result in a warning). If your search is using a Keyword
     * attribute returned by GetProductSearchPage, use SearchAttributes instead.
     * 
     *
     * @param java.lang.String
	 */
	public void setQueryKeywords(String queryKeywords) {
	    this.queryKeywords = queryKeywords;
	}
	/**
     * public getter
     *
     * 
     * 
     * List of one or more IDs that indicate which domain
     * (characteristic set) to search in. <br>
     * <br>
     * <b>For GetProductSearchResults:</b> Required and
     * only applicable when QueryKeywords is specified. Ignored when SearchAttributes is specified.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.CharacteristicSetIDsType
	 */
	public CharacteristicSetIDsType getCharacteristicSetIDs() {
	    return this.characteristicSetIDs;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * List of one or more IDs that indicate which domain
     * (characteristic set) to search in. <br>
     * <br>
     * <b>For GetProductSearchResults:</b> Required and
     * only applicable when QueryKeywords is specified. Ignored when SearchAttributes is specified.
     * 
     *
     * @param ebay.apis.eblbasecomponents.CharacteristicSetIDsType
	 */
	public void setCharacteristicSetIDs(CharacteristicSetIDsType characteristicSetIDs) {
	    this.characteristicSetIDs = characteristicSetIDs;
	}
	/**
     * public getter
     *
     * 
     * 
     * The global reference ID for an eBay catalog product. Use this query to retrieve basic
     * details about one catalog product. The results can optionally include items, reviews,
     * and/or buying guides that match that product. (Specifically, the items returned are
     * items that sellers listed with the specified product's stock information.)
     * <br><br>
     * <span class="tablenote"><b>Note:</b>
     * This value is not the same as the ProductID used in AddItem and related calls. A
     * ProductID represents a particular version of a catalog product. (A given version
     * could have an older or newer description, set of Item Specifics, or other details.) A
     * ProductReferenceID is a more generic or global reference to a product (regardless of
     * version), which is useful for buy-side searching. One product reference ID can be
     * associated with multiple product IDs.
     * </span>
     * <br><br>
     * Some sites (such as eBay US, Germany, Austria, and Switzerland) are updating,
     * replacing, deleting, or merging some products (as a result of migrating from one
     * catalog data provider to another). If you specify one of these products, the call may
     * return a warning, or it may return an error if the product has been deleted.
     * <br><br>
     * The request requires either QueryKeywords, ProductReferenceID,
     * or ExternalProductID, but these fields cannot be used together.
     * 
     *
     * @returns java.lang.String
	 */
	public String getProductReferenceID() {
	    return this.productReferenceID;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * The global reference ID for an eBay catalog product. Use this query to retrieve basic
     * details about one catalog product. The results can optionally include items, reviews,
     * and/or buying guides that match that product. (Specifically, the items returned are
     * items that sellers listed with the specified product's stock information.)
     * <br><br>
     * <span class="tablenote"><b>Note:</b>
     * This value is not the same as the ProductID used in AddItem and related calls. A
     * ProductID represents a particular version of a catalog product. (A given version
     * could have an older or newer description, set of Item Specifics, or other details.) A
     * ProductReferenceID is a more generic or global reference to a product (regardless of
     * version), which is useful for buy-side searching. One product reference ID can be
     * associated with multiple product IDs.
     * </span>
     * <br><br>
     * Some sites (such as eBay US, Germany, Austria, and Switzerland) are updating,
     * replacing, deleting, or merging some products (as a result of migrating from one
     * catalog data provider to another). If you specify one of these products, the call may
     * return a warning, or it may return an error if the product has been deleted.
     * <br><br>
     * The request requires either QueryKeywords, ProductReferenceID,
     * or ExternalProductID, but these fields cannot be used together.
     * 
     *
     * @param java.lang.String
	 */
	public void setProductReferenceID(String productReferenceID) {
	    this.productReferenceID = productReferenceID;
	}
	/**
     * public getter
     *
     * 
     * 
     * A query that only retrieves items that were listed with stock products
     * that have ISBN or UPC values (such as books, DVDs, CDs, and video game
     * products).
     * Use this query to retrieve basic details about one catalog product
     * (or a very limited number of products). The results can optionally
     * include items, reviews, and/or buying guides that match that product.
     * (Specifically, the items returned are items that sellers listed with the
     * specified product's stock information.)<br>
     * <br>
     * If you have gotten the ISBN or UPC from another Web site or resource,
     * you can use that ID. Any matching products that
     * include ISBN or UPC values will return those values in
     * Product.ExternalProductID.<br>
     * <br>
     * The request requires either QueryKeywords, ProductReferenceID,
     * or ExternalProductID, but these fields cannot be used together.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ExternalProductIDType
	 */
	public ExternalProductIDType getExternalProductID() {
	    return this.externalProductID;
	}
	
	/**
	 * public setter
	 *
     * 
     * 
     * A query that only retrieves items that were listed with stock products
     * that have ISBN or UPC values (such as books, DVDs, CDs, and video game
     * products).
     * Use this query to retrieve basic details about one catalog product
     * (or a very limited number of products). The results can optionally
     * include items, reviews, and/or buying guides that match that product.
     * (Specifically, the items returned are items that sellers listed with the
     * specified product's stock information.)<br>
     * <br>
     * If you have gotten the ISBN or UPC from another Web site or resource,
     * you can use that ID. Any matching products that
     * include ISBN or UPC values will return those values in
     * Product.ExternalProductID.<br>
     * <br>
     * The request requires either QueryKeywords, ProductReferenceID,
     * or ExternalProductID, but these fields cannot be used together.
     * 
     *
     * @param ebay.apis.eblbasecomponents.ExternalProductIDType
	 */
	public void setExternalProductID(ExternalProductIDType externalProductID) {
	    this.externalProductID = externalProductID;
	}

}