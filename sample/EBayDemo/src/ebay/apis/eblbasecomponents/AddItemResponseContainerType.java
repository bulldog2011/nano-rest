// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.util.Date;

/**
 * 
 * This container has all of the resulting information from an AddItems call. There will be one
 * container per container specified in the request.
 * 
 */
public class AddItemResponseContainerType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "ItemID")
	private String itemID;
	
	@Element(name = "StartTime")
	private Date startTime;
	
	@Element(name = "EndTime")
	private Date endTime;
	
	@Element(name = "Fees")
	private FeesType fees;
	
	@Element(name = "CategoryID")
	private String categoryID;
	
	@Element(name = "Category2ID")
	private String category2ID;
	
	@Element(name = "CorrelationID")
	private String correlationID;
	
	@Element(name = "Errors")
	private List<ErrorType> errors;
	
	@Element(name = "Message")
	private String message;
	
	@Element(name = "DiscountReason")
	private List<DiscountReasonCodeType> discountReason;
	
    
	/**
     * public getter
     *
     * 
     * Unique item ID for the new listing.
     * Also applicable to Half.com.
     * <br><br>
     * <span class="tablenote"><b>Note:</b> Although we
     * represent item IDs as strings in the schema, we recommend you store them
     * as 64-bit signed integers. If you choose to store item IDs as strings,
     * allocate at least 19 characters (assuming decimal digits are used) to hold
     * them. eBay will increase the size of IDs over time. Your code should be
     * prepared to handle IDs of up to 19 digits. For more information about item
     * IDs, see <a
     * href="http://ebay.custhelp.com/cgi-bin/ebay.cfg/php/enduser/std_adp.php?p_faqid=468">Common
     * FAQs on eBay Item IDs and other eBay IDs</a> in the Knowledge
     * Base.</span>
     * 
     *
     * @returns java.lang.String
	 */
	public String getItemID() {
	    return this.itemID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Unique item ID for the new listing.
     * Also applicable to Half.com.
     * <br><br>
     * <span class="tablenote"><b>Note:</b> Although we
     * represent item IDs as strings in the schema, we recommend you store them
     * as 64-bit signed integers. If you choose to store item IDs as strings,
     * allocate at least 19 characters (assuming decimal digits are used) to hold
     * them. eBay will increase the size of IDs over time. Your code should be
     * prepared to handle IDs of up to 19 digits. For more information about item
     * IDs, see <a
     * href="http://ebay.custhelp.com/cgi-bin/ebay.cfg/php/enduser/std_adp.php?p_faqid=468">Common
     * FAQs on eBay Item IDs and other eBay IDs</a> in the Knowledge
     * Base.</span>
     * 
     *
     * @param java.lang.String
	 */
	public void setItemID(String itemID) {
	    this.itemID = itemID;
	}
	/**
     * public getter
     *
     * 
     * Starting date and time for the new listing.
     * Also returned for Half.com (for Half.com, the start time is always the time the item was listed).
     * 
     *
     * @returns java.util.Date
	 */
	public Date getStartTime() {
	    return this.startTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * Starting date and time for the new listing.
     * Also returned for Half.com (for Half.com, the start time is always the time the item was listed).
     * 
     *
     * @param java.util.Date
	 */
	public void setStartTime(Date startTime) {
	    this.startTime = startTime;
	}
	/**
     * public getter
     *
     * 
     * Date and time when the new listing ends. This is the starting time
     * plus the listing duration.
     * Also returned for Half.com, but for Half.com the actual end time is GTC
     * (not the end time returned in the response).
     * 
     *
     * @returns java.util.Date
	 */
	public Date getEndTime() {
	    return this.endTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * Date and time when the new listing ends. This is the starting time
     * plus the listing duration.
     * Also returned for Half.com, but for Half.com the actual end time is GTC
     * (not the end time returned in the response).
     * 
     *
     * @param java.util.Date
	 */
	public void setEndTime(Date endTime) {
	    this.endTime = endTime;
	}
	/**
     * public getter
     *
     * 
     * Child elements contain the estimated listing fees for the new item listing.
     * The fees do not include the Final Value Fee (FVF), which cannot be determined
     * until an item is sold.
     * Also returned for Half.com, but the values are not applicable to Half.com listings.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.FeesType
	 */
	public FeesType getFees() {
	    return this.fees;
	}
	
	/**
	 * public setter
	 *
     * 
     * Child elements contain the estimated listing fees for the new item listing.
     * The fees do not include the Final Value Fee (FVF), which cannot be determined
     * until an item is sold.
     * Also returned for Half.com, but the values are not applicable to Half.com listings.
     * 
     *
     * @param ebay.apis.eblbasecomponents.FeesType
	 */
	public void setFees(FeesType fees) {
	    this.fees = fees;
	}
	/**
     * public getter
     *
     * 
     * ID of the primary category in which the item was listed.
     * Only returned if you set Item.CategoryMappingAllowed to true in the request
     * and the ID you passed in PrimaryCategory was mapped to a new ID by eBay.
     * If the primary category has not changed or it has expired with no replacement,
     * CategoryID does not return a value.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCategoryID() {
	    return this.categoryID;
	}
	
	/**
	 * public setter
	 *
     * 
     * ID of the primary category in which the item was listed.
     * Only returned if you set Item.CategoryMappingAllowed to true in the request
     * and the ID you passed in PrimaryCategory was mapped to a new ID by eBay.
     * If the primary category has not changed or it has expired with no replacement,
     * CategoryID does not return a value.
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.String
	 */
	public void setCategoryID(String categoryID) {
	    this.categoryID = categoryID;
	}
	/**
     * public getter
     *
     * 
     * ID of the secondary category in which the item was listed.
     * Only returned if you set Item.CategoryMappingAllowed to true in the request
     * and the ID you passed in SecondaryCategory was mapped to a new ID by eBay.
     * If the secondary category has not changed or it has expired with no replacement,
     * Category2ID does not return a value.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCategory2ID() {
	    return this.category2ID;
	}
	
	/**
	 * public setter
	 *
     * 
     * ID of the secondary category in which the item was listed.
     * Only returned if you set Item.CategoryMappingAllowed to true in the request
     * and the ID you passed in SecondaryCategory was mapped to a new ID by eBay.
     * If the secondary category has not changed or it has expired with no replacement,
     * Category2ID does not return a value.
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.String
	 */
	public void setCategory2ID(String category2ID) {
	    this.category2ID = category2ID;
	}
	/**
     * public getter
     *
     * 
     * Most Trading API calls support a <b>MessageID</b> element in the request
     * and a <b>CorrelationID</b> element in the response. With 
     * <b>AddItems</b>, a unique <b>MessageID</b> value is required for 
     * each <b>AddItemRequestContainer<b> container that is used in the request. The 
     * <b>CorrelationID</b> value returned under each 
     * <b>AddItemResponseContainer</b> container is used to correlate each 
     * item request container with its corresponding response container. The same <b>MessageID</b> value that you pass into a request will 
     * be returned in the <b>CorrelationID</b> field in the response.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCorrelationID() {
	    return this.correlationID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Most Trading API calls support a <b>MessageID</b> element in the request
     * and a <b>CorrelationID</b> element in the response. With 
     * <b>AddItems</b>, a unique <b>MessageID</b> value is required for 
     * each <b>AddItemRequestContainer<b> container that is used in the request. The 
     * <b>CorrelationID</b> value returned under each 
     * <b>AddItemResponseContainer</b> container is used to correlate each 
     * item request container with its corresponding response container. The same <b>MessageID</b> value that you pass into a request will 
     * be returned in the <b>CorrelationID</b> field in the response.
     * 
     *
     * @param java.lang.String
	 */
	public void setCorrelationID(String correlationID) {
	    this.correlationID = correlationID;
	}
	/**
     * public getter
     *
     * 
     * A list of application-level errors or warnings (if any) that were raised
     * when eBay processed the request. <br>
     * <br>
     * Application-level errors occur due to
     * problems with business-level data on the client side or on the eBay
     * server side. For example, an error would occur if the request contains
     * an invalid combination of fields, or it is missing a required field,
     * or the value of the field is not recognized. An error could also occur
     * if eBay encountered a problem in our internal business logic while
     * processing the request.<br>
     * <br>
     * Only returned if there were warnings or errors.
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.ErrorType>
	 */
	public List<ErrorType> getErrors() {
	    return this.errors;
	}
	
	/**
	 * public setter
	 *
     * 
     * A list of application-level errors or warnings (if any) that were raised
     * when eBay processed the request. <br>
     * <br>
     * Application-level errors occur due to
     * problems with business-level data on the client side or on the eBay
     * server side. For example, an error would occur if the request contains
     * an invalid combination of fields, or it is missing a required field,
     * or the value of the field is not recognized. An error could also occur
     * if eBay encountered a problem in our internal business logic while
     * processing the request.<br>
     * <br>
     * Only returned if there were warnings or errors.
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.ErrorType>
	 */
	public void setErrors(List<ErrorType> errors) {
	    this.errors = errors;
	}
	/**
     * public getter
     *
     * 
     * Supplemental information from eBay, if applicable. May elaborate on errors or
     * provide useful hints for the seller. This data can accompany the call's normal
     * data result set or a result set that contains only errors. The string can
     * return HTML, including TABLE, IMG, and HREF elements. In this case, an HTML-
     * based application should be able to include the HTML as-is in the HTML page
     * that displays the results. A non-HTML application would need to parse the HTML
     * and convert the table elements and image references into UI elements
     * particular to the programming language used. Because this data is returned as
     * a string, the HTML markup elements are escaped with character entity
     * references (e.g.,&lt;table&gt;&lt;tr&gt;...). See the
     * appendices in the eBay Web Services guide for general information about string
     * data types.
     * 
     *
     * @returns java.lang.String
	 */
	public String getMessage() {
	    return this.message;
	}
	
	/**
	 * public setter
	 *
     * 
     * Supplemental information from eBay, if applicable. May elaborate on errors or
     * provide useful hints for the seller. This data can accompany the call's normal
     * data result set or a result set that contains only errors. The string can
     * return HTML, including TABLE, IMG, and HREF elements. In this case, an HTML-
     * based application should be able to include the HTML as-is in the HTML page
     * that displays the results. A non-HTML application would need to parse the HTML
     * and convert the table elements and image references into UI elements
     * particular to the programming language used. Because this data is returned as
     * a string, the HTML markup elements are escaped with character entity
     * references (e.g.,&lt;table&gt;&lt;tr&gt;...). See the
     * appendices in the eBay Web Services guide for general information about string
     * data types.
     * 
     *
     * @param java.lang.String
	 */
	public void setMessage(String message) {
	    this.message = message;
	}
	/**
     * public getter
     *
     * 
     * The nature of the discount, if a discount applied.
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.DiscountReasonCodeType>
	 */
	public List<DiscountReasonCodeType> getDiscountReason() {
	    return this.discountReason;
	}
	
	/**
	 * public setter
	 *
     * 
     * The nature of the discount, if a discount applied.
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.DiscountReasonCodeType>
	 */
	public void setDiscountReason(List<DiscountReasonCodeType> discountReason) {
	    this.discountReason = discountReason;
	}

}