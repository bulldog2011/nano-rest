// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * Enables the seller of a Best Offer item to accept, decline, or counter offers
 * made by bidders. Best offers can be declined in bulk, using the same message
 * from the seller to the bidders of all rejected offers.
 * 
 */
@RootElement(name = "RespondToBestOfferRequest", namespace = "urn:ebay:apis:eBLBaseComponents")
public class RespondToBestOfferRequestType extends AbstractRequestType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "ItemID")
	private String itemID;
	
	@Element(name = "BestOfferID")
	private List<String> bestOfferID;
	
	@Element(name = "Action")
	private BestOfferActionCodeType action;
	
	@Element(name = "SellerResponse")
	private String sellerResponse;
	
	@Element(name = "CounterOfferPrice")
	private AmountType counterOfferPrice;
	
	@Element(name = "CounterOfferQuantity")
	private Integer counterOfferQuantity;
	
    
	/**
     * public getter
     *
     * 
     * Specifies the item for which the BestOffer data is to be returned.
     * 
     *
     * @returns java.lang.String
	 */
	public String getItemID() {
	    return this.itemID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the item for which the BestOffer data is to be returned.
     * 
     *
     * @param java.lang.String
	 */
	public void setItemID(String itemID) {
	    this.itemID = itemID;
	}
	/**
     * public getter
     *
     * 
     * The ID of a Best Offer for the item.
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getBestOfferID() {
	    return this.bestOfferID;
	}
	
	/**
	 * public setter
	 *
     * 
     * The ID of a Best Offer for the item.
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setBestOfferID(List<String> bestOfferID) {
	    this.bestOfferID = bestOfferID;
	}
	/**
     * public getter
     *
     * 
     * The action taken on the Best Offer by the seller (e.g.,
     * Accept, Decline, or Counter). Bulk Accept and Bulk
     * Counter are not supported. That is, you cannot accept or
     * counter multiple offers in a single call. You can,
     * however, decline multiple offers in a single call.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.BestOfferActionCodeType
	 */
	public BestOfferActionCodeType getAction() {
	    return this.action;
	}
	
	/**
	 * public setter
	 *
     * 
     * The action taken on the Best Offer by the seller (e.g.,
     * Accept, Decline, or Counter). Bulk Accept and Bulk
     * Counter are not supported. That is, you cannot accept or
     * counter multiple offers in a single call. You can,
     * however, decline multiple offers in a single call.
     * 
     *
     * @param ebay.apis.eblbasecomponents.BestOfferActionCodeType
	 */
	public void setAction(BestOfferActionCodeType action) {
	    this.action = action;
	}
	/**
     * public getter
     *
     * 
     * A comment from the seller to the buyer.
     * 
     *
     * @returns java.lang.String
	 */
	public String getSellerResponse() {
	    return this.sellerResponse;
	}
	
	/**
	 * public setter
	 *
     * 
     * A comment from the seller to the buyer.
     * 
     *
     * @param java.lang.String
	 */
	public void setSellerResponse(String sellerResponse) {
	    this.sellerResponse = sellerResponse;
	}
	/**
     * public getter
     *
     * 
     * The counter offer price. When Action is set to Counter,
     * you must specify the amount for the counter offer with
     * CounterOfferPrice. The value of CounterOfferPrice cannot
     * exceed the Buy It Now price for a single quantity item.
     * The value of CounterOfferPrice may exceed the Buy It Now
     * price if the value for CounterOfferQuantity is greater
     * than 1.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getCounterOfferPrice() {
	    return this.counterOfferPrice;
	}
	
	/**
	 * public setter
	 *
     * 
     * The counter offer price. When Action is set to Counter,
     * you must specify the amount for the counter offer with
     * CounterOfferPrice. The value of CounterOfferPrice cannot
     * exceed the Buy It Now price for a single quantity item.
     * The value of CounterOfferPrice may exceed the Buy It Now
     * price if the value for CounterOfferQuantity is greater
     * than 1.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setCounterOfferPrice(AmountType counterOfferPrice) {
	    this.counterOfferPrice = counterOfferPrice;
	}
	/**
     * public getter
     *
     * 
     * The quantity of items in the counter offer. When Action is set to
     * Counter you must specify the quantity of items for the
     * counter offer with CounterOfferQuantity.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getCounterOfferQuantity() {
	    return this.counterOfferQuantity;
	}
	
	/**
	 * public setter
	 *
     * 
     * The quantity of items in the counter offer. When Action is set to
     * Counter you must specify the quantity of items for the
     * counter offer with CounterOfferQuantity.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setCounterOfferQuantity(Integer counterOfferQuantity) {
	    this.counterOfferQuantity = counterOfferQuantity;
	}

}