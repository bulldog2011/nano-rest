// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

/**
 * 
 * Returns a seller's invoice data for their eBay account, including the account's
 * summary data.
 * 
 */
@RootElement(name = "GetAccountRequest", namespace = "urn:ebay:apis:eBLBaseComponents")
public class GetAccountRequestType extends AbstractRequestType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "AccountHistorySelection")
	private AccountHistorySelectionCodeType accountHistorySelection;
	
	@Element(name = "InvoiceDate")
	private Date invoiceDate;
	
	@Element(name = "BeginDate")
	private Date beginDate;
	
	@Element(name = "EndDate")
	private Date endDate;
	
	@Element(name = "Pagination")
	private PaginationType pagination;
	
	@Element(name = "ExcludeBalance")
	private Boolean excludeBalance;
	
	@Element(name = "ExcludeSummary")
	private Boolean excludeSummary;
	
	@Element(name = "IncludeConversionRate")
	private Boolean includeConversionRate;
	
	@Element(name = "AccountEntrySortType")
	private AccountEntrySortTypeCodeType accountEntrySortType;
	
	@Element(name = "Currency")
	private CurrencyCodeType currency;
	
	@Element(name = "ItemID")
	private String itemID;
	
    
	/**
     * public getter
     *
     * 
     * Specifies the report format in which to return account entries.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AccountHistorySelectionCodeType
	 */
	public AccountHistorySelectionCodeType getAccountHistorySelection() {
	    return this.accountHistorySelection;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the report format in which to return account entries.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AccountHistorySelectionCodeType
	 */
	public void setAccountHistorySelection(AccountHistorySelectionCodeType accountHistorySelection) {
	    this.accountHistorySelection = accountHistorySelection;
	}
	/**
     * public getter
     *
     * 
     * Specifies the month and year of the invoice requested. The report includes
     * only the entries that appear on the seller's invoice in the specified month
     * and year. An entry can occur in one month and appear on the next month's
     * invoice. Used with SpecifiedInvoice reports.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getInvoiceDate() {
	    return this.invoiceDate;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the month and year of the invoice requested. The report includes
     * only the entries that appear on the seller's invoice in the specified month
     * and year. An entry can occur in one month and appear on the next month's
     * invoice. Used with SpecifiedInvoice reports.
     * 
     *
     * @param java.util.Date
	 */
	public void setInvoiceDate(Date invoiceDate) {
	    this.invoiceDate = invoiceDate;
	}
	/**
     * public getter
     *
     * 
     * Specifies the beginning of a date range during which a credit or debit
     * occurred. Used when AccountHistorySelection is BetweenSpecifiedDates. Value
     * must be less than or equal to the value specified in EndDate. The allowed
     * date formats are YYYY-MM-DD and YYYY-MM-DD HH:mm:ss. You can retrieve
     * information that is up to 4 months old.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getBeginDate() {
	    return this.beginDate;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the beginning of a date range during which a credit or debit
     * occurred. Used when AccountHistorySelection is BetweenSpecifiedDates. Value
     * must be less than or equal to the value specified in EndDate. The allowed
     * date formats are YYYY-MM-DD and YYYY-MM-DD HH:mm:ss. You can retrieve
     * information that is up to 4 months old.
     * 
     *
     * @param java.util.Date
	 */
	public void setBeginDate(Date beginDate) {
	    this.beginDate = beginDate;
	}
	/**
     * public getter
     *
     * 
     * Specifies the end of a date range during which a credit or debit occurred.
     * Used when AccountHistorySelection is BetweenSpecifiedDates. Value must be
     * greater than or equal to the value specified in BeginDate. The allowed date
     * formats are YYYY-MM-DD and YYYY-MM-DD HH:mm:ss.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getEndDate() {
	    return this.endDate;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the end of a date range during which a credit or debit occurred.
     * Used when AccountHistorySelection is BetweenSpecifiedDates. Value must be
     * greater than or equal to the value specified in BeginDate. The allowed date
     * formats are YYYY-MM-DD and YYYY-MM-DD HH:mm:ss.
     * 
     *
     * @param java.util.Date
	 */
	public void setEndDate(Date endDate) {
	    this.endDate = endDate;
	}
	/**
     * public getter
     *
     * 
     * Controls pagination of the response. For this request, the valid values of
     * Pagination.EntriesPerPage are 0 to 2000, with a default of 500.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PaginationType
	 */
	public PaginationType getPagination() {
	    return this.pagination;
	}
	
	/**
	 * public setter
	 *
     * 
     * Controls pagination of the response. For this request, the valid values of
     * Pagination.EntriesPerPage are 0 to 2000, with a default of 500.
     * 
     *
     * @param ebay.apis.eblbasecomponents.PaginationType
	 */
	public void setPagination(PaginationType pagination) {
	    this.pagination = pagination;
	}
	/**
     * public getter
     *
     * 
     * Specifies whether to calculate balances. Default is false, which calculates
     * balances. The value true means do not calculate balances. If true,
     * AccountEntry.Balance and AccountSummary.CurrentBalance are never returned
     * in the response.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getExcludeBalance() {
	    return this.excludeBalance;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies whether to calculate balances. Default is false, which calculates
     * balances. The value true means do not calculate balances. If true,
     * AccountEntry.Balance and AccountSummary.CurrentBalance are never returned
     * in the response.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setExcludeBalance(Boolean excludeBalance) {
	    this.excludeBalance = excludeBalance;
	}
	/**
     * public getter
     *
     * 
     * Specifies whether to return account summary information in an
     * AccountSummary node. Default is true, to return AccountSummary.
     *   
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getExcludeSummary() {
	    return this.excludeSummary;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies whether to return account summary information in an
     * AccountSummary node. Default is true, to return AccountSummary.
     *   
     *
     * @param java.lang.Boolean
	 */
	public void setExcludeSummary(Boolean excludeSummary) {
	    this.excludeSummary = excludeSummary;
	}
	/**
     * public getter
     *
     * 
     * Specifies whether to retrieve the rate used for the currency conversion for usage transactions.
     *   
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getIncludeConversionRate() {
	    return this.includeConversionRate;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies whether to retrieve the rate used for the currency conversion for usage transactions.
     *   
     *
     * @param java.lang.Boolean
	 */
	public void setIncludeConversionRate(Boolean includeConversionRate) {
	    this.includeConversionRate = includeConversionRate;
	}
	/**
     * public getter
     *
     * 
     * Specifies how account entries should be sorted in the response, by an
     * element and then in ascending or descending order.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AccountEntrySortTypeCodeType
	 */
	public AccountEntrySortTypeCodeType getAccountEntrySortType() {
	    return this.accountEntrySortType;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies how account entries should be sorted in the response, by an
     * element and then in ascending or descending order.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AccountEntrySortTypeCodeType
	 */
	public void setAccountEntrySortType(AccountEntrySortTypeCodeType accountEntrySortType) {
	    this.accountEntrySortType = accountEntrySortType;
	}
	/**
     * public getter
     *
     * 
     * Specifies the currency used in the account report. Do not specify Currency
     * in the request unless the following conditions are met. First, the user has
     * or had multiple accounts under the same UserID. Second, the account
     * identified in the request uses the currency you specify in the request. An
     * error is returned if no account is found that uses the currency you specify
     * in the request.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.CurrencyCodeType
	 */
	public CurrencyCodeType getCurrency() {
	    return this.currency;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the currency used in the account report. Do not specify Currency
     * in the request unless the following conditions are met. First, the user has
     * or had multiple accounts under the same UserID. Second, the account
     * identified in the request uses the currency you specify in the request. An
     * error is returned if no account is found that uses the currency you specify
     * in the request.
     * 
     *
     * @param ebay.apis.eblbasecomponents.CurrencyCodeType
	 */
	public void setCurrency(CurrencyCodeType currency) {
	    this.currency = currency;
	}
	/**
     * public getter
     *
     * 
     * Specifies the item ID for which to return account entries. If ItemID is
     * used, all other filters in the request are ignored. If the specified item
     * does not exist or if the requesting user is not the seller of the item, an
     * error is returned.
     * 
     *
     * @returns java.lang.String
	 */
	public String getItemID() {
	    return this.itemID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the item ID for which to return account entries. If ItemID is
     * used, all other filters in the request are ignored. If the specified item
     * does not exist or if the requesting user is not the seller of the item, an
     * error is returned.
     * 
     *
     * @param java.lang.String
	 */
	public void setItemID(String itemID) {
	    this.itemID = itemID;
	}

}