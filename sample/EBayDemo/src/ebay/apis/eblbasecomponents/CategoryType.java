// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 *         Container for data on one listing category.
 * 
 */
public class CategoryType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "BestOfferEnabled")
	private Boolean bestOfferEnabled;
	
	@Element(name = "AutoPayEnabled")
	private Boolean autoPayEnabled;
	
	@Element(name = "B2BVATEnabled")
	private Boolean b2BVATEnabled;
	
	@Element(name = "CatalogEnabled")
	private Boolean catalogEnabled;
	
	@Element(name = "CategoryID")
	private String categoryID;
	
	@Element(name = "CategoryLevel")
	private Integer categoryLevel;
	
	@Element(name = "CategoryName")
	private String categoryName;
	
	@Element(name = "CategoryParentID")
	private List<String> categoryParentID;
	
	@Element(name = "CategoryParentName")
	private List<String> categoryParentName;
	
	@Element(name = "ProductSearchPageAvailable")
	private Boolean productSearchPageAvailable;
	
	@Element(name = "ProductFinderIDs")
	private List<ExtendedProductFinderIDType> productFinderIDs;
	
	@Element(name = "CharacteristicsSets")
	private List<CharacteristicsSetType> characteristicsSets;
	
	@Element(name = "Expired")
	private Boolean expired;
	
	@Element(name = "IntlAutosFixedCat")
	private Boolean intlAutosFixedCat;
	
	@Element(name = "LeafCategory")
	private Boolean leafCategory;
	
	@Element(name = "Virtual")
	private Boolean virtual;
	
	@Element(name = "NumOfItems")
	private Integer numOfItems;
	
	@Element(name = "SellerGuaranteeEligible")
	private Boolean sellerGuaranteeEligible;
	
	@Element(name = "ORPA")
	private Boolean orpa;
	
	@Element(name = "ORRA")
	private Boolean orra;
	
	@Element(name = "LSD")
	private Boolean lsd;
	
	@Element(name = "Keywords")
	private String keywords;
	
    
	/**
     * public getter
     *
     * 
     * If true, the category supports Best Offers.
     * If not present, the category does not support Best Offers.
     * Will not be returned if false.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getBestOfferEnabled() {
	    return this.bestOfferEnabled;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, the category supports Best Offers.
     * If not present, the category does not support Best Offers.
     * Will not be returned if false.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setBestOfferEnabled(Boolean bestOfferEnabled) {
	    this.bestOfferEnabled = bestOfferEnabled;
	}
	/**
     * public getter
     *
     * 
     * If true, indicates that the category supports immediate payment.
     * If not present, the category does not support
     * immediate payment. Will not be returned if false.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getAutoPayEnabled() {
	    return this.autoPayEnabled;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, indicates that the category supports immediate payment.
     * If not present, the category does not support
     * immediate payment. Will not be returned if false.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setAutoPayEnabled(Boolean autoPayEnabled) {
	    this.autoPayEnabled = autoPayEnabled;
	}
	/**
     * public getter
     *
     * 
     * If true, the category supports business-to-business (B2B) VAT
     * listings. Applicable to the eBay Germany (DE), Austria (AT),
     * and Switzerland CH) sites only. If not present,
     * the category does not support this feature. Will not be returned if false.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getB2BVATEnabled() {
	    return this.b2BVATEnabled;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, the category supports business-to-business (B2B) VAT
     * listings. Applicable to the eBay Germany (DE), Austria (AT),
     * and Switzerland CH) sites only. If not present,
     * the category does not support this feature. Will not be returned if false.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setB2BVATEnabled(Boolean b2BVATEnabled) {
	    this.b2BVATEnabled = b2BVATEnabled;
	}
	/**
     * public getter
     *
     * 
     * If true, the category supports catalog product details. Not returned if false.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getCatalogEnabled() {
	    return this.catalogEnabled;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, the category supports catalog product details. Not returned if false.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setCatalogEnabled(Boolean catalogEnabled) {
	    this.catalogEnabled = catalogEnabled;
	}
	/**
     * public getter
     *
     * 
     * Distinct numeric ID for a category on eBay.
     * In GetItem and related calls, see CategoryName for the text name of
     * the category. Use GetCategories to look up the category parent ID.<br>
     * <br>
     * For GetItem, Half.com items return the Half.com category ID
     * in PrimaryCategory. This ID is not necessarily returned in
     * GetCategories.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCategoryID() {
	    return this.categoryID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Distinct numeric ID for a category on eBay.
     * In GetItem and related calls, see CategoryName for the text name of
     * the category. Use GetCategories to look up the category parent ID.<br>
     * <br>
     * For GetItem, Half.com items return the Half.com category ID
     * in PrimaryCategory. This ID is not necessarily returned in
     * GetCategories.
     * 
     *
     * @param java.lang.String
	 */
	public void setCategoryID(String categoryID) {
	    this.categoryID = categoryID;
	}
	/**
     * public getter
     *
     * 
     * The level where the category fits in the site's category hierarchy.
     * For example, if this field has a value of 2, then the category is two
     * levels below the root category in the site's category hierarchy.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getCategoryLevel() {
	    return this.categoryLevel;
	}
	
	/**
	 * public setter
	 *
     * 
     * The level where the category fits in the site's category hierarchy.
     * For example, if this field has a value of 2, then the category is two
     * levels below the root category in the site's category hierarchy.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setCategoryLevel(Integer categoryLevel) {
	    this.categoryLevel = categoryLevel;
	}
	/**
     * public getter
     *
     * 
     * Display name of the category as it would appear on
     * the eBay Web site.
     * In GetItem, this is a fully qualified category name
     * (e.g., Collectibles:Decorative Collectibles:Hummel, Goebel).<br>
     * <br>
     * In GetItem, always returned for eBay.com listings.
     * Not returned in PrimaryCategory for Half.com listings.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCategoryName() {
	    return this.categoryName;
	}
	
	/**
	 * public setter
	 *
     * 
     * Display name of the category as it would appear on
     * the eBay Web site.
     * In GetItem, this is a fully qualified category name
     * (e.g., Collectibles:Decorative Collectibles:Hummel, Goebel).<br>
     * <br>
     * In GetItem, always returned for eBay.com listings.
     * Not returned in PrimaryCategory for Half.com listings.
     * 
     *
     * @param java.lang.String
	 */
	public void setCategoryName(String categoryName) {
	    this.categoryName = categoryName;
	}
	/**
     * public getter
     *
     * 
     * Category ID identifying a category that is an ancestor of
     * the category indicated in CategoryID.
     * For GetCategories, returns the same value as CategoryID
     * if the CategoryLevel is 1.
     * For GetSuggestedCategories, multiple CategoryParentID fields
     * can be returned in sequence, starting with the root category
     * and ending with the category that is the direct parent of
     * the category specified in CategoryID.
     * Use these parent fields and the CategoryID field to build
     * the fully qualified category browse path or "breadcrumbs"
     * (e.g., 58058:3516:3517).
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getCategoryParentID() {
	    return this.categoryParentID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Category ID identifying a category that is an ancestor of
     * the category indicated in CategoryID.
     * For GetCategories, returns the same value as CategoryID
     * if the CategoryLevel is 1.
     * For GetSuggestedCategories, multiple CategoryParentID fields
     * can be returned in sequence, starting with the root category
     * and ending with the category that is the direct parent of
     * the category specified in CategoryID.
     * Use these parent fields and the CategoryID field to build
     * the fully qualified category browse path or "breadcrumbs"
     * (e.g., 58058:3516:3517).
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setCategoryParentID(List<String> categoryParentID) {
	    this.categoryParentID = categoryParentID;
	}
	/**
     * public getter
     *
     * 
     * Display name of the category indicated in CategoryParentID.
     * For GetSuggestedCategories, multiple CategoryParentName fields
     * can be returned in sequence, starting with the root category
     * and ending with the category that
     * is the direct parent of the category specified in CategoryName.
     * Use these parent fields and the CategoryName field to build the
     * fully qualified category browse path or "breadcrumbs"
     * (e.g., Computers & Networking > Technology Books > Certification).
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getCategoryParentName() {
	    return this.categoryParentName;
	}
	
	/**
	 * public setter
	 *
     * 
     * Display name of the category indicated in CategoryParentID.
     * For GetSuggestedCategories, multiple CategoryParentName fields
     * can be returned in sequence, starting with the root category
     * and ending with the category that
     * is the direct parent of the category specified in CategoryName.
     * Use these parent fields and the CategoryName field to build the
     * fully qualified category browse path or "breadcrumbs"
     * (e.g., Computers & Networking > Technology Books > Certification).
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setCategoryParentName(List<String> categoryParentName) {
	    this.categoryParentName = categoryParentName;
	}
	/**
     * public getter
     *
     * 
     * No longer applicable to any category.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getProductSearchPageAvailable() {
	    return this.productSearchPageAvailable;
	}
	
	/**
	 * public setter
	 *
     * 
     * No longer applicable to any category.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setProductSearchPageAvailable(Boolean productSearchPageAvailable) {
	    this.productSearchPageAvailable = productSearchPageAvailable;
	}
	/**
     * public getter
     *
     * 
     * No longer applicable to any category.
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.ExtendedProductFinderIDType>
	 */
	public List<ExtendedProductFinderIDType> getProductFinderIDs() {
	    return this.productFinderIDs;
	}
	
	/**
	 * public setter
	 *
     * 
     * No longer applicable to any category.
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.ExtendedProductFinderIDType>
	 */
	public void setProductFinderIDs(List<ExtendedProductFinderIDType> productFinderIDs) {
	    this.productFinderIDs = productFinderIDs;
	}
	/**
     * public getter
     *
     * 
     * No longer applicable to any category.
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.CharacteristicsSetType>
	 */
	public List<CharacteristicsSetType> getCharacteristicsSets() {
	    return this.characteristicsSets;
	}
	
	/**
	 * public setter
	 *
     * 
     * No longer applicable to any category.
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.CharacteristicsSetType>
	 */
	public void setCharacteristicsSets(List<CharacteristicsSetType> characteristicsSets) {
	    this.characteristicsSets = characteristicsSets;
	}
	/**
     * public getter
     *
     * 
     * If true, indicates a category that has expired and
     * to which items may not be listed. Will not be returned if false.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getExpired() {
	    return this.expired;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, indicates a category that has expired and
     * to which items may not be listed. Will not be returned if false.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setExpired(Boolean expired) {
	    this.expired = expired;
	}
	/**
     * public getter
     *
     * 
     * If true, indicates that the category is a fixed-fee category. Use this
     * information to identify categories are not eligible for eBay Stores Inventory
     * format listings. You cannot list eBay Store Inventory format listings in
     * fixed-fee categories on international sites. Output only. Will not be returned if false.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getIntlAutosFixedCat() {
	    return this.intlAutosFixedCat;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, indicates that the category is a fixed-fee category. Use this
     * information to identify categories are not eligible for eBay Stores Inventory
     * format listings. You cannot list eBay Store Inventory format listings in
     * fixed-fee categories on international sites. Output only. Will not be returned if false.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setIntlAutosFixedCat(Boolean intlAutosFixedCat) {
	    this.intlAutosFixedCat = intlAutosFixedCat;
	}
	/**
     * public getter
     *
     * 
     * If true, indicates that the category indicated in CategoryID is a leaf category,
     * in which items may be listed (if the category is not also expired or virtual). Will not be returned if false.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getLeafCategory() {
	    return this.leafCategory;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, indicates that the category indicated in CategoryID is a leaf category,
     * in which items may be listed (if the category is not also expired or virtual). Will not be returned if false.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setLeafCategory(Boolean leafCategory) {
	    this.leafCategory = leafCategory;
	}
	/**
     * public getter
     *
     * 
     * If true, indicates the category indicated in CategoryID is a
     * virtual category, to which items may not be listed. Will not be returned if false.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getVirtual() {
	    return this.virtual;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, indicates the category indicated in CategoryID is a
     * virtual category, to which items may not be listed. Will not be returned if false.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setVirtual(Boolean virtual) {
	    this.virtual = virtual;
	}
	/**
     * public getter
     *
     * 
     * No longer applicable to any category.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getNumOfItems() {
	    return this.numOfItems;
	}
	
	/**
	 * public setter
	 *
     * 
     * No longer applicable to any category.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setNumOfItems(Integer numOfItems) {
	    this.numOfItems = numOfItems;
	}
	/**
     * public getter
     *
     * 
     * No longer supported.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getSellerGuaranteeEligible() {
	    return this.sellerGuaranteeEligible;
	}
	
	/**
	 * public setter
	 *
     * 
     * No longer supported.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setSellerGuaranteeEligible(Boolean sellerGuaranteeEligible) {
	    this.sellerGuaranteeEligible = sellerGuaranteeEligible;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the category (and its subcategories)
     * allows or disallows listing with a reserve price,
     * depending on the prevailing site configuration indicated by
     * ReservePriceAllowed.
     * ORPA (override reserve price allowed) indicates when the category
     * is an exception to the site's ReservePriceAllowed policy.<br>
     * <br>
     * If ORPA is true, the category overrides (toggles or reverses) the
     * site's ReservePriceAllowed setting. In other words:<br>
     * - If ReservePriceAllowed is true, reserve price is not allowed in this category.<br>
     * - If ReservePriceAllowed is false, reserve price is allowed in this category.<br><br>
     * If ORPA is not present, there is no override.
     * That is, the category's setting is the same as the site's ReservePriceAllowed setting.<br>
     * <br> This field will not be returned in the response if false.
     * This toggling logic is designed to reduce the size of the GetCategories
     * response by only returning ORPA when the category's policy is different
     * from the site's policy. (If ORPA is true for a category, you can assume
     * its subcategories inherit the same setting unless otherwise specified.)
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getOrpa() {
	    return this.orpa;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the category (and its subcategories)
     * allows or disallows listing with a reserve price,
     * depending on the prevailing site configuration indicated by
     * ReservePriceAllowed.
     * ORPA (override reserve price allowed) indicates when the category
     * is an exception to the site's ReservePriceAllowed policy.<br>
     * <br>
     * If ORPA is true, the category overrides (toggles or reverses) the
     * site's ReservePriceAllowed setting. In other words:<br>
     * - If ReservePriceAllowed is true, reserve price is not allowed in this category.<br>
     * - If ReservePriceAllowed is false, reserve price is allowed in this category.<br><br>
     * If ORPA is not present, there is no override.
     * That is, the category's setting is the same as the site's ReservePriceAllowed setting.<br>
     * <br> This field will not be returned in the response if false.
     * This toggling logic is designed to reduce the size of the GetCategories
     * response by only returning ORPA when the category's policy is different
     * from the site's policy. (If ORPA is true for a category, you can assume
     * its subcategories inherit the same setting unless otherwise specified.)
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setOrpa(Boolean orpa) {
	    this.orpa = orpa;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the category (and its subcategories) allows
     * or disallows reducing a listing's reserve price,
     * depending on the prevailing site configuration indicated by ReduceReserveAllowed.
     * ORRA (override reduce reserve allowed) indicates when the category is an exception
     * to the site's ReduceReserveAllowed policy.<br><br>
     * If ORRA is true, the category overrides (toggles or reverses) the
     * site's ReduceReserveAllowed setting. In other words:<br>
     * - If ReduceReserveAllowed is true, reserve price reduction is not allowed in this category.<br>
     * - If ReduceReserveAllowed is false (because it is not present in the response), reserve price reduction is allowed in this category.<br><br>
     * If ORRA is not present, there is no override. Will not be returned in the response if false.
     * That is, the category's setting is the same as the site's ReduceReserveAllowed setting.<br>
     * <br>
     * This toggling logic is designed to reduce the size of the GetCategories
     * response by only returning ORRA when the category's policy is different
     * from the site's policy.  (If ORRA is true for a category, you can assume
     * its subcategories inherit the same setting unless otherwise specified.)
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getOrra() {
	    return this.orra;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the category (and its subcategories) allows
     * or disallows reducing a listing's reserve price,
     * depending on the prevailing site configuration indicated by ReduceReserveAllowed.
     * ORRA (override reduce reserve allowed) indicates when the category is an exception
     * to the site's ReduceReserveAllowed policy.<br><br>
     * If ORRA is true, the category overrides (toggles or reverses) the
     * site's ReduceReserveAllowed setting. In other words:<br>
     * - If ReduceReserveAllowed is true, reserve price reduction is not allowed in this category.<br>
     * - If ReduceReserveAllowed is false (because it is not present in the response), reserve price reduction is allowed in this category.<br><br>
     * If ORRA is not present, there is no override. Will not be returned in the response if false.
     * That is, the category's setting is the same as the site's ReduceReserveAllowed setting.<br>
     * <br>
     * This toggling logic is designed to reduce the size of the GetCategories
     * response by only returning ORRA when the category's policy is different
     * from the site's policy.  (If ORRA is true for a category, you can assume
     * its subcategories inherit the same setting unless otherwise specified.)
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setOrra(Boolean orra) {
	    this.orra = orra;
	}
	/**
     * public getter
     *
     * 
     * "Lot Size Disabled (LSD)" indicates that Item.LotSize is not permitted when you list in this category.
     * If true, indicates that lot sizes are disabled in the specified category. Will not be returned if false.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getLsd() {
	    return this.lsd;
	}
	
	/**
	 * public setter
	 *
     * 
     * "Lot Size Disabled (LSD)" indicates that Item.LotSize is not permitted when you list in this category.
     * If true, indicates that lot sizes are disabled in the specified category. Will not be returned if false.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setLsd(Boolean lsd) {
	    this.lsd = lsd;
	}
	/**
     * public getter
     *
     * 
     * The list of keywords returned.
     * 
     *
     * @returns java.lang.String
	 */
	public String getKeywords() {
	    return this.keywords;
	}
	
	/**
	 * public setter
	 *
     * 
     * The list of keywords returned.
     * 
     *
     * @param java.lang.String
	 */
	public void setKeywords(String keywords) {
	    this.keywords = keywords;
	}

}