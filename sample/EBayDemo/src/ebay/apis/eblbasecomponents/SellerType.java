// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * 
 * Information about a user returned in the context of an item's seller.
 * 
 */
public class SellerType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "PaisaPayStatus")
	private Integer paisaPayStatus;
	
	@Element(name = "AllowPaymentEdit")
	private boolean allowPaymentEdit;
	
	@Element(name = "BillingCurrency")
	private CurrencyCodeType billingCurrency;
	
	@Element(name = "CheckoutEnabled")
	private boolean checkoutEnabled;
	
	@Element(name = "CIPBankAccountStored")
	private boolean cipBankAccountStored;
	
	@Element(name = "GoodStanding")
	private boolean goodStanding;
	
	@Element(name = "MerchandizingPref")
	private MerchandizingPrefCodeType merchandizingPref;
	
	@Element(name = "QualifiesForB2BVAT")
	private boolean qualifiesForB2BVAT;
	
	@Element(name = "SellerGuaranteeLevel")
	private SellerGuaranteeLevelCodeType sellerGuaranteeLevel;
	
	@Element(name = "SellerLevel")
	private SellerLevelCodeType sellerLevel;
	
	@Element(name = "SellerPaymentAddress")
	private AddressType sellerPaymentAddress;
	
	@Element(name = "SchedulingInfo")
	private SchedulingInfoType schedulingInfo;
	
	@Element(name = "StoreOwner")
	private boolean storeOwner;
	
	@Element(name = "StoreURL")
	private String storeURL;
	
	@Element(name = "SellerBusinessType")
	private SellerBusinessCodeType sellerBusinessType;
	
	@Element(name = "RegisteredBusinessSeller")
	private Boolean registeredBusinessSeller;
	
	@Element(name = "StoreSite")
	private SiteCodeType storeSite;
	
	@Element(name = "PaymentMethod")
	private SellerPaymentMethodCodeType paymentMethod;
	
	@Element(name = "ProStoresPreference")
	private ProStoresCheckoutPreferenceType proStoresPreference;
	
	@Element(name = "CharityRegistered")
	private Boolean charityRegistered;
	
	@Element(name = "SafePaymentExempt")
	private Boolean safePaymentExempt;
	
	@Element(name = "PaisaPayEscrowEMIStatus")
	private Integer paisaPayEscrowEMIStatus;
	
	@Element(name = "CharityAffiliationDetails")
	private CharityAffiliationDetailsType charityAffiliationDetails;
	
	@Element(name = "TransactionPercent")
	private Float transactionPercent;
	
	@Element(name = "IntegratedMerchantCreditCardInfo")
	private IntegratedMerchantCreditCardInfoType integratedMerchantCreditCardInfo;
	
	@Element(name = "FeatureEligibility")
	private FeatureEligibilityType featureEligibility;
	
	@Element(name = "TopRatedSeller")
	private Boolean topRatedSeller;
	
	@Element(name = "TopRatedSellerDetails")
	private TopRatedSellerDetailsType topRatedSellerDetails;
	
	@Element(name = "RecoupmentPolicyConsent")
	private RecoupmentPolicyConsentType recoupmentPolicyConsent;
	
	@Element(name = "DomesticRateTable")
	private Boolean domesticRateTable;
	
	@Element(name = "InternationalRateTable")
	private Boolean internationalRateTable;
	
	@Element(name = "SellereBayPaymentProcessStatus")
	private SellereBayPaymentProcessStatusCodeType sellereBayPaymentProcessStatus;
	
	@Element(name = "SellereBayPaymentProcessConsent")
	private SellereBayPaymentProcessConsentCodeType sellereBayPaymentProcessConsent;
	
    
	/**
     * public getter
     *
     * 
     * Indicates the seller's PaisaPay and PaisapayEscrow registration status. India site only.<br>
     * 0 - Seller not registered<br>
     * 1 - Seller registered<br>
     * 2 - Seller registered but registration suspended<br>
     * 3 - Seller registered but outbound payment suspended<br>
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getPaisaPayStatus() {
	    return this.paisaPayStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the seller's PaisaPay and PaisapayEscrow registration status. India site only.<br>
     * 0 - Seller not registered<br>
     * 1 - Seller registered<br>
     * 2 - Seller registered but registration suspended<br>
     * 3 - Seller registered but outbound payment suspended<br>
     * 
     *
     * @param java.lang.Integer
	 */
	public void setPaisaPayStatus(Integer paisaPayStatus) {
	    this.paisaPayStatus = paisaPayStatus;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the user as a seller by default allows buyers to edit the
     * total cost of an item (while in checkout). (Sellers enable this property in
     * their My eBay user preferences on the eBay site.)
     * 
     *
     * @returns .boolean
	 */
	public boolean getAllowPaymentEdit() {
	    return this.allowPaymentEdit;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the user as a seller by default allows buyers to edit the
     * total cost of an item (while in checkout). (Sellers enable this property in
     * their My eBay user preferences on the eBay site.)
     * 
     *
     * @param .boolean
	 */
	public void setAllowPaymentEdit(boolean allowPaymentEdit) {
	    this.allowPaymentEdit = allowPaymentEdit;
	}
	/**
     * public getter
     *
     * 
     * Currency type in which the user is billed seller fees.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.CurrencyCodeType
	 */
	public CurrencyCodeType getBillingCurrency() {
	    return this.billingCurrency;
	}
	
	/**
	 * public setter
	 *
     * 
     * Currency type in which the user is billed seller fees.
     * 
     *
     * @param ebay.apis.eblbasecomponents.CurrencyCodeType
	 */
	public void setBillingCurrency(CurrencyCodeType billingCurrency) {
	    this.billingCurrency = billingCurrency;
	}
	/**
     * public getter
     *
     * 
     * This flag indicates whether or not the seller's Checkout Enabled preference is turned on (at account level or at
     * listing level). This preference is managed through Payment Preferences in My eBay. If this preference is enabled,
     * a Pay Now button will appear in checkout flow pages and in the email notifications that are sent to buyers. This
     * preferance is enabled by default if PayPal is one of the payment methods.
     * 
     *
     * @returns .boolean
	 */
	public boolean getCheckoutEnabled() {
	    return this.checkoutEnabled;
	}
	
	/**
	 * public setter
	 *
     * 
     * This flag indicates whether or not the seller's Checkout Enabled preference is turned on (at account level or at
     * listing level). This preference is managed through Payment Preferences in My eBay. If this preference is enabled,
     * a Pay Now button will appear in checkout flow pages and in the email notifications that are sent to buyers. This
     * preferance is enabled by default if PayPal is one of the payment methods.
     * 
     *
     * @param .boolean
	 */
	public void setCheckoutEnabled(boolean checkoutEnabled) {
	    this.checkoutEnabled = checkoutEnabled;
	}
	/**
     * public getter
     *
     * 
     * If true, this flag indicates that the seller has stored bank account information on
     * file with eBay. A seller must have stored bank account information on file with eBay
     * in order to use the Cash in Person (also known as Pay upon Pickup) feature.
     * This field is applicable to all eBay sites that support Cash in Person or Pay upon
     * Pickuop as a payment method.
     * 
     *
     * @returns .boolean
	 */
	public boolean getCipBankAccountStored() {
	    return this.cipBankAccountStored;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, this flag indicates that the seller has stored bank account information on
     * file with eBay. A seller must have stored bank account information on file with eBay
     * in order to use the Cash in Person (also known as Pay upon Pickup) feature.
     * This field is applicable to all eBay sites that support Cash in Person or Pay upon
     * Pickuop as a payment method.
     * 
     *
     * @param .boolean
	 */
	public void setCipBankAccountStored(boolean cipBankAccountStored) {
	    this.cipBankAccountStored = cipBankAccountStored;
	}
	/**
     * public getter
     *
     * 
     * If true, indicates that the user is in good standing with eBay. (One of the
     * requirements for listing a new item with Immediate Payment.)
     * 
     *
     * @returns .boolean
	 */
	public boolean getGoodStanding() {
	    return this.goodStanding;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, indicates that the user is in good standing with eBay. (One of the
     * requirements for listing a new item with Immediate Payment.)
     * 
     *
     * @param .boolean
	 */
	public void setGoodStanding(boolean goodStanding) {
	    this.goodStanding = goodStanding;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the seller participates in the
     * Merchandising Manager feature. If so, the seller can
     * set up rules for cross-promoting items from the seller's store.
     * If not, eBay cross-promotes items as the seller's items are
     * being viewed or purchased.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.MerchandizingPrefCodeType
	 */
	public MerchandizingPrefCodeType getMerchandizingPref() {
	    return this.merchandizingPref;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the seller participates in the
     * Merchandising Manager feature. If so, the seller can
     * set up rules for cross-promoting items from the seller's store.
     * If not, eBay cross-promotes items as the seller's items are
     * being viewed or purchased.
     * 
     *
     * @param ebay.apis.eblbasecomponents.MerchandizingPrefCodeType
	 */
	public void setMerchandizingPref(MerchandizingPrefCodeType merchandizingPref) {
	    this.merchandizingPref = merchandizingPref;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the user is subject to VAT. Users who have registered with
     * eBay as VAT-exempt are not subject to VAT.
     * 
     *
     * @returns .boolean
	 */
	public boolean getQualifiesForB2BVAT() {
	    return this.qualifiesForB2BVAT;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the user is subject to VAT. Users who have registered with
     * eBay as VAT-exempt are not subject to VAT.
     * 
     *
     * @param .boolean
	 */
	public void setQualifiesForB2BVAT(boolean qualifiesForB2BVAT) {
	    this.qualifiesForB2BVAT = qualifiesForB2BVAT;
	}
	/**
     * public getter
     *
     * 
     * No longer supported.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SellerGuaranteeLevelCodeType
	 */
	public SellerGuaranteeLevelCodeType getSellerGuaranteeLevel() {
	    return this.sellerGuaranteeLevel;
	}
	
	/**
	 * public setter
	 *
     * 
     * No longer supported.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SellerGuaranteeLevelCodeType
	 */
	public void setSellerGuaranteeLevel(SellerGuaranteeLevelCodeType sellerGuaranteeLevel) {
	    this.sellerGuaranteeLevel = sellerGuaranteeLevel;
	}
	/**
     * public getter
     *
     * 
     * The user's eBay PowerSeller tier. Possible values are enumerated in the SellerLevelCodeType code list.
     * SellerInfo.SellerLevel is no longer returned in the GetUser, GetBidderList, GetSellerList, GetItem, and
     * GetItemTransactions responses for the US, DE/AT/CH, and UK/IE sites, for version 629 and later. If you are using
     * a version older than 629, SellerInfo.SellerLevel will still be returned. Developers should note that
     * SellerInfo.SellerLevel could potentially be removed from other sites as well.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SellerLevelCodeType
	 */
	public SellerLevelCodeType getSellerLevel() {
	    return this.sellerLevel;
	}
	
	/**
	 * public setter
	 *
     * 
     * The user's eBay PowerSeller tier. Possible values are enumerated in the SellerLevelCodeType code list.
     * SellerInfo.SellerLevel is no longer returned in the GetUser, GetBidderList, GetSellerList, GetItem, and
     * GetItemTransactions responses for the US, DE/AT/CH, and UK/IE sites, for version 629 and later. If you are using
     * a version older than 629, SellerInfo.SellerLevel will still be returned. Developers should note that
     * SellerInfo.SellerLevel could potentially be removed from other sites as well.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SellerLevelCodeType
	 */
	public void setSellerLevel(SellerLevelCodeType sellerLevel) {
	    this.sellerLevel = sellerLevel;
	}
	/**
     * public getter
     *
     * 
     * Address used by eBay for purposes of billing the user for seller fees.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AddressType
	 */
	public AddressType getSellerPaymentAddress() {
	    return this.sellerPaymentAddress;
	}
	
	/**
	 * public setter
	 *
     * 
     * Address used by eBay for purposes of billing the user for seller fees.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AddressType
	 */
	public void setSellerPaymentAddress(AddressType sellerPaymentAddress) {
	    this.sellerPaymentAddress = sellerPaymentAddress;
	}
	/**
     * public getter
     *
     * 
     * Container for scheduling limits for the user.
     * Conveys the minimum and maximum
     * minutes the user may schedule listings in advance, as well as the maximum
     * number of items the user may schedule.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SchedulingInfoType
	 */
	public SchedulingInfoType getSchedulingInfo() {
	    return this.schedulingInfo;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container for scheduling limits for the user.
     * Conveys the minimum and maximum
     * minutes the user may schedule listings in advance, as well as the maximum
     * number of items the user may schedule.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SchedulingInfoType
	 */
	public void setSchedulingInfo(SchedulingInfoType schedulingInfo) {
	    this.schedulingInfo = schedulingInfo;
	}
	/**
     * public getter
     *
     * 
     * Boolean value indicates whether or not the seller is an eBay Store owner.
     * 
     *
     * @returns .boolean
	 */
	public boolean getStoreOwner() {
	    return this.storeOwner;
	}
	
	/**
	 * public setter
	 *
     * 
     * Boolean value indicates whether or not the seller is an eBay Store owner.
     * 
     *
     * @param .boolean
	 */
	public void setStoreOwner(boolean storeOwner) {
	    this.storeOwner = storeOwner;
	}
	/**
     * public getter
     *
     * 
     * The URL for the seller's eBay Store. This field is only returned if the seller is a store
     * owner. To determine if a seller is a Store owner, check for the <b>User.SellerInfo.StoreOwner</b>
     * and a value of true. The eBay Stores domain that is returned in this field is based on the
     * <b>SITEID</b> header that is passed in the request, and not on the user's
     * registration address, as was the case prior to version 757. So, if the seller's
     * registration county is the UK, but a <b>SITEID</b> value of 71 (France) is
     * passed into the call, the eBay Stores domain that is returned would be stores.ebay.fr.
     * 
     *
     * @returns java.lang.String
	 */
	public String getStoreURL() {
	    return this.storeURL;
	}
	
	/**
	 * public setter
	 *
     * 
     * The URL for the seller's eBay Store. This field is only returned if the seller is a store
     * owner. To determine if a seller is a Store owner, check for the <b>User.SellerInfo.StoreOwner</b>
     * and a value of true. The eBay Stores domain that is returned in this field is based on the
     * <b>SITEID</b> header that is passed in the request, and not on the user's
     * registration address, as was the case prior to version 757. So, if the seller's
     * registration county is the UK, but a <b>SITEID</b> value of 71 (France) is
     * passed into the call, the eBay Stores domain that is returned would be stores.ebay.fr.
     * 
     *
     * @param java.lang.String
	 */
	public void setStoreURL(String storeURL) {
	    this.storeURL = storeURL;
	}
	/**
     * public getter
     *
     * 
     * Type of seller account. This value is returned if the German
     * (ID 77), UK (ID 3), Ireland (ID 205), or eBay Motors (ID 100) sites are specified.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SellerBusinessCodeType
	 */
	public SellerBusinessCodeType getSellerBusinessType() {
	    return this.sellerBusinessType;
	}
	
	/**
	 * public setter
	 *
     * 
     * Type of seller account. This value is returned if the German
     * (ID 77), UK (ID 3), Ireland (ID 205), or eBay Motors (ID 100) sites are specified.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SellerBusinessCodeType
	 */
	public void setSellerBusinessType(SellerBusinessCodeType sellerBusinessType) {
	    this.sellerBusinessType = sellerBusinessType;
	}
	/**
     * public getter
     *
     * 
     * If true, the user is registered as a vehicle dealer on the eBay Motors site.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getRegisteredBusinessSeller() {
	    return this.registeredBusinessSeller;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, the user is registered as a vehicle dealer on the eBay Motors site.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setRegisteredBusinessSeller(Boolean registeredBusinessSeller) {
	    this.registeredBusinessSeller = registeredBusinessSeller;
	}
	/**
     * public getter
     *
     * 
     * The site associated with the seller's eBay Store.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SiteCodeType
	 */
	public SiteCodeType getStoreSite() {
	    return this.storeSite;
	}
	
	/**
	 * public setter
	 *
     * 
     * The site associated with the seller's eBay Store.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SiteCodeType
	 */
	public void setStoreSite(SiteCodeType storeSite) {
	    this.storeSite = storeSite;
	}
	/**
     * public getter
     *
     * 
     * Indicates the method the seller selected to pay eBay with for
     * the account.
     * The payment methods vary from one eBay site to the next.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SellerPaymentMethodCodeType
	 */
	public SellerPaymentMethodCodeType getPaymentMethod() {
	    return this.paymentMethod;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the method the seller selected to pay eBay with for
     * the account.
     * The payment methods vary from one eBay site to the next.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SellerPaymentMethodCodeType
	 */
	public void setPaymentMethod(SellerPaymentMethodCodeType paymentMethod) {
	    this.paymentMethod = paymentMethod;
	}
	/**
     * public getter
     *
     * 
     * Details about the checkout preferences related to the ProStores store. Returned
     * only if set by the user. (Currently those preferences are not settable using the public API.)
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ProStoresCheckoutPreferenceType
	 */
	public ProStoresCheckoutPreferenceType getProStoresPreference() {
	    return this.proStoresPreference;
	}
	
	/**
	 * public setter
	 *
     * 
     * Details about the checkout preferences related to the ProStores store. Returned
     * only if set by the user. (Currently those preferences are not settable using the public API.)
     * 
     *
     * @param ebay.apis.eblbasecomponents.ProStoresCheckoutPreferenceType
	 */
	public void setProStoresPreference(ProStoresCheckoutPreferenceType proStoresPreference) {
	    this.proStoresPreference = proStoresPreference;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether or not the seller is a registered charity
     * seller. If CharityRegistered is false, the user must
     * register with the eBay Giving Works provider to list items
     * with eBay Giving Works.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getCharityRegistered() {
	    return this.charityRegistered;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether or not the seller is a registered charity
     * seller. If CharityRegistered is false, the user must
     * register with the eBay Giving Works provider to list items
     * with eBay Giving Works.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setCharityRegistered(Boolean charityRegistered) {
	    this.charityRegistered = charityRegistered;
	}
	/**
     * public getter
     *
     * 
     * If true, the user is currently exempt from the requirement to offer at least
     * one safe payment method (PayPal/PaisaPay or one of the credit cards specified
     * in Item.PaymentMethods) when listing items. This value should only return true
     * for sellers who registered before January 17, 2007. Otherwise, it should
     * return false. This setting overrides both the site and category values for
     * SafePaymentRequired.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getSafePaymentExempt() {
	    return this.safePaymentExempt;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, the user is currently exempt from the requirement to offer at least
     * one safe payment method (PayPal/PaisaPay or one of the credit cards specified
     * in Item.PaymentMethods) when listing items. This value should only return true
     * for sellers who registered before January 17, 2007. Otherwise, it should
     * return false. This setting overrides both the site and category values for
     * SafePaymentRequired.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setSafePaymentExempt(Boolean safePaymentExempt) {
	    this.safePaymentExempt = safePaymentExempt;
	}
	/**
     * public getter
     *
     * 
     * Indicates the seller's PaisaPayEscrowEMI (Equal Monthly Installment) registration status. India site only.<br>
     * 0 - Seller not registered<br>
     * 1 - Seller registered<br>
     * 7 - Seller eligible<br>
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getPaisaPayEscrowEMIStatus() {
	    return this.paisaPayEscrowEMIStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the seller's PaisaPayEscrowEMI (Equal Monthly Installment) registration status. India site only.<br>
     * 0 - Seller not registered<br>
     * 1 - Seller registered<br>
     * 7 - Seller eligible<br>
     * 
     *
     * @param java.lang.Integer
	 */
	public void setPaisaPayEscrowEMIStatus(Integer paisaPayEscrowEMIStatus) {
	    this.paisaPayEscrowEMIStatus = paisaPayEscrowEMIStatus;
	}
	/**
     * public getter
     *
     * 
     * Contains information about the seller's charity affiliations detail.
     * Returned if the user is affiliated with one or more
     * charities. Seller must be registered with the eBay Giving
     * Works provider to be affiliated with a charity non-profit
     * organization.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.CharityAffiliationDetailsType
	 */
	public CharityAffiliationDetailsType getCharityAffiliationDetails() {
	    return this.charityAffiliationDetails;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains information about the seller's charity affiliations detail.
     * Returned if the user is affiliated with one or more
     * charities. Seller must be registered with the eBay Giving
     * Works provider to be affiliated with a charity non-profit
     * organization.
     * 
     *
     * @param ebay.apis.eblbasecomponents.CharityAffiliationDetailsType
	 */
	public void setCharityAffiliationDetails(CharityAffiliationDetailsType charityAffiliationDetails) {
	    this.charityAffiliationDetails = charityAffiliationDetails;
	}
	/**
     * public getter
     *
     * 
     * Percentage of the number of times a member has sold successfully vs.
     * the number of times a member has bought an item in the preceding 365 days.
     * 
     *
     * @returns java.lang.Float
	 */
	public Float getTransactionPercent() {
	    return this.transactionPercent;
	}
	
	/**
	 * public setter
	 *
     * 
     * Percentage of the number of times a member has sold successfully vs.
     * the number of times a member has bought an item in the preceding 365 days.
     * 
     *
     * @param java.lang.Float
	 */
	public void setTransactionPercent(Float transactionPercent) {
	    this.transactionPercent = transactionPercent;
	}
	/**
     * public getter
     *
     * 
     * Indicates the sites on which a seller has a payment gateway account
     * (and thus the sites on which the seller can use the IntegratedMerchantCreditCard
     * payment method).
     * Sellers use a payment gateway account to accept online
     * credit cards.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.IntegratedMerchantCreditCardInfoType
	 */
	public IntegratedMerchantCreditCardInfoType getIntegratedMerchantCreditCardInfo() {
	    return this.integratedMerchantCreditCardInfo;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the sites on which a seller has a payment gateway account
     * (and thus the sites on which the seller can use the IntegratedMerchantCreditCard
     * payment method).
     * Sellers use a payment gateway account to accept online
     * credit cards.
     * 
     *
     * @param ebay.apis.eblbasecomponents.IntegratedMerchantCreditCardInfoType
	 */
	public void setIntegratedMerchantCreditCardInfo(IntegratedMerchantCreditCardInfoType integratedMerchantCreditCardInfo) {
	    this.integratedMerchantCreditCardInfo = integratedMerchantCreditCardInfo;
	}
	/**
     * public getter
     *
     * 
     * Contains eligibility details about seller- or platform-based features. This is returned only
     * if IncludeFeatureEligibility is set to true in the request.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.FeatureEligibilityType
	 */
	public FeatureEligibilityType getFeatureEligibility() {
	    return this.featureEligibility;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains eligibility details about seller- or platform-based features. This is returned only
     * if IncludeFeatureEligibility is set to true in the request.
     * 
     *
     * @param ebay.apis.eblbasecomponents.FeatureEligibilityType
	 */
	public void setFeatureEligibility(FeatureEligibilityType featureEligibility) {
	    this.featureEligibility = featureEligibility;
	}
	/**
     * public getter
     *
     * 
     * This boolean field indicates if the seller is certified as a
     * <em>Top Rated Seller</em>. To qualify as a Top Rated Seller, a
     * seller must meet the following requirements:
     * <ul>
     * <li>100 or more selling transactions in a one-year period</li>
     * <li>Shipment tracking information provided to the buyer within the
     * specified handling time for at least 90 percent of their listings</li>
     * </ul>
     * This field is returned for the following sites only: US (EBAY-US), Motors (EBAY-MOTOR), AT (EBAY-AT), CH (EBAY-CH), DE (EBAY-DE), IE (EBAY-IE) and UK (EBAY-GB).
     * <br/><br/>
     * On the eBay US site, Top Rated Sellers are eligible to receive a Top Rated Plus seal for their listings. For a Top Rated Seller's listing to qualify as a Top Rated Plus listing, that listing must accept returns and the handling time must be set to one day (<strong>DispatchTimeMax</strong>=<code>1</code>). Top Rated Plus listings get increased visibility in fixed-price searches and receive a Final Value Fee discount.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getTopRatedSeller() {
	    return this.topRatedSeller;
	}
	
	/**
	 * public setter
	 *
     * 
     * This boolean field indicates if the seller is certified as a
     * <em>Top Rated Seller</em>. To qualify as a Top Rated Seller, a
     * seller must meet the following requirements:
     * <ul>
     * <li>100 or more selling transactions in a one-year period</li>
     * <li>Shipment tracking information provided to the buyer within the
     * specified handling time for at least 90 percent of their listings</li>
     * </ul>
     * This field is returned for the following sites only: US (EBAY-US), Motors (EBAY-MOTOR), AT (EBAY-AT), CH (EBAY-CH), DE (EBAY-DE), IE (EBAY-IE) and UK (EBAY-GB).
     * <br/><br/>
     * On the eBay US site, Top Rated Sellers are eligible to receive a Top Rated Plus seal for their listings. For a Top Rated Seller's listing to qualify as a Top Rated Plus listing, that listing must accept returns and the handling time must be set to one day (<strong>DispatchTimeMax</strong>=<code>1</code>). Top Rated Plus listings get increased visibility in fixed-price searches and receive a Final Value Fee discount.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setTopRatedSeller(Boolean topRatedSeller) {
	    this.topRatedSeller = topRatedSeller;
	}
	/**
     * public getter
     *
     * 
     * Contains top-rated seller program details for the seller.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.TopRatedSellerDetailsType
	 */
	public TopRatedSellerDetailsType getTopRatedSellerDetails() {
	    return this.topRatedSellerDetails;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains top-rated seller program details for the seller.
     * 
     *
     * @param ebay.apis.eblbasecomponents.TopRatedSellerDetailsType
	 */
	public void setTopRatedSellerDetails(TopRatedSellerDetailsType topRatedSellerDetails) {
	    this.topRatedSellerDetails = topRatedSellerDetails;
	}
	/**
     * public getter
     *
     * 
     * The list of the sites where a seller has agreed to the cross-border recoupment terms.
     * <br><br>
     * Sellers who engage in cross-border trade on sites that require a recoupment agreement, must
     * agree to the recoupment terms before adding items to the site. This agreement allows eBay to
     * reimburse a buyer during a dispute and then recoup the cost from the seller.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.RecoupmentPolicyConsentType
	 */
	public RecoupmentPolicyConsentType getRecoupmentPolicyConsent() {
	    return this.recoupmentPolicyConsent;
	}
	
	/**
	 * public setter
	 *
     * 
     * The list of the sites where a seller has agreed to the cross-border recoupment terms.
     * <br><br>
     * Sellers who engage in cross-border trade on sites that require a recoupment agreement, must
     * agree to the recoupment terms before adding items to the site. This agreement allows eBay to
     * reimburse a buyer during a dispute and then recoup the cost from the seller.
     * 
     *
     * @param ebay.apis.eblbasecomponents.RecoupmentPolicyConsentType
	 */
	public void setRecoupmentPolicyConsent(RecoupmentPolicyConsentType recoupmentPolicyConsent) {
	    this.recoupmentPolicyConsent = recoupmentPolicyConsent;
	}
	/**
     * public getter
     *
     * 
     * If true, the seller has configured a domestic shipping rate table on the DE, UK or US website.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getDomesticRateTable() {
	    return this.domesticRateTable;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, the seller has configured a domestic shipping rate table on the DE, UK or US website.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setDomesticRateTable(Boolean domesticRateTable) {
	    this.domesticRateTable = domesticRateTable;
	}
	/**
     * public getter
     *
     * 
     * If true, the seller has configured an international shipping rate table on the DE or UK website.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getInternationalRateTable() {
	    return this.internationalRateTable;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, the seller has configured an international shipping rate table on the DE or UK website.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setInternationalRateTable(Boolean internationalRateTable) {
	    this.internationalRateTable = internationalRateTable;
	}
	/**
     * public getter
     *
     * 
     * This enumeration value indicates the current status of a DE or AT seller's account related to the new
     * eBay payment process.
     * <br><br>
     * 'AcceptedUA' is returned if the DE or AT seller has accepted the supplemental user agreement for the new
     * eBay payment process, but that same seller's account is not yet ramped up in the new eBay payment
     * process.
     * <br><br>
     * 'eBayPaymentProcessEnabled' is returned if the DE or AT seller has accepted the supplemental user
     * agreement for the new eBay payment process, and that same seller's account is ramped up in the new eBay
     * payment process.
     * <br><br>
     * 'MustAcceptUA' is returned if the DE or AT seller has not accepted the supplemental user agreement for
     * the new eBay payment process. If this is the case, the seller can find the URL to the supplemental user
     * agreement in the <b>SellereBayPaymentProcessConsent.UserAgreementInfo.UserAgreementURL</b>
     * field.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SellereBayPaymentProcessStatusCodeType
	 */
	public SellereBayPaymentProcessStatusCodeType getSellereBayPaymentProcessStatus() {
	    return this.sellereBayPaymentProcessStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * This enumeration value indicates the current status of a DE or AT seller's account related to the new
     * eBay payment process.
     * <br><br>
     * 'AcceptedUA' is returned if the DE or AT seller has accepted the supplemental user agreement for the new
     * eBay payment process, but that same seller's account is not yet ramped up in the new eBay payment
     * process.
     * <br><br>
     * 'eBayPaymentProcessEnabled' is returned if the DE or AT seller has accepted the supplemental user
     * agreement for the new eBay payment process, and that same seller's account is ramped up in the new eBay
     * payment process.
     * <br><br>
     * 'MustAcceptUA' is returned if the DE or AT seller has not accepted the supplemental user agreement for
     * the new eBay payment process. If this is the case, the seller can find the URL to the supplemental user
     * agreement in the <b>SellereBayPaymentProcessConsent.UserAgreementInfo.UserAgreementURL</b>
     * field.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SellereBayPaymentProcessStatusCodeType
	 */
	public void setSellereBayPaymentProcessStatus(SellereBayPaymentProcessStatusCodeType sellereBayPaymentProcessStatus) {
	    this.sellereBayPaymentProcessStatus = sellereBayPaymentProcessStatus;
	}
	/**
     * public getter
     *
     * 
     * This container is returned to all DE and AT sellers and consists of details of the seller's account status
     * regarding the new eBay payment process. This information includes the seller's payout preferences and
     * whether or not the seller has accepted the supplemental user agreement for the new eBay payment process.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SellereBayPaymentProcessConsentCodeType
	 */
	public SellereBayPaymentProcessConsentCodeType getSellereBayPaymentProcessConsent() {
	    return this.sellereBayPaymentProcessConsent;
	}
	
	/**
	 * public setter
	 *
     * 
     * This container is returned to all DE and AT sellers and consists of details of the seller's account status
     * regarding the new eBay payment process. This information includes the seller's payout preferences and
     * whether or not the seller has accepted the supplemental user agreement for the new eBay payment process.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SellereBayPaymentProcessConsentCodeType
	 */
	public void setSellereBayPaymentProcessConsent(SellereBayPaymentProcessConsentCodeType sellereBayPaymentProcessConsent) {
	    this.sellereBayPaymentProcessConsent = sellereBayPaymentProcessConsent;
	}

}