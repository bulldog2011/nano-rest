// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * 
 * Retrieves publicly available data for a single listing.
 * Use this call to retrieve most of the information that is visible
 * on a listing's View Item page on the eBay Web site,
 * such as title, description, prices, basic seller and bidder information,
 * and other details about the listing.Also returns basic
 * shipping costs. For more shipping details, use GetShippingCosts.
 * 
 */
@RootElement(name = "GetSingleItemRequest", namespace = "urn:ebay:apis:eBLBaseComponents")
public class GetSingleItemRequestType extends AbstractRequestType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "ItemID")
	private String itemID;
	
	@Element(name = "VariationSKU")
	private String variationSKU;
	
	@Element(name = "VariationSpecifics")
	private NameValueListArrayType variationSpecifics;
	
	@Element(name = "IncludeSelector")
	private String includeSelector;
	
    
	/**
     * public getter
     *
     * 
     * The item ID that uniquely identifies the item listing
     * for which to retrieve the data.<br>
     * <br>
     * You can determine an item's ID by calling findItemsAdvanced (<a 
     * href="http://www.developer.ebay.com/DevZone/finding/CallRef/index.html" 
     * >Finding API</a>) or from the  eBay Web site.
     * 
     *
     * @returns java.lang.String
	 */
	public String getItemID() {
	    return this.itemID;
	}
	
	/**
	 * public setter
	 *
     * 
     * The item ID that uniquely identifies the item listing
     * for which to retrieve the data.<br>
     * <br>
     * You can determine an item's ID by calling findItemsAdvanced (<a 
     * href="http://www.developer.ebay.com/DevZone/finding/CallRef/index.html" 
     * >Finding API</a>) or from the  eBay Web site.
     * 
     *
     * @param java.lang.String
	 */
	public void setItemID(String itemID) {
	    this.itemID = itemID;
	}
	/**
     * public getter
     *
     * 
     * Variation-level SKU that uniquely identifes a variation within
     * the listing identified by ItemID. Only applicable when the 
     * seller included variation-level SKU (Variation.SKU)
     * values. Retrieves all the usual Item fields, but limits the
     * Variations content to the specified variation.
     * If not specified, the response includes all variations.
     * 
     *
     * @returns java.lang.String
	 */
	public String getVariationSKU() {
	    return this.variationSKU;
	}
	
	/**
	 * public setter
	 *
     * 
     * Variation-level SKU that uniquely identifes a variation within
     * the listing identified by ItemID. Only applicable when the 
     * seller included variation-level SKU (Variation.SKU)
     * values. Retrieves all the usual Item fields, but limits the
     * Variations content to the specified variation.
     * If not specified, the response includes all variations.
     * 
     *
     * @param java.lang.String
	 */
	public void setVariationSKU(String variationSKU) {
	    this.variationSKU = variationSKU;
	}
	/**
     * public getter
     *
     * 
     * Name-value pairs that identify one or more variations within the 
     * listing identified by ItemID. Only applicable when the seller
     * listed the item with variations. Retrieves all the usual Item 
     * fields, but limits the Variations content to the specified 
     * variation(s). If the specified pairs do not match any variation, 
     * eBay returns all variations.<br>
     * <br>
     * To retrieve only one variation, specify the full set of 
     * name/value pairs that match all the name-value pairs of one 
     * variation. <br>
     * <br>
     * To retrieve multiple variations (using a wildcard), 
     * specify one or more name/value pairs that partially match the
     * desired variations. For example, if the listing contains 
     * variations for shirts in different colors and sizes, specify 
     * Color as Red (and no other name/value pairs) to retrieve 
     * all the red shirts in all sizes (but no other colors).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.NameValueListArrayType
	 */
	public NameValueListArrayType getVariationSpecifics() {
	    return this.variationSpecifics;
	}
	
	/**
	 * public setter
	 *
     * 
     * Name-value pairs that identify one or more variations within the 
     * listing identified by ItemID. Only applicable when the seller
     * listed the item with variations. Retrieves all the usual Item 
     * fields, but limits the Variations content to the specified 
     * variation(s). If the specified pairs do not match any variation, 
     * eBay returns all variations.<br>
     * <br>
     * To retrieve only one variation, specify the full set of 
     * name/value pairs that match all the name-value pairs of one 
     * variation. <br>
     * <br>
     * To retrieve multiple variations (using a wildcard), 
     * specify one or more name/value pairs that partially match the
     * desired variations. For example, if the listing contains 
     * variations for shirts in different colors and sizes, specify 
     * Color as Red (and no other name/value pairs) to retrieve 
     * all the red shirts in all sizes (but no other colors).
     * 
     *
     * @param ebay.apis.eblbasecomponents.NameValueListArrayType
	 */
	public void setVariationSpecifics(NameValueListArrayType variationSpecifics) {
	    this.variationSpecifics = variationSpecifics;
	}
	/**
     * public getter
     *
     * 
     * Defines standard subsets of fields to return within the
     * response.<br>
     * <br>
     * If you don't specify this field, the call returns a default
     * set of fields (see the "Detail Controls" link below). If you specify this field, the additional
     * fields you retrieve can affect the call's response time
     * (performance).<br>
     * <br>
     * <b>Applicable values</b>:
     * <p class="ename">&bull;&nbsp;&nbsp; Details</p>
     *   <p class="edef">Include most available fields in the
     *   response (except fields that significantly affect the call's
     *   performance).</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Description</p>
     *   <p class="edef">Include the Description field in the response. (This can affect the call's performance.)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; TextDescription</p>
     *   <p class="edef">Include the text Description(no html tag) field in the response. (This can affect the call's performance.)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; ShippingCosts</p>
     *   <p class="edef">Include basic shipping costs in the
     *   response. (Use GetShippingCosts to retrieve more
     *   details.)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; ItemSpecifics</p>
     * <p class="edef">Include ItemSpecifics in the response.</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Variations</p>
     * <p class="edef">Include Variations in the response.</p>
     * <br>
     * <br>
     * Use a comma to specify multiple values. (In this case,
     * the results are cumulative.) See "GetSingleItem Samples"
     * for an example of how to use this field.<br>
     * <br>
     * See "Detail Controls" for a complete list of
     * fields that can be returned for each selector.
     * 
     *
     * @returns java.lang.String
	 */
	public String getIncludeSelector() {
	    return this.includeSelector;
	}
	
	/**
	 * public setter
	 *
     * 
     * Defines standard subsets of fields to return within the
     * response.<br>
     * <br>
     * If you don't specify this field, the call returns a default
     * set of fields (see the "Detail Controls" link below). If you specify this field, the additional
     * fields you retrieve can affect the call's response time
     * (performance).<br>
     * <br>
     * <b>Applicable values</b>:
     * <p class="ename">&bull;&nbsp;&nbsp; Details</p>
     *   <p class="edef">Include most available fields in the
     *   response (except fields that significantly affect the call's
     *   performance).</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Description</p>
     *   <p class="edef">Include the Description field in the response. (This can affect the call's performance.)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; TextDescription</p>
     *   <p class="edef">Include the text Description(no html tag) field in the response. (This can affect the call's performance.)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; ShippingCosts</p>
     *   <p class="edef">Include basic shipping costs in the
     *   response. (Use GetShippingCosts to retrieve more
     *   details.)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; ItemSpecifics</p>
     * <p class="edef">Include ItemSpecifics in the response.</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Variations</p>
     * <p class="edef">Include Variations in the response.</p>
     * <br>
     * <br>
     * Use a comma to specify multiple values. (In this case,
     * the results are cumulative.) See "GetSingleItem Samples"
     * for an example of how to use this field.<br>
     * <br>
     * See "Detail Controls" for a complete list of
     * fields that can be returned for each selector.
     * 
     *
     * @param java.lang.String
	 */
	public void setIncludeSelector(String includeSelector) {
	    this.includeSelector = includeSelector;
	}

}