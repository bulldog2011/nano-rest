// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * 
 *         Contains the data for a user who is interested in bidding on items in a Live Auctions catalog.
 * 
 */
public class BidderDetailType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "UserID")
	private String userID;
	
	@Element(name = "Email")
	private String email;
	
	@Element(name = "FeedbackScore")
	private Integer feedbackScore;
	
	@Element(name = "UniqueNegativeFeedbackCount")
	private Integer uniqueNegativeFeedbackCount;
	
	@Element(name = "UniquePositiveFeedbackCount")
	private Integer uniquePositiveFeedbackCount;
	
	@Element(name = "UniqueNeutralFeedbackCount")
	private Integer uniqueNeutralFeedbackCount;
	
    
	/**
     * public getter
     *
     * 
     * ID of the user requesting approval.
     * 
     *
     * @returns java.lang.String
	 */
	public String getUserID() {
	    return this.userID;
	}
	
	/**
	 * public setter
	 *
     * 
     * ID of the user requesting approval.
     * 
     *
     * @param java.lang.String
	 */
	public void setUserID(String userID) {
	    this.userID = userID;
	}
	/**
     * public getter
     *
     * 
     * E-mail address of the bidder.
     * You cannot retrieve an email address for any user with whom
     * you do not have an order relationship, regardless of
     * site. Email is only returned for applicable calls when you
     * are retrieving your own user data OR when you and the other
     * user are in an order relationship and the call is
     * being executed within a certain amount of time after the
     * order line item is created.
     * Returned as CDATA. When an email address can not be returned,
     * the string "Invalid Request" is returned instead.
     * 
     *
     * @returns java.lang.String
	 */
	public String getEmail() {
	    return this.email;
	}
	
	/**
	 * public setter
	 *
     * 
     * E-mail address of the bidder.
     * You cannot retrieve an email address for any user with whom
     * you do not have an order relationship, regardless of
     * site. Email is only returned for applicable calls when you
     * are retrieving your own user data OR when you and the other
     * user are in an order relationship and the call is
     * being executed within a certain amount of time after the
     * order line item is created.
     * Returned as CDATA. When an email address can not be returned,
     * the string "Invalid Request" is returned instead.
     * 
     *
     * @param java.lang.String
	 */
	public void setEmail(String email) {
	    this.email = email;
	}
	/**
     * public getter
     *
     * 
     * Aggegate feedback score for the specified user.
     * Feedback score is only return if the user has not chosen to make his
     * or her feeback private.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getFeedbackScore() {
	    return this.feedbackScore;
	}
	
	/**
	 * public setter
	 *
     * 
     * Aggegate feedback score for the specified user.
     * Feedback score is only return if the user has not chosen to make his
     * or her feeback private.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setFeedbackScore(Integer feedbackScore) {
	    this.feedbackScore = feedbackScore;
	}
	/**
     * public getter
     *
     * 
     * Total count of negative Feedback entries received by the user, including weekly repeats.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getUniqueNegativeFeedbackCount() {
	    return this.uniqueNegativeFeedbackCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Total count of negative Feedback entries received by the user, including weekly repeats.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setUniqueNegativeFeedbackCount(Integer uniqueNegativeFeedbackCount) {
	    this.uniqueNegativeFeedbackCount = uniqueNegativeFeedbackCount;
	}
	/**
     * public getter
     *
     * 
     * Total count of positive Feedback entries received by the user, including weekly repeats.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getUniquePositiveFeedbackCount() {
	    return this.uniquePositiveFeedbackCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Total count of positive Feedback entries received by the user, including weekly repeats.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setUniquePositiveFeedbackCount(Integer uniquePositiveFeedbackCount) {
	    this.uniquePositiveFeedbackCount = uniquePositiveFeedbackCount;
	}
	/**
     * public getter
     *
     * 
     * Total count of neutral Feedback entries received by the user, including weekly repeats.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getUniqueNeutralFeedbackCount() {
	    return this.uniqueNeutralFeedbackCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Total count of neutral Feedback entries received by the user, including weekly repeats.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setUniqueNeutralFeedbackCount(Integer uniqueNeutralFeedbackCount) {
	    this.uniqueNeutralFeedbackCount = uniqueNeutralFeedbackCount;
	}

}