// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * Enables a seller to send an order invoice to a buyer. Where applicable, updates to shipping, payment methods, and sales tax made in this request are applied to the specified order as a whole and to the individual order line items whose data are stored in individual <b>Transaction</b> objects.
 * 
 */
@RootElement(name = "SendInvoiceRequest", namespace = "urn:ebay:apis:eBLBaseComponents")
public class SendInvoiceRequestType extends AbstractRequestType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "ItemID")
	private String itemID;
	
	@Element(name = "TransactionID")
	private String transactionID;
	
	@Element(name = "OrderID")
	private String orderID;
	
	@Element(name = "InternationalShippingServiceOptions")
	private List<InternationalShippingServiceOptionsType> internationalShippingServiceOptions;
	
	@Element(name = "ShippingServiceOptions")
	private List<ShippingServiceOptionsType> shippingServiceOptions;
	
	@Element(name = "SalesTax")
	private SalesTaxType salesTax;
	
	@Element(name = "InsuranceOption")
	private InsuranceOptionCodeType insuranceOption;
	
	@Element(name = "InsuranceFee")
	private AmountType insuranceFee;
	
	@Element(name = "PaymentMethods")
	private List<BuyerPaymentMethodCodeType> paymentMethods;
	
	@Element(name = "PayPalEmailAddress")
	private String payPalEmailAddress;
	
	@Element(name = "CheckoutInstructions")
	private String checkoutInstructions;
	
	@Element(name = "EmailCopyToSeller")
	private Boolean emailCopyToSeller;
	
	@Element(name = "CODCost")
	private AmountType codCost;
	
	@Element(name = "SKU")
	private String sku;
	
	@Element(name = "OrderLineItemID")
	private String orderLineItemID;
	
    
	/**
     * public getter
     *
     * 
     * Unique identifier for an eBay item listing. Unless <b>OrderID</b> or
     * <b>OrderLineItemID</b> is provided in the request, the <b>ItemID</b> (or <b>SKU</b>) is
     * required and must be paired with the corresponding <b>TransactionID</b> to
     * identify a single line item order. For a multiple line item (Combined
     * Payment) order, <b>OrderID</b> should be used.
     * 
     *
     * @returns java.lang.String
	 */
	public String getItemID() {
	    return this.itemID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Unique identifier for an eBay item listing. Unless <b>OrderID</b> or
     * <b>OrderLineItemID</b> is provided in the request, the <b>ItemID</b> (or <b>SKU</b>) is
     * required and must be paired with the corresponding <b>TransactionID</b> to
     * identify a single line item order. For a multiple line item (Combined
     * Payment) order, <b>OrderID</b> should be used.
     * 
     *
     * @param java.lang.String
	 */
	public void setItemID(String itemID) {
	    this.itemID = itemID;
	}
	/**
     * public getter
     *
     * 
     * Unique identifier for an eBay order line item (transaction). An order
     * line item is created once there is a commitment from a buyer to purchase
     * an item. Since an auction listing can only have one order line item
     * during the duration of the listing, the <b>TransactionID</b> for
     * auction listings is always 0. Unless <b>OrderID</b> or <b>OrderLineItemID</b> is
     * provided in the request, the <b>TransactionID</b> is required and must be
     * paired with the corresponding <b>ItemID</b> to identify a single line item
     * order. For a multiple line item (Combined Payment) order, <b>OrderID</b> should
     * be used.
     * 
     *
     * @returns java.lang.String
	 */
	public String getTransactionID() {
	    return this.transactionID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Unique identifier for an eBay order line item (transaction). An order
     * line item is created once there is a commitment from a buyer to purchase
     * an item. Since an auction listing can only have one order line item
     * during the duration of the listing, the <b>TransactionID</b> for
     * auction listings is always 0. Unless <b>OrderID</b> or <b>OrderLineItemID</b> is
     * provided in the request, the <b>TransactionID</b> is required and must be
     * paired with the corresponding <b>ItemID</b> to identify a single line item
     * order. For a multiple line item (Combined Payment) order, <b>OrderID</b> should
     * be used.
     * 
     *
     * @param java.lang.String
	 */
	public void setTransactionID(String transactionID) {
	    this.transactionID = transactionID;
	}
	/**
     * public getter
     *
     * 
     * A unique identifier that identifies a single line item or multiple line
     * item (Combined Payment) orders.
     * <br><br>
     * For a single line item order, the <b>OrderID</b> value is identical to the
     * <b>OrderLineItemID</b> value that is generated upon creation of the order line
     * item. For a Combined Payment order, the <b>OrderID</b> value is created by eBay
     * when the buyer or seller (sharing multiple, common order line items)
     * combines multiple order line items into a Combined Payment order. A
     * Combined Payment order can also be created by the seller through the
     * <b>AddOrder</b> call.
     * <br><br>
     * Unless the <b>ItemID</b> (or SKU) and corresponding <b>TransactionID</b>, or the
     * <b>OrderLineItemID</b> is provided in the request to identify a single line
     * item order, the <b>OrderID</b> must be specified. If <b>OrderID</b> is specified,
     * <b>OrderLineItemID</b>, <b>ItemID</b>, <b>TransactionID</b>, and <b>SKU</b> are ignored if present
     * in the same request.
     * 
     *
     * @returns java.lang.String
	 */
	public String getOrderID() {
	    return this.orderID;
	}
	
	/**
	 * public setter
	 *
     * 
     * A unique identifier that identifies a single line item or multiple line
     * item (Combined Payment) orders.
     * <br><br>
     * For a single line item order, the <b>OrderID</b> value is identical to the
     * <b>OrderLineItemID</b> value that is generated upon creation of the order line
     * item. For a Combined Payment order, the <b>OrderID</b> value is created by eBay
     * when the buyer or seller (sharing multiple, common order line items)
     * combines multiple order line items into a Combined Payment order. A
     * Combined Payment order can also be created by the seller through the
     * <b>AddOrder</b> call.
     * <br><br>
     * Unless the <b>ItemID</b> (or SKU) and corresponding <b>TransactionID</b>, or the
     * <b>OrderLineItemID</b> is provided in the request to identify a single line
     * item order, the <b>OrderID</b> must be specified. If <b>OrderID</b> is specified,
     * <b>OrderLineItemID</b>, <b>ItemID</b>, <b>TransactionID</b>, and <b>SKU</b> are ignored if present
     * in the same request.
     * 
     *
     * @param java.lang.String
	 */
	public void setOrderID(String orderID) {
	    this.orderID = orderID;
	}
	/**
     * public getter
     *
     * 
     * If the buyer has an International shipping address, use this container
     * to offer up to three International shipping services. If International
     * shipping services are offered, (domestic) <b>ShippingServiceOptions</b> should
     * not be included in the request.
     * <br><br>
     * <span class="tablenote"><b>Note:</b>
     * Beginning with Version 719, the number of domestic and international
     * shipping services that a seller may offer the buyer is increasing. The
     * number of domestic shipping services that may be offered is increasing from
     * 3 to 4, and the number of international shipping service options is
     * increasing from 3 to 5.
     * </span>
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.InternationalShippingServiceOptionsType>
	 */
	public List<InternationalShippingServiceOptionsType> getInternationalShippingServiceOptions() {
	    return this.internationalShippingServiceOptions;
	}
	
	/**
	 * public setter
	 *
     * 
     * If the buyer has an International shipping address, use this container
     * to offer up to three International shipping services. If International
     * shipping services are offered, (domestic) <b>ShippingServiceOptions</b> should
     * not be included in the request.
     * <br><br>
     * <span class="tablenote"><b>Note:</b>
     * Beginning with Version 719, the number of domestic and international
     * shipping services that a seller may offer the buyer is increasing. The
     * number of domestic shipping services that may be offered is increasing from
     * 3 to 4, and the number of international shipping service options is
     * increasing from 3 to 5.
     * </span>
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.InternationalShippingServiceOptionsType>
	 */
	public void setInternationalShippingServiceOptions(List<InternationalShippingServiceOptionsType> internationalShippingServiceOptions) {
	    this.internationalShippingServiceOptions = internationalShippingServiceOptions;
	}
	/**
     * public getter
     *
     * 
     * If the buyer has a domestic shipping address, use this container
     * to offer up to three domestic shipping services. If domestic
     * shipping services are offered, <b>InternationalShippingServiceOptions</b> should
     * not be included in the request.
     * <br><br>
     * <span class="tablenote"><b>Note:</b>
     * Beginning with Version 719, the number of domestic and international
     * shipping services that a seller may offer the buyer is increasing. The
     * number of domestic shipping services that may be offered is increasing from
     * 3 to 4, and the number of international shipping service options is
     * increasing from 3 to 5.
     * </span>
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.ShippingServiceOptionsType>
	 */
	public List<ShippingServiceOptionsType> getShippingServiceOptions() {
	    return this.shippingServiceOptions;
	}
	
	/**
	 * public setter
	 *
     * 
     * If the buyer has a domestic shipping address, use this container
     * to offer up to three domestic shipping services. If domestic
     * shipping services are offered, <b>InternationalShippingServiceOptions</b> should
     * not be included in the request.
     * <br><br>
     * <span class="tablenote"><b>Note:</b>
     * Beginning with Version 719, the number of domestic and international
     * shipping services that a seller may offer the buyer is increasing. The
     * number of domestic shipping services that may be offered is increasing from
     * 3 to 4, and the number of international shipping service options is
     * increasing from 3 to 5.
     * </span>
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.ShippingServiceOptionsType>
	 */
	public void setShippingServiceOptions(List<ShippingServiceOptionsType> shippingServiceOptions) {
	    this.shippingServiceOptions = shippingServiceOptions;
	}
	/**
     * public getter
     *
     * 
     * Container consisting of sales tax details. The amount of sales tax to
     * add to the price of an order is dependent on the sales tax rate in the
     * buyer's state and whether sales tax is being applied to the cost of the
     * order only or the cost of the order plus shipping.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SalesTaxType
	 */
	public SalesTaxType getSalesTax() {
	    return this.salesTax;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of sales tax details. The amount of sales tax to
     * add to the price of an order is dependent on the sales tax rate in the
     * buyer's state and whether sales tax is being applied to the cost of the
     * order only or the cost of the order plus shipping.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SalesTaxType
	 */
	public void setSalesTax(SalesTaxType salesTax) {
	    this.salesTax = salesTax;
	}
	/**
     * public getter
     *
     * 
     * Specifies whether an insurance fee is required. An <b>InsuranceOption</b> value of
     * <b>IncludedInShippingHandling</b> cannot be used if the item will use calculated
     * shipping. Some shipping carriers automatically include shipping insurance
     * for qualifying items.<br>
     * 
     *
     * @returns ebay.apis.eblbasecomponents.InsuranceOptionCodeType
	 */
	public InsuranceOptionCodeType getInsuranceOption() {
	    return this.insuranceOption;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies whether an insurance fee is required. An <b>InsuranceOption</b> value of
     * <b>IncludedInShippingHandling</b> cannot be used if the item will use calculated
     * shipping. Some shipping carriers automatically include shipping insurance
     * for qualifying items.<br>
     * 
     *
     * @param ebay.apis.eblbasecomponents.InsuranceOptionCodeType
	 */
	public void setInsuranceOption(InsuranceOptionCodeType insuranceOption) {
	    this.insuranceOption = insuranceOption;
	}
	/**
     * public getter
     *
     * Insurance cost, as set by seller, if ShippingType = 1.
     * Specify if <b>InsuranceOption</b> is optional or required. Must
     * be greater than zero value if a value of Optional or Required is passed in
     * <b>InsuranceOption</b>. Value specified should be the total cost of insuring the
     * item.<br>
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getInsuranceFee() {
	    return this.insuranceFee;
	}
	
	/**
	 * public setter
	 *
     * Insurance cost, as set by seller, if ShippingType = 1.
     * Specify if <b>InsuranceOption</b> is optional or required. Must
     * be greater than zero value if a value of Optional or Required is passed in
     * <b>InsuranceOption</b>. Value specified should be the total cost of insuring the
     * item.<br>
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setInsuranceFee(AmountType insuranceFee) {
	    this.insuranceFee = insuranceFee;
	}
	/**
     * public getter
     *
     * 
     * This optional field allows a US or German seller to add specific payment
     * methods that were not in the original item listing. The only valid values
     * for this field are 'PayPal' for a US listing, or
     * 'MoneyXferAcceptedInCheckout' (CIP+) for a DE listing.
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.BuyerPaymentMethodCodeType>
	 */
	public List<BuyerPaymentMethodCodeType> getPaymentMethods() {
	    return this.paymentMethods;
	}
	
	/**
	 * public setter
	 *
     * 
     * This optional field allows a US or German seller to add specific payment
     * methods that were not in the original item listing. The only valid values
     * for this field are 'PayPal' for a US listing, or
     * 'MoneyXferAcceptedInCheckout' (CIP+) for a DE listing.
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.BuyerPaymentMethodCodeType>
	 */
	public void setPaymentMethods(List<BuyerPaymentMethodCodeType> paymentMethods) {
	    this.paymentMethods = paymentMethods;
	}
	/**
     * public getter
     *
     * 
     * If the <b>PaymentMethods</b> field is used and set to PayPal, the seller
     * provides his/her PayPal email address in this field.
     * 
     *
     * @returns java.lang.String
	 */
	public String getPayPalEmailAddress() {
	    return this.payPalEmailAddress;
	}
	
	/**
	 * public setter
	 *
     * 
     * If the <b>PaymentMethods</b> field is used and set to PayPal, the seller
     * provides his/her PayPal email address in this field.
     * 
     *
     * @param java.lang.String
	 */
	public void setPayPalEmailAddress(String payPalEmailAddress) {
	    this.payPalEmailAddress = payPalEmailAddress;
	}
	/**
     * public getter
     *
     * 
     *  This field allows the seller to provide a message or instructions
     *  regarding checkout/payment or the return policy.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCheckoutInstructions() {
	    return this.checkoutInstructions;
	}
	
	/**
	 * public setter
	 *
     * 
     *  This field allows the seller to provide a message or instructions
     *  regarding checkout/payment or the return policy.
     * 
     *
     * @param java.lang.String
	 */
	public void setCheckoutInstructions(String checkoutInstructions) {
	    this.checkoutInstructions = checkoutInstructions;
	}
	/**
     * public getter
     *
     * 
     * Flag indicating whether or not the seller wishes to receive an email copy of
     * the invoice sent to the buyer.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getEmailCopyToSeller() {
	    return this.emailCopyToSeller;
	}
	
	/**
	 * public setter
	 *
     * 
     * Flag indicating whether or not the seller wishes to receive an email copy of
     * the invoice sent to the buyer.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setEmailCopyToSeller(Boolean emailCopyToSeller) {
	    this.emailCopyToSeller = emailCopyToSeller;
	}
	/**
     * public getter
     *
     * 
     * Italy site (site ID 101) only.
     * Enables you to specify the cash-on-delivery (COD) cost for COD shipping.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getCodCost() {
	    return this.codCost;
	}
	
	/**
	 * public setter
	 *
     * 
     * Italy site (site ID 101) only.
     * Enables you to specify the cash-on-delivery (COD) cost for COD shipping.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setCodCost(AmountType codCost) {
	    this.codCost = codCost;
	}
	/**
     * public getter
     *
     * 
     * The seller's unique identifier for an item that is being tracked by this
     * SKU. If <b>OrderID</b> or <b>OrderLineItemID</b> are not provided, both <b>SKU</b> (or
     * <b>ItemID</b>) and corresponding <b>TransactionID</b> must be provided to uniquely
     * identify a single line item order. For a multiple line item (Combined
     * Payment) order, <b>OrderID</b> must be used.
     * <br>
     * <br>
     * This field can only be used if the <b>Item.InventoryTrackingMethod</b> field
     * (set with the <b>AddFixedPriceItem</b> or <b>RelistFixedPriceItem</b> calls) is set to
     * SKU.
     * 
     *
     * @returns java.lang.String
	 */
	public String getSku() {
	    return this.sku;
	}
	
	/**
	 * public setter
	 *
     * 
     * The seller's unique identifier for an item that is being tracked by this
     * SKU. If <b>OrderID</b> or <b>OrderLineItemID</b> are not provided, both <b>SKU</b> (or
     * <b>ItemID</b>) and corresponding <b>TransactionID</b> must be provided to uniquely
     * identify a single line item order. For a multiple line item (Combined
     * Payment) order, <b>OrderID</b> must be used.
     * <br>
     * <br>
     * This field can only be used if the <b>Item.InventoryTrackingMethod</b> field
     * (set with the <b>AddFixedPriceItem</b> or <b>RelistFixedPriceItem</b> calls) is set to
     * SKU.
     * 
     *
     * @param java.lang.String
	 */
	public void setSku(String sku) {
	    this.sku = sku;
	}
	/**
     * public getter
     *
     * 
     * A unique identifier for an eBay order line item. This field is created
     * as soon as there is a commitment to buy from the seller, and its value
     * is based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a
     * hyphen in between these two IDs.
     * <br>
     * <br>
     * Unless the <b>ItemID</b> (or <b>SKU</b>) and corresponding <b>TransactionID</b> is used to
     * identify a single line item order, or the <b>OrderID</b> is used to identify a
     * single or multiple line item (Combined Payment) order, the
     * <b>OrderLineItemID</b> must be specified. For a multiple line item (Combined
     * Payment) order, <b>OrderID</b> should be used. If <b>OrderLineItemID</b> is specified,
     * <b>ItemID</b>, <b>TransactionID</b>, and <b>SKU</b> are ignored if present in the same
     * request.
     * 
     *
     * @returns java.lang.String
	 */
	public String getOrderLineItemID() {
	    return this.orderLineItemID;
	}
	
	/**
	 * public setter
	 *
     * 
     * A unique identifier for an eBay order line item. This field is created
     * as soon as there is a commitment to buy from the seller, and its value
     * is based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a
     * hyphen in between these two IDs.
     * <br>
     * <br>
     * Unless the <b>ItemID</b> (or <b>SKU</b>) and corresponding <b>TransactionID</b> is used to
     * identify a single line item order, or the <b>OrderID</b> is used to identify a
     * single or multiple line item (Combined Payment) order, the
     * <b>OrderLineItemID</b> must be specified. For a multiple line item (Combined
     * Payment) order, <b>OrderID</b> should be used. If <b>OrderLineItemID</b> is specified,
     * <b>ItemID</b>, <b>TransactionID</b>, and <b>SKU</b> are ignored if present in the same
     * request.
     * 
     *
     * @param java.lang.String
	 */
	public void setOrderLineItemID(String orderLineItemID) {
	    this.orderLineItemID = orderLineItemID;
	}

}