// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

/**
 * 
 * Contains the data for primary and secondary contact hours for a given eBay user.
 * 
 */
public class ContactHoursDetailsType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "TimeZoneID")
	private String timeZoneID;
	
	@Element(name = "Hours1Days")
	private DaysCodeType hours1Days;
	
	@Element(name = "Hours1AnyTime")
	private Boolean hours1AnyTime;
	
	@Element(name = "Hours1From")
	private Date hours1From;
	
	@Element(name = "Hours1To")
	private Date hours1To;
	
	@Element(name = "Hours2Days")
	private DaysCodeType hours2Days;
	
	@Element(name = "Hours2AnyTime")
	private Boolean hours2AnyTime;
	
	@Element(name = "Hours2From")
	private Date hours2From;
	
	@Element(name = "Hours2To")
	private Date hours2To;
	
    
	/**
     * public getter
     *
     * 
     * Indicates the local time zone of the values provided for Hours1From/Hours1To
     * and Hours2From/Hours2To. If you specify a contact hours time range with
     * Hours1From and Hours1To, you must provide a local time zone.
     * To retrieve a complete list of the TimeZoneID values
     * supported by eBay, call <b>GeteBayDetails</b> with <b>DetailName</b> 
     * set to <b>TimeZoneDetails</b>.
     * 
     *
     * @returns java.lang.String
	 */
	public String getTimeZoneID() {
	    return this.timeZoneID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the local time zone of the values provided for Hours1From/Hours1To
     * and Hours2From/Hours2To. If you specify a contact hours time range with
     * Hours1From and Hours1To, you must provide a local time zone.
     * To retrieve a complete list of the TimeZoneID values
     * supported by eBay, call <b>GeteBayDetails</b> with <b>DetailName</b> 
     * set to <b>TimeZoneDetails</b>.
     * 
     *
     * @param java.lang.String
	 */
	public void setTimeZoneID(String timeZoneID) {
	    this.timeZoneID = timeZoneID;
	}
	/**
     * public getter
     *
     * 
     * Indicates the range of days for which the primary contact hours
     * specified by Hours1AnyTime or Hours1From and Hours1To apply.
     * If a value of None is provided for this field, the values provided for
     * Hours1AnyTime, Hours1From, Hours1To are ignored.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.DaysCodeType
	 */
	public DaysCodeType getHours1Days() {
	    return this.hours1Days;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the range of days for which the primary contact hours
     * specified by Hours1AnyTime or Hours1From and Hours1To apply.
     * If a value of None is provided for this field, the values provided for
     * Hours1AnyTime, Hours1From, Hours1To are ignored.
     * 
     *
     * @param ebay.apis.eblbasecomponents.DaysCodeType
	 */
	public void setHours1Days(DaysCodeType hours1Days) {
	    this.hours1Days = hours1Days;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether or not a user is available to be contacted 24 hours a day
     * during the range of days specified using the Hours1Days element.
     * True indicates the user is available 24 hours a day, false indicates otherwise.
     * In the case of this field being true, all values provided for Hours1From and
     * Hours1To will be ignored.  In the case of this field being false,
     * the values provided Hours1From and Hours1To will be considered.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getHours1AnyTime() {
	    return this.hours1AnyTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether or not a user is available to be contacted 24 hours a day
     * during the range of days specified using the Hours1Days element.
     * True indicates the user is available 24 hours a day, false indicates otherwise.
     * In the case of this field being true, all values provided for Hours1From and
     * Hours1To will be ignored.  In the case of this field being false,
     * the values provided Hours1From and Hours1To will be considered.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setHours1AnyTime(Boolean hours1AnyTime) {
	    this.hours1AnyTime = hours1AnyTime;
	}
	/**
     * public getter
     *
     * 
     * Indicates the starting time of day this eBay user is available for other eBay
     * members to contact for the range of days specified using Hours1Days.
     * Enter times in 30 minute increments from the top of the hour. That is, enter
     * values either on the hour (:00) or 30 minutes past the hour (:30).
     * Other values will be will be rounded down to the next closest 30 minute
     * increment. Times entered should be local to the value provided for TimeZoneID.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getHours1From() {
	    return this.hours1From;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the starting time of day this eBay user is available for other eBay
     * members to contact for the range of days specified using Hours1Days.
     * Enter times in 30 minute increments from the top of the hour. That is, enter
     * values either on the hour (:00) or 30 minutes past the hour (:30).
     * Other values will be will be rounded down to the next closest 30 minute
     * increment. Times entered should be local to the value provided for TimeZoneID.
     * 
     *
     * @param java.util.Date
	 */
	public void setHours1From(Date hours1From) {
	    this.hours1From = hours1From;
	}
	/**
     * public getter
     *
     * 
     * Indicates the ending time of day this eBay user is available for other eBay
     * members to contact them for the range of days specified using Hours1Days.
     * Enter times in 30 minute increments from the top of the hour. That is, enter
     * values either on the hour (:00) or 30 minutes past the hour (:30).
     * Other values will be will be rounded down to the next closest 30 minute
     * increment. Times entered should be local to the value provided for TimeZoneID.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getHours1To() {
	    return this.hours1To;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the ending time of day this eBay user is available for other eBay
     * members to contact them for the range of days specified using Hours1Days.
     * Enter times in 30 minute increments from the top of the hour. That is, enter
     * values either on the hour (:00) or 30 minutes past the hour (:30).
     * Other values will be will be rounded down to the next closest 30 minute
     * increment. Times entered should be local to the value provided for TimeZoneID.
     * 
     *
     * @param java.util.Date
	 */
	public void setHours1To(Date hours1To) {
	    this.hours1To = hours1To;
	}
	/**
     * public getter
     *
     * 
     * Indicates the range of days for which the secondary contact hours
     * specified by Hours2AnyTime or Hours2From and Hours2To apply.
     * If a value of None is provided for this field, the values provided for
     * Hours2AnyTime, Hours2From, Hours2To are ignored.
     * <br>
     * <b>Note:</b> You cannot set Hours2Days to EveryDay. If Hours1Days
     * is set to EveryDay, secondary contact hours do not apply. Hours2Days cannot be
     * set to the same value as Hours1Days.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.DaysCodeType
	 */
	public DaysCodeType getHours2Days() {
	    return this.hours2Days;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the range of days for which the secondary contact hours
     * specified by Hours2AnyTime or Hours2From and Hours2To apply.
     * If a value of None is provided for this field, the values provided for
     * Hours2AnyTime, Hours2From, Hours2To are ignored.
     * <br>
     * <b>Note:</b> You cannot set Hours2Days to EveryDay. If Hours1Days
     * is set to EveryDay, secondary contact hours do not apply. Hours2Days cannot be
     * set to the same value as Hours1Days.
     * 
     *
     * @param ebay.apis.eblbasecomponents.DaysCodeType
	 */
	public void setHours2Days(DaysCodeType hours2Days) {
	    this.hours2Days = hours2Days;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether or not a user is available to be contacted 24 hours a day
     * during the range of days specified using the Hours2Days element.
     * True indicates the user is available 24 hours a day, false indicates otherwise.
     * In the case of this field being true, all values provided for Hours2From and
     * Hours2To will be ignored.  In the case of this field being false,
     * the values provided Hours2From and Hours2To will be considered.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getHours2AnyTime() {
	    return this.hours2AnyTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether or not a user is available to be contacted 24 hours a day
     * during the range of days specified using the Hours2Days element.
     * True indicates the user is available 24 hours a day, false indicates otherwise.
     * In the case of this field being true, all values provided for Hours2From and
     * Hours2To will be ignored.  In the case of this field being false,
     * the values provided Hours2From and Hours2To will be considered.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setHours2AnyTime(Boolean hours2AnyTime) {
	    this.hours2AnyTime = hours2AnyTime;
	}
	/**
     * public getter
     *
     * 
     * Indicates the starting time of day this eBay user is available for other eBay
     * members to contact for the range of days specified using Hours2Days.
     * Enter times in 30 minute increments from the top of the hour. That is, enter
     * values either on the hour (:00) or 30 minutes past the hour (:30).
     * Other values will be will be rounded down to the next closest 30 minute
     * increment. Times entered should be local to the value provided for TimeZoneID.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getHours2From() {
	    return this.hours2From;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the starting time of day this eBay user is available for other eBay
     * members to contact for the range of days specified using Hours2Days.
     * Enter times in 30 minute increments from the top of the hour. That is, enter
     * values either on the hour (:00) or 30 minutes past the hour (:30).
     * Other values will be will be rounded down to the next closest 30 minute
     * increment. Times entered should be local to the value provided for TimeZoneID.
     * 
     *
     * @param java.util.Date
	 */
	public void setHours2From(Date hours2From) {
	    this.hours2From = hours2From;
	}
	/**
     * public getter
     *
     * 
     * Indicates the ending time of day this eBay user is available for other eBay
     * members to contact them for the range of days specified using Hours1Days.
     * Enter times in 30 minute increments from the top of the hour. That is, enter
     * values either on the hour (:00) or 30 minutes past the hour (:30).
     * Other values will be will be rounded down to the next closest 30 minute
     * increment. Times entered should be local to the value provided for TimeZoneID.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getHours2To() {
	    return this.hours2To;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the ending time of day this eBay user is available for other eBay
     * members to contact them for the range of days specified using Hours1Days.
     * Enter times in 30 minute increments from the top of the hour. That is, enter
     * values either on the hour (:00) or 30 minutes past the hour (:30).
     * Other values will be will be rounded down to the next closest 30 minute
     * increment. Times entered should be local to the value provided for TimeZoneID.
     * 
     *
     * @param java.util.Date
	 */
	public void setHours2To(Date hours2To) {
	    this.hours2To = hours2To;
	}

}