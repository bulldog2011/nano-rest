// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.ebay.marketplace.search.v1.services;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * Container for a top-level set of aspect histograms.
 * 
 */
public class AspectHistogramContainer implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private String domainName;
	
	@Element
	private String domainDisplayName;
	
	@Element
	private List<Aspect> aspect;
	
	@Element
	private String delimiter;
	
    
	/**
     * public getter
     *
     * 
     * A buy-side group of items that share aspects, but not necessarily an eBay
     * category. For example "Women's Dresses" or "Digital Cameras" could be
     * domains. You can use a domainName to label a set of aspects that you
     * display.
     * <br><br>
     * Domains are extracted from item listing properties (such as item titles
     * and subtitles).
     * 
     *
     * @returns java.lang.String
	 */
	public String getDomainName() {
	    return this.domainName;
	}
	
	/**
	 * public setter
	 *
     * 
     * A buy-side group of items that share aspects, but not necessarily an eBay
     * category. For example "Women's Dresses" or "Digital Cameras" could be
     * domains. You can use a domainName to label a set of aspects that you
     * display.
     * <br><br>
     * Domains are extracted from item listing properties (such as item titles
     * and subtitles).
     * 
     *
     * @param java.lang.String
	 */
	public void setDomainName(String domainName) {
	    this.domainName = domainName;
	}
	/**
     * public getter
     *
     * 
     * A buy-side group of items, for example "Shoes." Domains are extracted
     * from item listing properties, such as the title, descriptions, and so on.
     * 
     *
     * @returns java.lang.String
	 */
	public String getDomainDisplayName() {
	    return this.domainDisplayName;
	}
	
	/**
	 * public setter
	 *
     * 
     * A buy-side group of items, for example "Shoes." Domains are extracted
     * from item listing properties, such as the title, descriptions, and so on.
     * 
     *
     * @param java.lang.String
	 */
	public void setDomainDisplayName(String domainDisplayName) {
	    this.domainDisplayName = domainDisplayName;
	}
	/**
     * public getter
     *
     * 
     * A characteristic of an item in a domain. For example, "Optical Zoom",
     * "Brand", and "Megapixels" could be aspects of the Digital Cameras domain.
     * Aspects are well-known, standardized characteristics of a domain, and
     * they vary from domain to domain (the aspects of "Men's Shoes" are
     * different from those of "Digital Cameras"). A search request on the eBay
     * site will often display aspects and their respective aspect values on the
     * left-had side of a query response.
     * <br><br>
     * Aspects are extracted from item listing properties (such as item titles
     * and subtitles), and represent the characteristics of active items. Values
     * returned in the Aspect container can be used as inputs to the
     * aspectFilter fields in a query to distill the items returned by the
     * query. eBay generates aspects dynamically from the items currently
     * listed; aspects provide a view into what is currently available on eBay.
     * Because of this, aspect values returned one day cannot be guaranteed to
     * be valid the next day.
     * <br><br>
     * The following graphic shows how eBay might return a set of aspects for
     * the Digital Cameras domain. In this graphic, "Product Type", "Brand", and
     * "Megapixels" are aspects, and "Point & Shoot", "Canon", and "12.0 to
     * 12.9 MP" are aspect values. Histogram values (item counts) are shown for
     * each aspect value.
     * <br><br>
     * <img
     * src="http://developer.ebay.com/DevZone/finding/Concepts/images/refinesearch.jpg"
     * alt="eBay Aspects" />
     * 
     *
     * @returns java.util.List<com.ebay.marketplace.search.v1.services.Aspect>
	 */
	public List<Aspect> getAspect() {
	    return this.aspect;
	}
	
	/**
	 * public setter
	 *
     * 
     * A characteristic of an item in a domain. For example, "Optical Zoom",
     * "Brand", and "Megapixels" could be aspects of the Digital Cameras domain.
     * Aspects are well-known, standardized characteristics of a domain, and
     * they vary from domain to domain (the aspects of "Men's Shoes" are
     * different from those of "Digital Cameras"). A search request on the eBay
     * site will often display aspects and their respective aspect values on the
     * left-had side of a query response.
     * <br><br>
     * Aspects are extracted from item listing properties (such as item titles
     * and subtitles), and represent the characteristics of active items. Values
     * returned in the Aspect container can be used as inputs to the
     * aspectFilter fields in a query to distill the items returned by the
     * query. eBay generates aspects dynamically from the items currently
     * listed; aspects provide a view into what is currently available on eBay.
     * Because of this, aspect values returned one day cannot be guaranteed to
     * be valid the next day.
     * <br><br>
     * The following graphic shows how eBay might return a set of aspects for
     * the Digital Cameras domain. In this graphic, "Product Type", "Brand", and
     * "Megapixels" are aspects, and "Point & Shoot", "Canon", and "12.0 to
     * 12.9 MP" are aspect values. Histogram values (item counts) are shown for
     * each aspect value.
     * <br><br>
     * <img
     * src="http://developer.ebay.com/DevZone/finding/Concepts/images/refinesearch.jpg"
     * alt="eBay Aspects" />
     * 
     *
     * @param java.util.List<com.ebay.marketplace.search.v1.services.Aspect>
	 */
	public void setAspect(List<Aspect> aspect) {
	    this.aspect = aspect;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getDelimiter() {
	    return this.delimiter;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setDelimiter(String delimiter) {
	    this.delimiter = delimiter;
	}

}