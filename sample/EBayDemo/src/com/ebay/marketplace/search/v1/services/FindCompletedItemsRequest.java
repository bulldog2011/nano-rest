// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.ebay.marketplace.search.v1.services;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * Request container for the findCompletedItems call.
 * <br><br>
 * You can expect response times for this call to be longer than other types of Finding Service
 * requests. The call must search through historical databases rather than performing a quick
 * lookup on currently listed items. There is a 5,000 limit on the number of findCompletedItems
 * calls an application can make in a single day (even if the application has completed an
 * app check).
 * <br><br>
 * Be aware that it is possible to use this call in such a way as to violate the terms and
 * conditions of your API License Agreement. Ensure that you do not store the results retrieved
 * from this call or use the results for market research purposes.
 * 
 */
@RootElement(name = "findCompletedItemsRequest", namespace = "http://www.ebay.com/marketplace/search/v1/services")
public class FindCompletedItemsRequest extends BaseFindingServiceRequest implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private String keywords;
	
	@Element
	private List<String> categoryId;
	
	@Element
	private List<ItemFilter> itemFilter;
	
	@Element
	private List<AspectFilter> aspectFilter;
	
	@Element
	private List<OutputSelectorType> outputSelector;
	
	@Element
	private List<DomainFilter> domainFilter;
	
	@Element
	private ProductId productId;
	
    
	/**
     * public getter
     *
     * 
     * Specify one or more words to use in a search query for finding items
     * on eBay. By default, queries search item titles only. When running
     * queries, it is best to include complete keywords values--eBay checks
     * words in context with each other. If you are using a URL request and
     * your keyword query consists of multiple words, use "%20" to separate
     * the words. For example, use "Harry%20Potter" to search for items
     * containing those words in any order. Queries aren't case-sensitive,
     * so it doesn't matter whether you use uppercase or lowercase letters.
     * <br><br>
     * You can incorporate wildcards in a multi-word search. For example,
     * "ap*%20ip*" returns results for "apple ipod" among other matches. The
     * words "and" and "or" are treated like any other word (and not their
     * logical connotation). Only use "and", "or", or "the" if you are
     * searching for listings containing those specific words.
     * <br><br>
     * findCompletedItems requires that you specify either keywords or a
     * categoryId in the search criteria.
     * 
     *
     * @returns java.lang.String
	 */
	public String getKeywords() {
	    return this.keywords;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specify one or more words to use in a search query for finding items
     * on eBay. By default, queries search item titles only. When running
     * queries, it is best to include complete keywords values--eBay checks
     * words in context with each other. If you are using a URL request and
     * your keyword query consists of multiple words, use "%20" to separate
     * the words. For example, use "Harry%20Potter" to search for items
     * containing those words in any order. Queries aren't case-sensitive,
     * so it doesn't matter whether you use uppercase or lowercase letters.
     * <br><br>
     * You can incorporate wildcards in a multi-word search. For example,
     * "ap*%20ip*" returns results for "apple ipod" among other matches. The
     * words "and" and "or" are treated like any other word (and not their
     * logical connotation). Only use "and", "or", or "the" if you are
     * searching for listings containing those specific words.
     * <br><br>
     * findCompletedItems requires that you specify either keywords or a
     * categoryId in the search criteria.
     * 
     *
     * @param java.lang.String
	 */
	public void setKeywords(String keywords) {
	    this.keywords = keywords;
	}
	/**
     * public getter
     *
     * 
     * Specifies the category from which you want to retrieve item listings.
     * This field can be repeated to include multiple categories.
     * <br><br>
     * If a specified category ID doesn't match an existing category for the
     * site, eBay returns an invalid-category error message. To determine
     * valid categories, use the Shopping API <b
     * class="con">GetCategoryInfo</b> call.
     * <br><br>
     * Category searches are not supported on the eBay Italy site (global ID
     * EBAY-IT) at this time.
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getCategoryId() {
	    return this.categoryId;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the category from which you want to retrieve item listings.
     * This field can be repeated to include multiple categories.
     * <br><br>
     * If a specified category ID doesn't match an existing category for the
     * site, eBay returns an invalid-category error message. To determine
     * valid categories, use the Shopping API <b
     * class="con">GetCategoryInfo</b> call.
     * <br><br>
     * Category searches are not supported on the eBay Italy site (global ID
     * EBAY-IT) at this time.
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setCategoryId(List<String> categoryId) {
	    this.categoryId = categoryId;
	}
	/**
     * public getter
     *
     * 
     * Reduce the number of items returned by a find request using item
     * filters. Use <b class="con">itemFilter</b> to specify
     * name/value pairs. You can include multiple item filters in a single
     * request.
     * 
     *
     * @returns java.util.List<com.ebay.marketplace.search.v1.services.ItemFilter>
	 */
	public List<ItemFilter> getItemFilter() {
	    return this.itemFilter;
	}
	
	/**
	 * public setter
	 *
     * 
     * Reduce the number of items returned by a find request using item
     * filters. Use <b class="con">itemFilter</b> to specify
     * name/value pairs. You can include multiple item filters in a single
     * request.
     * 
     *
     * @param java.util.List<com.ebay.marketplace.search.v1.services.ItemFilter>
	 */
	public void setItemFilter(List<ItemFilter> itemFilter) {
	    this.itemFilter = itemFilter;
	}
	/**
     * public getter
     *
     * 
     * Aspect filters refine (limit) the number of items returned by a find
     * request. Obtain input values for aspectFilter fields from an
     * aspectHistogramContainer returned in the response of a previous
     * query.
     * <br><br>
     * By issuing a series of find queries, you can continually refine the
     * items returned in your responses. Do this by repeating a query using
     * the aspect values returned in one response as the input values to
     * your next query.
     * <br><br>
     * For example, the aspectHistogramContainer in a response on Men's
     * Shoes could contain an aspect of Size, along with "aspect values" for
     * the different sizes currently available in Men's Shoes. By populating
     * aspectFilter fields with the values returned in an
     * aspectHistogramContainer, you can hone the item results returned by
     * your new query.
     * <br/><br/>
     * <span class="tablenote">
     * <strong>Note:</strong> If a call that specifies an 
     * <strong>outputSelector</strong> value of 
     * <strong>AspectHistogram</strong> returns 
     * <strong>aspectHistogramContainer.domainName</strong>, this is a sign 
     * that aspect histogram data might not be returned if you also specify an 
     * <strong>aspectFilter</strong> in the next call. To ensure that 
     * aspect histogram data is returned for the next call, add a <strong>
     * domainFilter</strong> to the call as well.
     * </span>
     * 
     *
     * @returns java.util.List<com.ebay.marketplace.search.v1.services.AspectFilter>
	 */
	public List<AspectFilter> getAspectFilter() {
	    return this.aspectFilter;
	}
	
	/**
	 * public setter
	 *
     * 
     * Aspect filters refine (limit) the number of items returned by a find
     * request. Obtain input values for aspectFilter fields from an
     * aspectHistogramContainer returned in the response of a previous
     * query.
     * <br><br>
     * By issuing a series of find queries, you can continually refine the
     * items returned in your responses. Do this by repeating a query using
     * the aspect values returned in one response as the input values to
     * your next query.
     * <br><br>
     * For example, the aspectHistogramContainer in a response on Men's
     * Shoes could contain an aspect of Size, along with "aspect values" for
     * the different sizes currently available in Men's Shoes. By populating
     * aspectFilter fields with the values returned in an
     * aspectHistogramContainer, you can hone the item results returned by
     * your new query.
     * <br/><br/>
     * <span class="tablenote">
     * <strong>Note:</strong> If a call that specifies an 
     * <strong>outputSelector</strong> value of 
     * <strong>AspectHistogram</strong> returns 
     * <strong>aspectHistogramContainer.domainName</strong>, this is a sign 
     * that aspect histogram data might not be returned if you also specify an 
     * <strong>aspectFilter</strong> in the next call. To ensure that 
     * aspect histogram data is returned for the next call, add a <strong>
     * domainFilter</strong> to the call as well.
     * </span>
     * 
     *
     * @param java.util.List<com.ebay.marketplace.search.v1.services.AspectFilter>
	 */
	public void setAspectFilter(List<AspectFilter> aspectFilter) {
	    this.aspectFilter = aspectFilter;
	}
	/**
     * public getter
     *
     * 
     * Defines what data to return, in addition to the default set of data,
     * in a response.
     * <br><br>
     * If you don't specify this field, eBay returns a default set of item
     * fields. Use outputSelector to include more information in the
     * response. The additional data is grouped into discrete nodes. You can
     * specify multiple nodes by including this field multiple times, as
     * needed, in the request.
     * <br><br>
     * If you specify this field, the additional fields returned can affect
     * the call's response time (performance), including in the case with
     * feedback data.
     * 
     *
     * @returns java.util.List<com.ebay.marketplace.search.v1.services.OutputSelectorType>
	 */
	public List<OutputSelectorType> getOutputSelector() {
	    return this.outputSelector;
	}
	
	/**
	 * public setter
	 *
     * 
     * Defines what data to return, in addition to the default set of data,
     * in a response.
     * <br><br>
     * If you don't specify this field, eBay returns a default set of item
     * fields. Use outputSelector to include more information in the
     * response. The additional data is grouped into discrete nodes. You can
     * specify multiple nodes by including this field multiple times, as
     * needed, in the request.
     * <br><br>
     * If you specify this field, the additional fields returned can affect
     * the call's response time (performance), including in the case with
     * feedback data.
     * 
     *
     * @param java.util.List<com.ebay.marketplace.search.v1.services.OutputSelectorType>
	 */
	public void setOutputSelector(List<OutputSelectorType> outputSelector) {
	    this.outputSelector = outputSelector;
	}
	/**
     * public getter
     *
     * 
     * Restricts results to items listed within the specified domain.
     * Domains are a buy-side grouping of items. such as shoes or digital
     * cameras. A domain can span multiple eBay categories.
     * 
     *
     * @returns java.util.List<com.ebay.marketplace.search.v1.services.DomainFilter>
	 */
	public List<DomainFilter> getDomainFilter() {
	    return this.domainFilter;
	}
	
	/**
	 * public setter
	 *
     * 
     * Restricts results to items listed within the specified domain.
     * Domains are a buy-side grouping of items. such as shoes or digital
     * cameras. A domain can span multiple eBay categories.
     * 
     *
     * @param java.util.List<com.ebay.marketplace.search.v1.services.DomainFilter>
	 */
	public void setDomainFilter(List<DomainFilter> domainFilter) {
	    this.domainFilter = domainFilter;
	}
	/**
     * public getter
     *
     * 
     * Input ISBN, UPC, EAN, or ReferenceID (ePID) to specify the type of
     * product for which you want to search.
     * <br><br>
     * For example, to search using an ISBN, specify productID.type=ISBN and
     * set productID.value to an ISBN value. To search using an eBay Product
     * Reference ID, specify productID.type= ReferenceID and set
     * productID.value to an ePID value (also known as an Bay Product
     * Reference ID). If you do not know the ePID value for a product, use
     * FindProducts in the eBay Shopping API to retrieve the desired ePID:
     * <br><br>
     * <a
     * href=" http://developer.ebay.com/DevZone/shopping/docs/CallRef/FindProducts.html"
     * > FindProducts</a>
     * 
     *
     * @returns com.ebay.marketplace.search.v1.services.ProductId
	 */
	public ProductId getProductId() {
	    return this.productId;
	}
	
	/**
	 * public setter
	 *
     * 
     * Input ISBN, UPC, EAN, or ReferenceID (ePID) to specify the type of
     * product for which you want to search.
     * <br><br>
     * For example, to search using an ISBN, specify productID.type=ISBN and
     * set productID.value to an ISBN value. To search using an eBay Product
     * Reference ID, specify productID.type= ReferenceID and set
     * productID.value to an ePID value (also known as an Bay Product
     * Reference ID). If you do not know the ePID value for a product, use
     * FindProducts in the eBay Shopping API to retrieve the desired ePID:
     * <br><br>
     * <a
     * href=" http://developer.ebay.com/DevZone/shopping/docs/CallRef/FindProducts.html"
     * > FindProducts</a>
     * 
     *
     * @param com.ebay.marketplace.search.v1.services.ProductId
	 */
	public void setProductId(ProductId productId) {
	    this.productId = productId;
	}

}