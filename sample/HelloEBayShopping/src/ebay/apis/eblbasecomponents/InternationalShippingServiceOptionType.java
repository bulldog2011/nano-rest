// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.util.Date;

/**
 * 
 * Shipping costs and options related to an international shipping service. When used
 * as input, if one is provided, at least one domestic ShippingService must be
 * provided. This type does not exist before compatibility level 383.
 * 
 */
public class InternationalShippingServiceOptionType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "ShippingInsuranceCost")
	private AmountType shippingInsuranceCost;
	
	@Element(name = "ShippingServiceName")
	private String shippingServiceName;
	
	@Element(name = "ShippingServiceAdditionalCost")
	private AmountType shippingServiceAdditionalCost;
	
	@Element(name = "ShippingServiceCost")
	private AmountType shippingServiceCost;
	
	@Element(name = "ShippingServicePriority")
	private Integer shippingServicePriority;
	
	@Element(name = "ShipsTo")
	private List<String> shipsTo;
	
	@Element(name = "EstimatedDeliveryMinTime")
	private Date estimatedDeliveryMinTime;
	
	@Element(name = "EstimatedDeliveryMaxTime")
	private Date estimatedDeliveryMaxTime;
	
	@Element(name = "ImportCharge")
	private AmountType importCharge;
	
    
	/**
     * public getter
     *
     * 
     * The insurance cost associated with shipping a single item with this shipping
     * service. If the buyer bought more than one of this item, this proportional to
     * QuantitySold. If the item has not yet been sold, insurance information cannot
     * be calculated and the value is 0.00. For calculated shipping only.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getShippingInsuranceCost() {
	    return this.shippingInsuranceCost;
	}
	
	/**
	 * public setter
	 *
     * 
     * The insurance cost associated with shipping a single item with this shipping
     * service. If the buyer bought more than one of this item, this proportional to
     * QuantitySold. If the item has not yet been sold, insurance information cannot
     * be calculated and the value is 0.00. For calculated shipping only.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setShippingInsuranceCost(AmountType shippingInsuranceCost) {
	    this.shippingInsuranceCost = shippingInsuranceCost;
	}
	/**
     * public getter
     *
     * 
     * An international shipping service offered for shipping the item (for
     * example, UPS Ground). For flat and calculated shipping.
     * 
     *
     * @returns java.lang.String
	 */
	public String getShippingServiceName() {
	    return this.shippingServiceName;
	}
	
	/**
	 * public setter
	 *
     * 
     * An international shipping service offered for shipping the item (for
     * example, UPS Ground). For flat and calculated shipping.
     * 
     *
     * @param java.lang.String
	 */
	public void setShippingServiceName(String shippingServiceName) {
	    this.shippingServiceName = shippingServiceName;
	}
	/**
     * public getter
     *
     * 
     * The cost of shipping each additional item beyond the first item.
     * For single-item listings, if this is not provided, it is defaulted
     * to zero. For multi-quantity listings, if this is not provided, it
     * is set to the value of (in)ShippingServiceCost (unless the request
     * version is lower than 665, in which case ShippingServiceAdditionalCost
     * is required and is not defaulted).
     * For flat shipping only.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getShippingServiceAdditionalCost() {
	    return this.shippingServiceAdditionalCost;
	}
	
	/**
	 * public setter
	 *
     * 
     * The cost of shipping each additional item beyond the first item.
     * For single-item listings, if this is not provided, it is defaulted
     * to zero. For multi-quantity listings, if this is not provided, it
     * is set to the value of (in)ShippingServiceCost (unless the request
     * version is lower than 665, in which case ShippingServiceAdditionalCost
     * is required and is not defaulted).
     * For flat shipping only.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setShippingServiceAdditionalCost(AmountType shippingServiceAdditionalCost) {
	    this.shippingServiceAdditionalCost = shippingServiceAdditionalCost;
	}
	/**
     * public getter
     *
     * 
     * The basic shipping cost of the item.
     * <br>
     * <br>
     * <i>Flat shipping:</i> single-item listing: this matches (in)ShippingServiceCost;
     * multi-quantity listing: with a request version of 665 or greater,
     * this is the total of (in)ShippingServiceCost plus
     * ((in)ShippingServiceAdditionalCost times the number of items beyond the first
     * item), and with a request version lower than 665, this is (in)ShippingServiceCost.
     * <br>
     * <i>Promotional shipping:</i> For a request version lower than 665, promotional
     * shipping has no effect on shipping costs. Otherwise: if the promotional
     * shipping option is lower than other shipping services being offered, the
     * savings is reflected in the returned shipping cost;
     * the shipping service named Promotional Shipping Service (or whatever is
     * the localized name for it) is included among the shipping services;
     * if the promotional shipping cost is lower than the cost of other shipping
     * services being offered, it is presented first in the list (the lowest shipping
     * service cost is always presented first, regardless of whether there is
     * promotional shipping).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getShippingServiceCost() {
	    return this.shippingServiceCost;
	}
	
	/**
	 * public setter
	 *
     * 
     * The basic shipping cost of the item.
     * <br>
     * <br>
     * <i>Flat shipping:</i> single-item listing: this matches (in)ShippingServiceCost;
     * multi-quantity listing: with a request version of 665 or greater,
     * this is the total of (in)ShippingServiceCost plus
     * ((in)ShippingServiceAdditionalCost times the number of items beyond the first
     * item), and with a request version lower than 665, this is (in)ShippingServiceCost.
     * <br>
     * <i>Promotional shipping:</i> For a request version lower than 665, promotional
     * shipping has no effect on shipping costs. Otherwise: if the promotional
     * shipping option is lower than other shipping services being offered, the
     * savings is reflected in the returned shipping cost;
     * the shipping service named Promotional Shipping Service (or whatever is
     * the localized name for it) is included among the shipping services;
     * if the promotional shipping cost is lower than the cost of other shipping
     * services being offered, it is presented first in the list (the lowest shipping
     * service cost is always presented first, regardless of whether there is
     * promotional shipping).
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setShippingServiceCost(AmountType shippingServiceCost) {
	    this.shippingServiceCost = shippingServiceCost;
	}
	/**
     * public getter
     *
     * 
     * Seller-preferred presentation order relative to other service options. Valid
     * values are: 1, 2 and 3 (first, second and third choices). For flat and
     * calculated shipping.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getShippingServicePriority() {
	    return this.shippingServicePriority;
	}
	
	/**
	 * public setter
	 *
     * 
     * Seller-preferred presentation order relative to other service options. Valid
     * values are: 1, 2 and 3 (first, second and third choices). For flat and
     * calculated shipping.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setShippingServicePriority(Integer shippingServicePriority) {
	    this.shippingServicePriority = shippingServicePriority;
	}
	/**
     * public getter
     *
     * 
     * An international location or region to which the item may be shipped via this
     * particular shipping service. Associated with the shipping service by the
     * seller. This is basically the same as SimpleItemType.ShipToLocations except
     * that this is spelled out and the other is abbreviated.
     * Returned with request version 665 or greater, if set via Trading API.
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getShipsTo() {
	    return this.shipsTo;
	}
	
	/**
	 * public setter
	 *
     * 
     * An international location or region to which the item may be shipped via this
     * particular shipping service. Associated with the shipping service by the
     * seller. This is basically the same as SimpleItemType.ShipToLocations except
     * that this is spelled out and the other is abbreviated.
     * Returned with request version 665 or greater, if set via Trading API.
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setShipsTo(List<String> shipsTo) {
	    this.shipsTo = shipsTo;
	}
	/**
     * public getter
     *
     * 
     * The minimum guaranteed date in which the item could reach the
     * buyer's location.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getEstimatedDeliveryMinTime() {
	    return this.estimatedDeliveryMinTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * The minimum guaranteed date in which the item could reach the
     * buyer's location.
     * Not applicable to Half.com.
     * 
     *
     * @param java.util.Date
	 */
	public void setEstimatedDeliveryMinTime(Date estimatedDeliveryMinTime) {
	    this.estimatedDeliveryMinTime = estimatedDeliveryMinTime;
	}
	/**
     * public getter
     *
     * 
     * The maximum guaranteed date in which the item could reach the
     * buyer's location.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getEstimatedDeliveryMaxTime() {
	    return this.estimatedDeliveryMaxTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * The maximum guaranteed date in which the item could reach the
     * buyer's location.
     * Not applicable to Half.com.
     * 
     *
     * @param java.util.Date
	 */
	public void setEstimatedDeliveryMaxTime(Date estimatedDeliveryMaxTime) {
	    this.estimatedDeliveryMaxTime = estimatedDeliveryMaxTime;
	}
	/**
     * public getter
     *
     * 
     * The total cost of customs and taxes for the international leg of an order shipped using the Global Shipping Program. This amount is calculated and supplied for each item by the international shipping provider when a buyer views the item properties.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getImportCharge() {
	    return this.importCharge;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total cost of customs and taxes for the international leg of an order shipped using the Global Shipping Program. This amount is calculated and supplied for each item by the international shipping provider when a buyer views the item properties.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setImportCharge(AmountType importCharge) {
	    this.importCharge = importCharge;
	}

}