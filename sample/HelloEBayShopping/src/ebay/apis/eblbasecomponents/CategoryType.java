// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * Contains details about a category.
 * 
 */
public class CategoryType   {

	@Element(name = "CategoryID")
	private String categoryID;
    
	@Element(name = "CategoryLevel")
	private Integer categoryLevel;
    
	@Element(name = "CategoryName")
	private String categoryName;
    
	@Element(name = "CategoryParentID")
	private String categoryParentID;
    
	@Element(name = "CategoryParentName")
	private String categoryParentName;
    
	@Element(name = "ItemCount")
	private Integer itemCount;
    
	@Element(name = "CategoryNamePath")
	private String categoryNamePath;
    
	@Element(name = "CategoryIDPath")
	private String categoryIDPath;
    
	@Element(name = "LeafCategory")
	private Boolean leafCategory;
    
	private List<Object> any;
    
    
	/**
     * public getter
     *
     * 
     * The numeric ID of a category on eBay.
     * <br>
     * <br>
     * Use an ID of -1 to retrieve the root category and the top-level (level 1) meta
     * categories. You can determine other CategoryIDs from the response from this
     * call, or from a specific item (retrieved from another call like
     * GetSingleItem), or from the eBay website.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCategoryID() {
	    return this.categoryID;
	}
	
	/**
	 * public setter
	 *
     * 
     * The numeric ID of a category on eBay.
     * <br>
     * <br>
     * Use an ID of -1 to retrieve the root category and the top-level (level 1) meta
     * categories. You can determine other CategoryIDs from the response from this
     * call, or from a specific item (retrieved from another call like
     * GetSingleItem), or from the eBay website.
     * 
     *
     * @param java.lang.String
	 */
	public void setCategoryID(String categoryID) {
	    this.categoryID = categoryID;
	}
	/**
     * public getter
     *
     * 
     * The level where the category fits in the site's category hierarchy.
     * For example, if this field has a value of 2, then the category is 2
     * levels below the root category.
     * <br>
     * <br>
     * Note that the value of CategoryLevel will always be 1 level below the level
     * of the requested category. To retrieve a category's children, pass its
     * CategoryID back into the request.
     * <br>
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getCategoryLevel() {
	    return this.categoryLevel;
	}
	
	/**
	 * public setter
	 *
     * 
     * The level where the category fits in the site's category hierarchy.
     * For example, if this field has a value of 2, then the category is 2
     * levels below the root category.
     * <br>
     * <br>
     * Note that the value of CategoryLevel will always be 1 level below the level
     * of the requested category. To retrieve a category's children, pass its
     * CategoryID back into the request.
     * <br>
     * 
     *
     * @param java.lang.Integer
	 */
	public void setCategoryLevel(Integer categoryLevel) {
	    this.categoryLevel = categoryLevel;
	}
	/**
     * public getter
     *
     * 
     * Display name of the category as it would appear on
     * the eBay Web site.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCategoryName() {
	    return this.categoryName;
	}
	
	/**
	 * public setter
	 *
     * 
     * Display name of the category as it would appear on
     * the eBay Web site.
     * 
     *
     * @param java.lang.String
	 */
	public void setCategoryName(String categoryName) {
	    this.categoryName = categoryName;
	}
	/**
     * public getter
     *
     * 
     * Category ID identifying a category that is an ancestor of
     * the category indicated in CategoryID.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCategoryParentID() {
	    return this.categoryParentID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Category ID identifying a category that is an ancestor of
     * the category indicated in CategoryID.
     * 
     *
     * @param java.lang.String
	 */
	public void setCategoryParentID(String categoryParentID) {
	    this.categoryParentID = categoryParentID;
	}
	/**
     * public getter
     *
     * 
     * Display name of the category indicated in CategoryParentID.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCategoryParentName() {
	    return this.categoryParentName;
	}
	
	/**
	 * public setter
	 *
     * 
     * Display name of the category indicated in CategoryParentID.
     * 
     *
     * @param java.lang.String
	 */
	public void setCategoryParentName(String categoryParentName) {
	    this.categoryParentName = categoryParentName;
	}
	/**
     * public getter
     *
     * 
     * The total quantity of matching items in the category.
     * In the FindItemsAdvanced response, matching categories at the same level
     * (i.e., sibling categories) are sorted by ItemCount. That is, if the request
     * specifies that fewer categories or subcategories should be returned,
     * the ones with the most matching items are returned first.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getItemCount() {
	    return this.itemCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total quantity of matching items in the category.
     * In the FindItemsAdvanced response, matching categories at the same level
     * (i.e., sibling categories) are sorted by ItemCount. That is, if the request
     * specifies that fewer categories or subcategories should be returned,
     * the ones with the most matching items are returned first.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setItemCount(Integer itemCount) {
	    this.itemCount = itemCount;
	}
	/**
     * public getter
     *
     * 
     * The fully qualified category display name as it would appear on the
     * eBay site (e.g., Home & Garden:Kitchen:Tools & Gadgets).
     * 
     *
     * @returns java.lang.String
	 */
	public String getCategoryNamePath() {
	    return this.categoryNamePath;
	}
	
	/**
	 * public setter
	 *
     * 
     * The fully qualified category display name as it would appear on the
     * eBay site (e.g., Home & Garden:Kitchen:Tools & Gadgets).
     * 
     *
     * @param java.lang.String
	 */
	public void setCategoryNamePath(String categoryNamePath) {
	    this.categoryNamePath = categoryNamePath;
	}
	/**
     * public getter
     *
     * 
     * The fully qualified category ID (e.g., 11700:20625:20635 for Home &
     * Garden:Kitchen:Tools & Gadgets).
     * 
     *
     * @returns java.lang.String
	 */
	public String getCategoryIDPath() {
	    return this.categoryIDPath;
	}
	
	/**
	 * public setter
	 *
     * 
     * The fully qualified category ID (e.g., 11700:20625:20635 for Home &
     * Garden:Kitchen:Tools & Gadgets).
     * 
     *
     * @param java.lang.String
	 */
	public void setCategoryIDPath(String categoryIDPath) {
	    this.categoryIDPath = categoryIDPath;
	}
	/**
     * public getter
     *
     * 
     * If true, indicates that the category indicated in CategoryID is a leaf
     * category, in which items may be listed (if the category is not also
     * expired or virtual).
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getLeafCategory() {
	    return this.leafCategory;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, indicates that the category indicated in CategoryID is a leaf
     * category, in which items may be listed (if the category is not also
     * expired or virtual).
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setLeafCategory(Boolean leafCategory) {
	    this.leafCategory = leafCategory;
	}
	/**
	 * public getter
	 *
     * @returns java.util.List<java.lang.Object>
	 */
	public List<Object> getAny() {
	    return this.any;
	}
	
	/**
	 * public setter
	 *
     * @param java.util.List<java.lang.Object>
	 */
	public void setAny(List<Object> any) {
	    this.any = any;
	}

}