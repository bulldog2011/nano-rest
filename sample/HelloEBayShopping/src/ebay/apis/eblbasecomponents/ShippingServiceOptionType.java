// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.util.Date;

/**
 * 
 * Shipping costs and options related to a domestic shipping service.
 * 
 */
public class ShippingServiceOptionType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "ShippingInsuranceCost")
	private AmountType shippingInsuranceCost;
	
	@Element(name = "ShippingServiceName")
	private String shippingServiceName;
	
	@Element(name = "ShippingServiceCost")
	private AmountType shippingServiceCost;
	
	@Element(name = "ShippingServiceAdditionalCost")
	private AmountType shippingServiceAdditionalCost;
	
	@Element(name = "ShippingServicePriority")
	private Integer shippingServicePriority;
	
	@Element(name = "ExpeditedService")
	private Boolean expeditedService;
	
	@Element(name = "ShippingTimeMin")
	private Integer shippingTimeMin;
	
	@Element(name = "ShippingTimeMax")
	private Integer shippingTimeMax;
	
	@Element(name = "ShippingSurcharge")
	private AmountType shippingSurcharge;
	
	@Element(name = "ShipsTo")
	private List<String> shipsTo;
	
	@Element(name = "EstimatedDeliveryMinTime")
	private Date estimatedDeliveryMinTime;
	
	@Element(name = "EstimatedDeliveryMaxTime")
	private Date estimatedDeliveryMaxTime;
	
	@Element(name = "FastAndFree")
	private Boolean fastAndFree;
	
    
	/**
     * public getter
     *
     * 
     * The insurance cost associated with shipping a single item with this shipping
     * service. If the buyer bought more than one of this item, this proportional to
     * QuantitySold.  If the item has not yet been sold, insurance information cannot
     * be calculated and the value is 0.00. For calculated shipping only.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getShippingInsuranceCost() {
	    return this.shippingInsuranceCost;
	}
	
	/**
	 * public setter
	 *
     * 
     * The insurance cost associated with shipping a single item with this shipping
     * service. If the buyer bought more than one of this item, this proportional to
     * QuantitySold.  If the item has not yet been sold, insurance information cannot
     * be calculated and the value is 0.00. For calculated shipping only.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setShippingInsuranceCost(AmountType shippingInsuranceCost) {
	    this.shippingInsuranceCost = shippingInsuranceCost;
	}
	/**
     * public getter
     *
     * 
     * A domestic shipping service offered for shipping the item (for example, UPS
     * Ground). For flat and calculated shipping.
     * 
     *
     * @returns java.lang.String
	 */
	public String getShippingServiceName() {
	    return this.shippingServiceName;
	}
	
	/**
	 * public setter
	 *
     * 
     * A domestic shipping service offered for shipping the item (for example, UPS
     * Ground). For flat and calculated shipping.
     * 
     *
     * @param java.lang.String
	 */
	public void setShippingServiceName(String shippingServiceName) {
	    this.shippingServiceName = shippingServiceName;
	}
	/**
     * public getter
     *
     * 
     * The basic shipping cost of the item.
     * <br>
     * <br>
     * <i>Flat shipping:</i> single-item listing: this matches (in)ShippingServiceCost;
     * multi-quantity listing: with a request version of 665 or greater,
     * this is the total of (in)ShippingServiceCost plus
     * ((in)ShippingServiceAdditionalCost times the number of items beyond the first
     * item), and with a request version lower than 665, this is (in)ShippingServiceCost.
     * <br>
     * <i>Promotional shipping:</i> For a request version lower than 665, promotional
     * shipping has no effect on shipping costs. Otherwise: if the promotional
     * shipping option is lower than other shipping services being offered, the
     * savings is reflected in the returned shipping cost;
     * the shipping service named Promotional Shipping Service (or whatever is
     * the localized name for it) is included among the shipping services;
     * if the promotional shipping cost is lower than the cost of other shipping
     * services being offered, it is presented first in the list (the lowest shipping
     * service cost is always presented first, regardless of whether there is
     * promotional shipping).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getShippingServiceCost() {
	    return this.shippingServiceCost;
	}
	
	/**
	 * public setter
	 *
     * 
     * The basic shipping cost of the item.
     * <br>
     * <br>
     * <i>Flat shipping:</i> single-item listing: this matches (in)ShippingServiceCost;
     * multi-quantity listing: with a request version of 665 or greater,
     * this is the total of (in)ShippingServiceCost plus
     * ((in)ShippingServiceAdditionalCost times the number of items beyond the first
     * item), and with a request version lower than 665, this is (in)ShippingServiceCost.
     * <br>
     * <i>Promotional shipping:</i> For a request version lower than 665, promotional
     * shipping has no effect on shipping costs. Otherwise: if the promotional
     * shipping option is lower than other shipping services being offered, the
     * savings is reflected in the returned shipping cost;
     * the shipping service named Promotional Shipping Service (or whatever is
     * the localized name for it) is included among the shipping services;
     * if the promotional shipping cost is lower than the cost of other shipping
     * services being offered, it is presented first in the list (the lowest shipping
     * service cost is always presented first, regardless of whether there is
     * promotional shipping).
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setShippingServiceCost(AmountType shippingServiceCost) {
	    this.shippingServiceCost = shippingServiceCost;
	}
	/**
     * public getter
     *
     * 
     * The cost of shipping each additional item beyond the first item (flat shipping).
     * For single-item listings, if this is not provided, it is defaulted
     * to zero. For multi-quantity listings, if this is not provided, it
     * is set to the value of (in)ShippingServiceCost (unless the request
     * version is lower than 665, in which case ShippingServiceAdditionalCost
     * is required and is not defaulted).
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getShippingServiceAdditionalCost() {
	    return this.shippingServiceAdditionalCost;
	}
	
	/**
	 * public setter
	 *
     * 
     * The cost of shipping each additional item beyond the first item (flat shipping).
     * For single-item listings, if this is not provided, it is defaulted
     * to zero. For multi-quantity listings, if this is not provided, it
     * is set to the value of (in)ShippingServiceCost (unless the request
     * version is lower than 665, in which case ShippingServiceAdditionalCost
     * is required and is not defaulted).
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setShippingServiceAdditionalCost(AmountType shippingServiceAdditionalCost) {
	    this.shippingServiceAdditionalCost = shippingServiceAdditionalCost;
	}
	/**
     * public getter
     *
     * 
     * Seller-preferred presentation order relative to other
     * service options. Valid values: 1 (1st choice), 2 (2nd choice),
     * 3 (3rd choice). For flat and calculated shipping.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getShippingServicePriority() {
	    return this.shippingServicePriority;
	}
	
	/**
	 * public setter
	 *
     * 
     * Seller-preferred presentation order relative to other
     * service options. Valid values: 1 (1st choice), 2 (2nd choice),
     * 3 (3rd choice). For flat and calculated shipping.
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setShippingServicePriority(Integer shippingServicePriority) {
	    this.shippingServicePriority = shippingServicePriority;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the service is an expedited shipping service. See Enabling Get It Fast.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getExpeditedService() {
	    return this.expeditedService;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the service is an expedited shipping service. See Enabling Get It Fast.
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setExpeditedService(Boolean expeditedService) {
	    this.expeditedService = expeditedService;
	}
	/**
     * public getter
     *
     * 
     * The minimum guaranteed number of business days in which the shipping carrier
     * can ship an item (not including the time it takes the seller to
     * deliver the item to the shipping carrier). See Enabling Get It Fast.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getShippingTimeMin() {
	    return this.shippingTimeMin;
	}
	
	/**
	 * public setter
	 *
     * 
     * The minimum guaranteed number of business days in which the shipping carrier
     * can ship an item (not including the time it takes the seller to
     * deliver the item to the shipping carrier). See Enabling Get It Fast.
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setShippingTimeMin(Integer shippingTimeMin) {
	    this.shippingTimeMin = shippingTimeMin;
	}
	/**
     * public getter
     *
     * 
     * The maximum guaranteed number of business days the shipping carrier will
     * take to ship an item (not including the time it takes the seller to
     * deliver the item to the shipping carrier). See Enabling Get It Fast.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getShippingTimeMax() {
	    return this.shippingTimeMax;
	}
	
	/**
	 * public setter
	 *
     * 
     * The maximum guaranteed number of business days the shipping carrier will
     * take to ship an item (not including the time it takes the seller to
     * deliver the item to the shipping carrier). See Enabling Get It Fast.
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setShippingTimeMax(Integer shippingTimeMax) {
	    this.shippingTimeMax = shippingTimeMax;
	}
	/**
     * public getter
     *
     * 
     * An additional fee to charge US buyers who ship via UPS to Alaska, Hawaii
     * or Puerto Rico. Can only be assigned a value for Parts and Accessories
     * items on the eBay US and Motors sites. Only returned if set.
     * If some transactions in an order have a surcharge, surcharge is added
     * only for those transactions.
     * Flat rate shipping only.
     * <br>
     * <br>
     * With a request version of 665 or greater, total shipping cost includes any
     * surcharge, and ShippingSurcharge is no longer returned as an individual tag.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getShippingSurcharge() {
	    return this.shippingSurcharge;
	}
	
	/**
	 * public setter
	 *
     * 
     * An additional fee to charge US buyers who ship via UPS to Alaska, Hawaii
     * or Puerto Rico. Can only be assigned a value for Parts and Accessories
     * items on the eBay US and Motors sites. Only returned if set.
     * If some transactions in an order have a surcharge, surcharge is added
     * only for those transactions.
     * Flat rate shipping only.
     * <br>
     * <br>
     * With a request version of 665 or greater, total shipping cost includes any
     * surcharge, and ShippingSurcharge is no longer returned as an individual tag.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setShippingSurcharge(AmountType shippingSurcharge) {
	    this.shippingSurcharge = shippingSurcharge;
	}
	/**
     * public getter
     *
     * 
     * An international location or region to which the item may be shipped via this
     * particular shipping service. Associated with the shipping service by the
     * seller. Use GeteBayDetails to determine which locations are valid per site.
     * These values are string equivalents of values found in ShippingRegionCodeType
     * and CountryCodeType.
     * Returned with request version 665 or greater, if set via Trading API.
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getShipsTo() {
	    return this.shipsTo;
	}
	
	/**
	 * public setter
	 *
     * 
     * An international location or region to which the item may be shipped via this
     * particular shipping service. Associated with the shipping service by the
     * seller. Use GeteBayDetails to determine which locations are valid per site.
     * These values are string equivalents of values found in ShippingRegionCodeType
     * and CountryCodeType.
     * Returned with request version 665 or greater, if set via Trading API.
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setShipsTo(List<String> shipsTo) {
	    this.shipsTo = shipsTo;
	}
	/**
     * public getter
     *
     * 
     * The minimum guaranteed date in which the item could reach the
     * buyer's location.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getEstimatedDeliveryMinTime() {
	    return this.estimatedDeliveryMinTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * The minimum guaranteed date in which the item could reach the
     * buyer's location.
     * Not applicable to Half.com.
     * 
     *
     * @param java.util.Date
	 */
	public void setEstimatedDeliveryMinTime(Date estimatedDeliveryMinTime) {
	    this.estimatedDeliveryMinTime = estimatedDeliveryMinTime;
	}
	/**
     * public getter
     *
     * 
     * The maximum guaranteed date in which the item could reach the
     * buyer's location.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getEstimatedDeliveryMaxTime() {
	    return this.estimatedDeliveryMaxTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * The maximum guaranteed date in which the item could reach the
     * buyer's location.
     * Not applicable to Half.com.
     * 
     *
     * @param java.util.Date
	 */
	public void setEstimatedDeliveryMaxTime(Date estimatedDeliveryMaxTime) {
	    this.estimatedDeliveryMaxTime = estimatedDeliveryMaxTime;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the service is fast in delivery to the end user (less than 4 days) and free for buyer.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getFastAndFree() {
	    return this.fastAndFree;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the service is fast in delivery to the end user (less than 4 days) and free for buyer.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setFastAndFree(Boolean fastAndFree) {
	    this.fastAndFree = fastAndFree;
	}

}