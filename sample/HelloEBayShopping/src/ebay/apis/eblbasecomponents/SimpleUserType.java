// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

/**
 * 
 * Type to contain the data for one eBay user. Depending on the context, the user
 * might be the seller or the buyer in a transaction, or the bidder or winning bidder
 * in a listing. An object of this type is returned by a number of calls, including
 * the GetUser call.
 * 
 */
public class SimpleUserType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "UserID")
	private String userID;
	
	@Element(name = "FeedbackPrivate")
	private Boolean feedbackPrivate;
	
	@Element(name = "FeedbackRatingStar")
	private FeedbackRatingStarCodeType feedbackRatingStar;
	
	@Element(name = "FeedbackScore")
	private Integer feedbackScore;
	
	@Element(name = "UserAnonymized")
	private Boolean userAnonymized;
	
	@Element(name = "NewUser")
	private Boolean newUser;
	
	@Element(name = "RegistrationDate")
	private Date registrationDate;
	
	@Element(name = "RegistrationSite")
	private SiteCodeType registrationSite;
	
	@Element(name = "Status")
	private UserStatusCodeType status;
	
	@Element(name = "SellerBusinessType")
	private SellerBusinessCodeType sellerBusinessType;
	
	@Element(name = "StoreURL")
	private String storeURL;
	
	@Element(name = "StoreName")
	private String storeName;
	
	@Element(name = "SellerItemsURL")
	private String sellerItemsURL;
	
	@Element(name = "AboutMeURL")
	private String aboutMeURL;
	
	@Element(name = "MyWorldURL")
	private String myWorldURL;
	
	@Element(name = "MyWorldSmallImage")
	private String myWorldSmallImage;
	
	@Element(name = "MyWorldLargeImage")
	private String myWorldLargeImage;
	
	@Element(name = "ReviewsAndGuidesURL")
	private String reviewsAndGuidesURL;
	
	@Element(name = "FeedbackDetailsURL")
	private String feedbackDetailsURL;
	
	@Element(name = "PositiveFeedbackPercent")
	private Float positiveFeedbackPercent;
	
	@Element(name = "SellerLevel")
	private SellerLevelCodeType sellerLevel;
	
	@Element(name = "TopRatedSeller")
	private Boolean topRatedSeller;
	
    
	/**
     * public getter
     *
     * 
     * The user's unique eBay user ID.
     * <br />
     * <br />
     * When reporting UserIDs in bidding situations (such was when listing
     * the high bidder in an auction), eBay replaces the UserID value with
     * an anonymous bidder name value, such as "a***o".
     * 
     *
     * @returns java.lang.String
	 */
	public String getUserID() {
	    return this.userID;
	}
	
	/**
	 * public setter
	 *
     * 
     * The user's unique eBay user ID.
     * <br />
     * <br />
     * When reporting UserIDs in bidding situations (such was when listing
     * the high bidder in an auction), eBay replaces the UserID value with
     * an anonymous bidder name value, such as "a***o".
     * 
     *
     * @param java.lang.String
	 */
	public void setUserID(String userID) {
	    this.userID = userID;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the user has chosen to make their feedback score and
     * feedback details private (hidden from other users). Note that the percentage
     * of positive feedback can still be returned, even if other feedback details are
     * private. If a bidder's user information is made
     * anonymous, the value -99 is returned.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getFeedbackPrivate() {
	    return this.feedbackPrivate;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the user has chosen to make their feedback score and
     * feedback details private (hidden from other users). Note that the percentage
     * of positive feedback can still be returned, even if other feedback details are
     * private. If a bidder's user information is made
     * anonymous, the value -99 is returned.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setFeedbackPrivate(Boolean feedbackPrivate) {
	    this.feedbackPrivate = feedbackPrivate;
	}
	/**
     * public getter
     *
     * 
     * Visual indicator of user's feedback score.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.FeedbackRatingStarCodeType
	 */
	public FeedbackRatingStarCodeType getFeedbackRatingStar() {
	    return this.feedbackRatingStar;
	}
	
	/**
	 * public setter
	 *
     * 
     * Visual indicator of user's feedback score.
     * 
     *
     * @param ebay.apis.eblbasecomponents.FeedbackRatingStarCodeType
	 */
	public void setFeedbackRatingStar(FeedbackRatingStarCodeType feedbackRatingStar) {
	    this.feedbackRatingStar = feedbackRatingStar;
	}
	/**
     * public getter
     *
     * 
     * The aggregate feedback score of a user. A user's feedback score is the net
     * positive feedback minus the net negative feedback left for the user.
     * <br>
     * <br>
     * Feedback scores are a quantitative expression of the desirability of dealing with
     * a user as a buyer or a seller in transactions. Each transaction can result in one
     * feedback entry for a given user. (The buyer can leave feedback for the seller, and
     * the seller can leave feedback for the buyer.) That one feedback can be positive,
     * negative, or neutral. The aggregate feedback score of a user represents that
     * user's overall feedback score (referred to as a "feedback rating" on the eBay
     * site). If the user has chosen to make their feedback private, then FeedbackScore
     * is not returned and FeedbackPrivate is returned with a value of true.
     * <br>
     * <br>
     * If a bidder's user information is made anonymous, the value -99 is returned.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getFeedbackScore() {
	    return this.feedbackScore;
	}
	
	/**
	 * public setter
	 *
     * 
     * The aggregate feedback score of a user. A user's feedback score is the net
     * positive feedback minus the net negative feedback left for the user.
     * <br>
     * <br>
     * Feedback scores are a quantitative expression of the desirability of dealing with
     * a user as a buyer or a seller in transactions. Each transaction can result in one
     * feedback entry for a given user. (The buyer can leave feedback for the seller, and
     * the seller can leave feedback for the buyer.) That one feedback can be positive,
     * negative, or neutral. The aggregate feedback score of a user represents that
     * user's overall feedback score (referred to as a "feedback rating" on the eBay
     * site). If the user has chosen to make their feedback private, then FeedbackScore
     * is not returned and FeedbackPrivate is returned with a value of true.
     * <br>
     * <br>
     * If a bidder's user information is made anonymous, the value -99 is returned.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setFeedbackScore(Integer feedbackScore) {
	    this.feedbackScore = feedbackScore;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether eBay has made this user's information anonymous.
     * This occurs when the listing prices (reserve, current, or Buy It Now)
     * reach or exceed a certain amount (such as $200 USD at the time of this
     * writing).
     * <br>
     * <br>
     * If true, certain other fields about this user are not returned, or their values
     * include no identifying characteristics. (The rules are explained in the
     * description of each field.) If false, all user-specific fields contain the user's
     * actual data.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getUserAnonymized() {
	    return this.userAnonymized;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether eBay has made this user's information anonymous.
     * This occurs when the listing prices (reserve, current, or Buy It Now)
     * reach or exceed a certain amount (such as $200 USD at the time of this
     * writing).
     * <br>
     * <br>
     * If true, certain other fields about this user are not returned, or their values
     * include no identifying characteristics. (The rules are explained in the
     * description of each field.) If false, all user-specific fields contain the user's
     * actual data.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setUserAnonymized(Boolean userAnonymized) {
	    this.userAnonymized = userAnonymized;
	}
	/**
     * public getter
     *
     * 
     * If true, identifies a new user who has been a registered eBay user for 30 days
     * or less. Always false after the user has been registered for more than 30
     * days. Does not indicate an ID change.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getNewUser() {
	    return this.newUser;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, identifies a new user who has been a registered eBay user for 30 days
     * or less. Always false after the user has been registered for more than 30
     * days. Does not indicate an ID change.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setNewUser(Boolean newUser) {
	    this.newUser = newUser;
	}
	/**
     * public getter
     *
     * 
     * The date the specified user originally registered with eBay. If a bidder's user
     * information is made anonymous, the value -99 is returned.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getRegistrationDate() {
	    return this.registrationDate;
	}
	
	/**
	 * public setter
	 *
     * 
     * The date the specified user originally registered with eBay. If a bidder's user
     * information is made anonymous, the value -99 is returned.
     * 
     *
     * @param java.util.Date
	 */
	public void setRegistrationDate(Date registrationDate) {
	    this.registrationDate = registrationDate;
	}
	/**
     * public getter
     *
     * 
     * The eBay site with which the user is registered. If a bidder's user information is
     * made anonymous, the value -99 is returned.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SiteCodeType
	 */
	public SiteCodeType getRegistrationSite() {
	    return this.registrationSite;
	}
	
	/**
	 * public setter
	 *
     * 
     * The eBay site with which the user is registered. If a bidder's user information is
     * made anonymous, the value -99 is returned.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SiteCodeType
	 */
	public void setRegistrationSite(SiteCodeType registrationSite) {
	    this.registrationSite = registrationSite;
	}
	/**
     * public getter
     *
     * 
     * The registration-related status of the user.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.UserStatusCodeType
	 */
	public UserStatusCodeType getStatus() {
	    return this.status;
	}
	
	/**
	 * public setter
	 *
     * 
     * The registration-related status of the user.
     * 
     *
     * @param ebay.apis.eblbasecomponents.UserStatusCodeType
	 */
	public void setStatus(UserStatusCodeType status) {
	    this.status = status;
	}
	/**
     * public getter
     *
     * 
     * Type of seller account.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SellerBusinessCodeType
	 */
	public SellerBusinessCodeType getSellerBusinessType() {
	    return this.sellerBusinessType;
	}
	
	/**
	 * public setter
	 *
     * 
     * Type of seller account.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SellerBusinessCodeType
	 */
	public void setSellerBusinessType(SellerBusinessCodeType sellerBusinessType) {
	    this.sellerBusinessType = sellerBusinessType;
	}
	/**
     * public getter
     *
     * 
     * The URL of the seller's eBay Store page.
     * 
     *
     * @returns java.lang.String
	 */
	public String getStoreURL() {
	    return this.storeURL;
	}
	
	/**
	 * public setter
	 *
     * 
     * The URL of the seller's eBay Store page.
     * 
     *
     * @param java.lang.String
	 */
	public void setStoreURL(String storeURL) {
	    this.storeURL = storeURL;
	}
	/**
     * public getter
     *
     * 
     * The name of the seller's eBay Store.
     * 
     *
     * @returns java.lang.String
	 */
	public String getStoreName() {
	    return this.storeName;
	}
	
	/**
	 * public setter
	 *
     * 
     * The name of the seller's eBay Store.
     * 
     *
     * @param java.lang.String
	 */
	public void setStoreName(String storeName) {
	    this.storeName = storeName;
	}
	/**
     * public getter
     *
     * 
     * URL for seller's other items.
     * 
     *
     * @returns java.lang.String
	 */
	public String getSellerItemsURL() {
	    return this.sellerItemsURL;
	}
	
	/**
	 * public setter
	 *
     * 
     * URL for seller's other items.
     * 
     *
     * @param java.lang.String
	 */
	public void setSellerItemsURL(String sellerItemsURL) {
	    this.sellerItemsURL = sellerItemsURL;
	}
	/**
     * public getter
     *
     * 
     * A link to the user's AboutMe page.
     * 
     *
     * @returns java.lang.String
	 */
	public String getAboutMeURL() {
	    return this.aboutMeURL;
	}
	
	/**
	 * public setter
	 *
     * 
     * A link to the user's AboutMe page.
     * 
     *
     * @param java.lang.String
	 */
	public void setAboutMeURL(String aboutMeURL) {
	    this.aboutMeURL = aboutMeURL;
	}
	/**
     * public getter
     *
     * 
     * A link to the URL of the user's MyWorld page.
     * 
     *
     * @returns java.lang.String
	 */
	public String getMyWorldURL() {
	    return this.myWorldURL;
	}
	
	/**
	 * public setter
	 *
     * 
     * A link to the URL of the user's MyWorld page.
     * 
     *
     * @param java.lang.String
	 */
	public void setMyWorldURL(String myWorldURL) {
	    this.myWorldURL = myWorldURL;
	}
	/**
     * public getter
     *
     * 
     * Location of a user's image on the MyWorld page (small version).
     * 
     *
     * @returns java.lang.String
	 */
	public String getMyWorldSmallImage() {
	    return this.myWorldSmallImage;
	}
	
	/**
	 * public setter
	 *
     * 
     * Location of a user's image on the MyWorld page (small version).
     * 
     *
     * @param java.lang.String
	 */
	public void setMyWorldSmallImage(String myWorldSmallImage) {
	    this.myWorldSmallImage = myWorldSmallImage;
	}
	/**
     * public getter
     *
     * 
     * Location of a user's image on the MyWorld page (large version).
     * 
     *
     * @returns java.lang.String
	 */
	public String getMyWorldLargeImage() {
	    return this.myWorldLargeImage;
	}
	
	/**
	 * public setter
	 *
     * 
     * Location of a user's image on the MyWorld page (large version).
     * 
     *
     * @param java.lang.String
	 */
	public void setMyWorldLargeImage(String myWorldLargeImage) {
	    this.myWorldLargeImage = myWorldLargeImage;
	}
	/**
     * public getter
     *
     * 
     * The URL of reviews and guides.
     * 
     *
     * @returns java.lang.String
	 */
	public String getReviewsAndGuidesURL() {
	    return this.reviewsAndGuidesURL;
	}
	
	/**
	 * public setter
	 *
     * 
     * The URL of reviews and guides.
     * 
     *
     * @param java.lang.String
	 */
	public void setReviewsAndGuidesURL(String reviewsAndGuidesURL) {
	    this.reviewsAndGuidesURL = reviewsAndGuidesURL;
	}
	/**
     * public getter
     *
     * 
     * The URL of feedback details.
     * 
     *
     * @returns java.lang.String
	 */
	public String getFeedbackDetailsURL() {
	    return this.feedbackDetailsURL;
	}
	
	/**
	 * public setter
	 *
     * 
     * The URL of feedback details.
     * 
     *
     * @param java.lang.String
	 */
	public void setFeedbackDetailsURL(String feedbackDetailsURL) {
	    this.feedbackDetailsURL = feedbackDetailsURL;
	}
	/**
     * public getter
     *
     * 
     * A seller's positive feedback score. The percentage value of a seller's
     * positive feedback is calculated by dividing the seller's positive feedback
     * score by their negative feedback score. The last 12 months of feedback
     * scores are taken into consideration for this calculation.
     * 
     *
     * @returns java.lang.Float
	 */
	public Float getPositiveFeedbackPercent() {
	    return this.positiveFeedbackPercent;
	}
	
	/**
	 * public setter
	 *
     * 
     * A seller's positive feedback score. The percentage value of a seller's
     * positive feedback is calculated by dividing the seller's positive feedback
     * score by their negative feedback score. The last 12 months of feedback
     * scores are taken into consideration for this calculation.
     * 
     *
     * @param java.lang.Float
	 */
	public void setPositiveFeedbackPercent(Float positiveFeedbackPercent) {
	    this.positiveFeedbackPercent = positiveFeedbackPercent;
	}
	/**
     * public getter
     *
     * 
     * The user's eBay PowerSeller tier. No longer returned for the US, DE/AT/CH, and 
     * UK/IE sites. Note that SellerLevel may be suppressed for other sites, as well. 
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SellerLevelCodeType
	 */
	public SellerLevelCodeType getSellerLevel() {
	    return this.sellerLevel;
	}
	
	/**
	 * public setter
	 *
     * 
     * The user's eBay PowerSeller tier. No longer returned for the US, DE/AT/CH, and 
     * UK/IE sites. Note that SellerLevel may be suppressed for other sites, as well. 
     * 
     *
     * @param ebay.apis.eblbasecomponents.SellerLevelCodeType
	 */
	public void setSellerLevel(SellerLevelCodeType sellerLevel) {
	    this.sellerLevel = sellerLevel;
	}
	/**
     * public getter
     *
     * 
     * Returned when seller is certified as a top-rated seller, and is qualified for benefits such as final value fee
     * discount and increased visibility in fixed-price searches.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getTopRatedSeller() {
	    return this.topRatedSeller;
	}
	
	/**
	 * public setter
	 *
     * 
     * Returned when seller is certified as a top-rated seller, and is qualified for benefits such as final value fee
     * discount and increased visibility in fixed-price searches.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setTopRatedSeller(Boolean topRatedSeller) {
	    this.topRatedSeller = topRatedSeller;
	}

}