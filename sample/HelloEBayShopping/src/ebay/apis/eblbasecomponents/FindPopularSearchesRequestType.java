// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * Retrieves the words most frequently used by eBay users when searching for listings.
 * These keywords are generated weekly by eBay. Thus, calls retrieve static data.
 * FindPopularSearches is not available for the following sites: FR, HK, MY, PH, PL, SG, SE.
 * 
 */
@RootElement(name = "FindPopularSearchesRequest", namespace = "urn:ebay:apis:eBLBaseComponents")
public class FindPopularSearchesRequestType extends AbstractRequestType  {

	@Element(name = "CategoryID")
	private List<String> categoryID;
    
	@Element(name = "QueryKeywords")
	private List<String> queryKeywords;
    
	@Element(name = "MaxKeywords")
	private Integer maxKeywords;
    
	@Element(name = "MaxResultsPerPage")
	private Integer maxResultsPerPage;
    
	@Element(name = "PageNumber")
	private Integer pageNumber;
    
	@Element(name = "IncludeChildCategories")
	private Boolean includeChildCategories;
    
    
	/**
     * public getter
     *
     * 
     * Specify CategoryID to restrict your query to a specific category.
     * Up to 10 categories may be specified.
     * If you are using URL parameters, and you want to specify
     * multiple values, use a comma.
     * For example, if you want to specify Fiction Books and
     * Children's Books, specify CategoryID=377,279.
     * <br>
     * <br>
     * If the specified category ID doesn't match an existing category
     * for the site, an invalid-category error message is returned.
     * To determine valid categories:<br>
     * Use <b>findItemsAdvanced</b> from the <a href="http://www.developer.ebay.com/DevZone/finding/CallRef/index.html">Finding API</a> with CategoryHistogram value in the OutputSelector field 
     * to retrieve matching categories. Then make another
     * <b>findItemsAdvanced</b> call with the ID of a matching category.
     * <br>
     * <br>
     * CategoryID can be used in combination with QueryKeywords and IncludeChildCategories.
     * When IncludeChildCategories is 'true' and used in conjunction with CategoryID,
     * one and only one CategoryID is allowed. Otherwise, up
     * to 10 CategoryIDs are allowed.
     * To retrieve the most popular keywords for a root category, set one of
     * the CategoryIDs to -1, or do not include CategoryID in the Request.
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getCategoryID() {
	    return this.categoryID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specify CategoryID to restrict your query to a specific category.
     * Up to 10 categories may be specified.
     * If you are using URL parameters, and you want to specify
     * multiple values, use a comma.
     * For example, if you want to specify Fiction Books and
     * Children's Books, specify CategoryID=377,279.
     * <br>
     * <br>
     * If the specified category ID doesn't match an existing category
     * for the site, an invalid-category error message is returned.
     * To determine valid categories:<br>
     * Use <b>findItemsAdvanced</b> from the <a href="http://www.developer.ebay.com/DevZone/finding/CallRef/index.html">Finding API</a> with CategoryHistogram value in the OutputSelector field 
     * to retrieve matching categories. Then make another
     * <b>findItemsAdvanced</b> call with the ID of a matching category.
     * <br>
     * <br>
     * CategoryID can be used in combination with QueryKeywords and IncludeChildCategories.
     * When IncludeChildCategories is 'true' and used in conjunction with CategoryID,
     * one and only one CategoryID is allowed. Otherwise, up
     * to 10 CategoryIDs are allowed.
     * To retrieve the most popular keywords for a root category, set one of
     * the CategoryIDs to -1, or do not include CategoryID in the Request.
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setCategoryID(List<String> categoryID) {
	    this.categoryID = categoryID;
	}
	/**
     * public getter
     *
     * 
     * This field allows the user to specify one or more search terms, and then
     * retrieve up to five related search terms and up to five alternative search
     * terms. If you are using URL parameters, use the "%20" URL encoding to represent 
     * a space. For example, use
     * Harry%20Potter to search for items containing these words in any order. 
     * <br>
     * <br>
     * QueryKeywords can be used in combination with CategoryID and IncludeChildCategories.
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getQueryKeywords() {
	    return this.queryKeywords;
	}
	
	/**
	 * public setter
	 *
     * 
     * This field allows the user to specify one or more search terms, and then
     * retrieve up to five related search terms and up to five alternative search
     * terms. If you are using URL parameters, use the "%20" URL encoding to represent 
     * a space. For example, use
     * Harry%20Potter to search for items containing these words in any order. 
     * <br>
     * <br>
     * QueryKeywords can be used in combination with CategoryID and IncludeChildCategories.
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setQueryKeywords(List<String> queryKeywords) {
	    this.queryKeywords = queryKeywords;
	}
	/**
     * public getter
     *
     * 
     * The maximum number of keywords to be retrieved per category
     * for this call.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getMaxKeywords() {
	    return this.maxKeywords;
	}
	
	/**
	 * public setter
	 *
     * 
     * The maximum number of keywords to be retrieved per category
     * for this call.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setMaxKeywords(Integer maxKeywords) {
	    this.maxKeywords = maxKeywords;
	}
	/**
     * public getter
     *
     * 
     * Specifies the maximum number of PopularSearchResults per page in
     * the returned list. If not specified, the default returns 20 results per page.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getMaxResultsPerPage() {
	    return this.maxResultsPerPage;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the maximum number of PopularSearchResults per page in
     * the returned list. If not specified, the default returns 20 results per page.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setMaxResultsPerPage(Integer maxResultsPerPage) {
	    this.maxResultsPerPage = maxResultsPerPage;
	}
	/**
     * public getter
     *
     * 
     * Specifies the number of the page of data to return in the current call.
     * Specify a positive value equal to or lower than the number of pages
     * available (which you determine by examining the results of your initial request).
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getPageNumber() {
	    return this.pageNumber;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the number of the page of data to return in the current call.
     * Specify a positive value equal to or lower than the number of pages
     * available (which you determine by examining the results of your initial request).
     * 
     *
     * @param java.lang.Integer
	 */
	public void setPageNumber(Integer pageNumber) {
	    this.pageNumber = pageNumber;
	}
	/**
     * public getter
     *
     * 
     * If true, only one CategoryID can be specified, and keywords
     * are returned for that category and its subcategories.
     * When IncludeChildCategories is true and used in conjunction with
     * CategoryID, one and only one CategoryID is allowed.
     * <br>
     * <br>
     * If false, keywords are returned only for the categories
     * identified by CategoryID. The default is false.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getIncludeChildCategories() {
	    return this.includeChildCategories;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, only one CategoryID can be specified, and keywords
     * are returned for that category and its subcategories.
     * When IncludeChildCategories is true and used in conjunction with
     * CategoryID, one and only one CategoryID is allowed.
     * <br>
     * <br>
     * If false, keywords are returned only for the categories
     * identified by CategoryID. The default is false.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setIncludeChildCategories(Boolean includeChildCategories) {
	    this.includeChildCategories = includeChildCategories;
	}

}