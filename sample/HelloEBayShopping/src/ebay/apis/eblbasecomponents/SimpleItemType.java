// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import com.leansoft.nano.annotation.*;
import com.leansoft.nano.custom.types.Duration;
import java.util.List;
import java.util.Date;

/**
 * 
 * Contains information for an item.
 * 
 */
public class SimpleItemType   {

	@Element(name = "BestOfferEnabled")
	private Boolean bestOfferEnabled;
    
	@Element(name = "BuyItNowPrice")
	private AmountType buyItNowPrice;
    
	@Element(name = "Description")
	private String description;
    
	@Element(name = "ItemID")
	private String itemID;
    
	@Element(name = "BuyItNowAvailable")
	private Boolean buyItNowAvailable;
    
	@Element(name = "ConvertedBuyItNowPrice")
	private AmountType convertedBuyItNowPrice;
    
	@Element(name = "EndTime")
	private Date endTime;
    
	@Element(name = "StartTime")
	private Date startTime;
    
	@Element(name = "ViewItemURLForNaturalSearch")
	private String viewItemURLForNaturalSearch;
    
	@Element(name = "ListingType")
	private ListingTypeCodeType listingType;
    
	@Element(name = "Location")
	private String location;
    
	@Element(name = "PaymentMethods")
	private List<BuyerPaymentMethodCodeType> paymentMethods;
    
	@Element(name = "GalleryURL")
	private String galleryURL;
    
	@Element(name = "PictureURL")
	private List<String> pictureURL;
    
	@Element(name = "PostalCode")
	private String postalCode;
    
	@Element(name = "PrimaryCategoryID")
	private String primaryCategoryID;
    
	@Element(name = "PrimaryCategoryName")
	private String primaryCategoryName;
    
	@Element(name = "Quantity")
	private Integer quantity;
    
	@Element(name = "Seller")
	private SimpleUserType seller;
    
	@Element(name = "BidCount")
	private Integer bidCount;
    
	@Element(name = "ConvertedCurrentPrice")
	private AmountType convertedCurrentPrice;
    
	@Element(name = "CurrentPrice")
	private AmountType currentPrice;
    
	@Element(name = "HighBidder")
	private SimpleUserType highBidder;
    
	@Element(name = "ListingStatus")
	private ListingStatusCodeType listingStatus;
    
	@Element(name = "QuantitySold")
	private Integer quantitySold;
    
	@Element(name = "ReserveMet")
	private Boolean reserveMet;
    
	@Element(name = "ShipToLocations")
	private List<String> shipToLocations;
    
	@Element(name = "Site")
	private SiteCodeType site;
    
	@Element(name = "TimeLeft")
	private Duration timeLeft;
    
	@Element(name = "Title")
	private String title;
    
	@Element(name = "ShippingCostSummary")
	private ShippingCostSummaryType shippingCostSummary;
    
	@Element(name = "ItemSpecifics")
	private NameValueListArrayType itemSpecifics;
    
	@Element(name = "HitCount")
	private Long hitCount;
    
	@Element(name = "Subtitle")
	private String subtitle;
    
	@Element(name = "PrimaryCategoryIDPath")
	private String primaryCategoryIDPath;
    
	@Element(name = "SecondaryCategoryID")
	private String secondaryCategoryID;
    
	@Element(name = "SecondaryCategoryName")
	private String secondaryCategoryName;
    
	@Element(name = "SecondaryCategoryIDPath")
	private String secondaryCategoryIDPath;
    
	@Element(name = "Charity")
	private CharityType charity;
    
	@Element(name = "GermanMotorsSearchable")
	private Boolean germanMotorsSearchable;
    
	@Element(name = "GetItFast")
	private Boolean getItFast;
    
	@Element(name = "Gift")
	private Boolean gift;
    
	@Element(name = "PictureExists")
	private Boolean pictureExists;
    
	@Element(name = "RecentListing")
	private Boolean recentListing;
    
	@Element(name = "Storefront")
	private StorefrontType storefront;
    
	@Element(name = "DistanceFromBuyer")
	private DistanceType distanceFromBuyer;
    
	@Element(name = "Country")
	private CountryCodeType country;
    
	@Element(name = "WatchCount")
	private Integer watchCount;
    
	@Element(name = "HalfItemCondition")
	private HalfItemConditionCodeType halfItemCondition;
    
	@Element(name = "SellerComments")
	private String sellerComments;
    
	@Element(name = "ReturnPolicy")
	private ReturnPolicyType returnPolicy;
    
	@Element(name = "MinimumToBid")
	private AmountType minimumToBid;
    
	@Element(name = "ProductID")
	private ProductIDType productID;
    
	@Element(name = "AutoPay")
	private Boolean autoPay;
    
	@Element(name = "BusinessSellerDetails")
	private BusinessSellerDetailsType businessSellerDetails;
    
	@Element(name = "PaymentAllowedSite")
	private List<SiteCodeType> paymentAllowedSite;
    
	@Element(name = "IntegratedMerchantCreditCardEnabled")
	private Boolean integratedMerchantCreditCardEnabled;
    
	@Element(name = "Variations")
	private VariationsType variations;
    
	@Element(name = "HandlingTime")
	private Integer handlingTime;
    
	@Element(name = "LotSize")
	private Integer lotSize;
    
	@Element(name = "ConditionID")
	private Integer conditionID;
    
	@Element(name = "ConditionDisplayName")
	private String conditionDisplayName;
    
	@Element(name = "QuantityAvailableHint")
	private QuantityAvailableHintCodeType quantityAvailableHint;
    
	@Element(name = "QuantityThreshold")
	private Integer quantityThreshold;
    
	@Element(name = "DiscountPriceInfo")
	private DiscountPriceInfoType discountPriceInfo;
    
	@Element(name = "ExcludeShipToLocation")
	private List<String> excludeShipToLocation;
    
	@Element(name = "TopRatedListing")
	private Boolean topRatedListing;
    
	@Element(name = "VhrUrl")
	private String vhrUrl;
    
	@Element(name = "VhrAvailable")
	private Boolean vhrAvailable;
    
	@Element(name = "QuantityInfo")
	private QuantityInfo quantityInfo;
    
	@Element(name = "UnitInfo")
	private UnitInfoType unitInfo;
    
	@Element(name = "GlobalShipping")
	private Boolean globalShipping;
    
	private List<Object> any;
    
	@Element(name = "ConditionDescription")
	private String conditionDescription;
    
    
	/**
     * public getter
     *
     * 
     * Whether the seller will accept a best offer for this item.
     * This feature enables a buyer to make a lower-priced binding offer on a
     * fixed price item. Buyers can't see how many offers have been made
     * (only the seller can see this information). To make a best offer on a
     * listing, use the eBay Web site.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getBestOfferEnabled() {
	    return this.bestOfferEnabled;
	}
	
	/**
	 * public setter
	 *
     * 
     * Whether the seller will accept a best offer for this item.
     * This feature enables a buyer to make a lower-priced binding offer on a
     * fixed price item. Buyers can't see how many offers have been made
     * (only the seller can see this information). To make a best offer on a
     * listing, use the eBay Web site.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setBestOfferEnabled(Boolean bestOfferEnabled) {
	    this.bestOfferEnabled = bestOfferEnabled;
	}
	/**
     * public getter
     *
     * 
     * The Buy It Now price of the item, returned in the currency of the site
     * on which the item was listed.
     * <br />
     * <br />
     * For Chinese auctions (competitive bidding online auctions),
     * Buy It Now lets a user purchase the item at a fixed price and
     * end the auction immediately. On most sites, after a Chinese
     * auction has bids, the listing is no longer eligible for Buy It Now.
     * However, calls can return BuyItNowPrice if
     * the seller originally listed the item with a Buy It Now option.
     * Use the Item.BidCount field to determine whether an auction with
     * Buy It Now has bids or not, and use Item.BuyItNowAvailable to see
     * if the Buy It Now option is still available.
     * <br />
     * <br />
     * Price fields are returned as doubles, not necessarily in the traditional
     * monetary format of the site's country. For example, a US Dollar value might be
     * returned as 3.880001 instead of 3.88.
     * <br>
     * <br />
     * For fixed-price (FixedPriceItem) and Store Inventory listings
     * (StoresFixedPrice), see CurrentPrice or ConvertedCurrentPrice instead.
     * <br />
     * <br />
     * Returned only if an item was listed with a Buy It Now option.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getBuyItNowPrice() {
	    return this.buyItNowPrice;
	}
	
	/**
	 * public setter
	 *
     * 
     * The Buy It Now price of the item, returned in the currency of the site
     * on which the item was listed.
     * <br />
     * <br />
     * For Chinese auctions (competitive bidding online auctions),
     * Buy It Now lets a user purchase the item at a fixed price and
     * end the auction immediately. On most sites, after a Chinese
     * auction has bids, the listing is no longer eligible for Buy It Now.
     * However, calls can return BuyItNowPrice if
     * the seller originally listed the item with a Buy It Now option.
     * Use the Item.BidCount field to determine whether an auction with
     * Buy It Now has bids or not, and use Item.BuyItNowAvailable to see
     * if the Buy It Now option is still available.
     * <br />
     * <br />
     * Price fields are returned as doubles, not necessarily in the traditional
     * monetary format of the site's country. For example, a US Dollar value might be
     * returned as 3.880001 instead of 3.88.
     * <br>
     * <br />
     * For fixed-price (FixedPriceItem) and Store Inventory listings
     * (StoresFixedPrice), see CurrentPrice or ConvertedCurrentPrice instead.
     * <br />
     * <br />
     * Returned only if an item was listed with a Buy It Now option.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setBuyItNowPrice(AmountType buyItNowPrice) {
	    this.buyItNowPrice = buyItNowPrice;
	}
	/**
     * public getter
     *
     * 
     * The seller's description of the item, if any. This can include
     * HTML markup and JavaScript. See <a
     * href="types/simpleTypes.html#string">string</a>
     * in Simple Schema Types.
     * <br>
     * <br>
     * Some sellers don't specify their own listing description.
     * Instead, they use a stock description from a catalog available
     * through eBay. (GetSingleItem doesn't return this stock information.)
     * 
     *
     * @returns java.lang.String
	 */
	public String getDescription() {
	    return this.description;
	}
	
	/**
	 * public setter
	 *
     * 
     * The seller's description of the item, if any. This can include
     * HTML markup and JavaScript. See <a
     * href="types/simpleTypes.html#string">string</a>
     * in Simple Schema Types.
     * <br>
     * <br>
     * Some sellers don't specify their own listing description.
     * Instead, they use a stock description from a catalog available
     * through eBay. (GetSingleItem doesn't return this stock information.)
     * 
     *
     * @param java.lang.String
	 */
	public void setDescription(String description) {
	    this.description = description;
	}
	/**
     * public getter
     *
     * 
     * The ID that uniquely identifies the item listing. eBay generates this ID
     * when an item is listed. This ID is unique across all eBay sites.
     * 
     *
     * @returns java.lang.String
	 */
	public String getItemID() {
	    return this.itemID;
	}
	
	/**
	 * public setter
	 *
     * 
     * The ID that uniquely identifies the item listing. eBay generates this ID
     * when an item is listed. This ID is unique across all eBay sites.
     * 
     *
     * @param java.lang.String
	 */
	public void setItemID(String itemID) {
	    this.itemID = itemID;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the item has an active Buy It Now option. On most sites, the
     * Buy It Now option is disabled once a valid bid for the item has been accepted.
     * To see if the item was listed with a Buy It Now option, see if the response
     * includes Item.BuyItNowPrice.
     * <br />
     * <br />
     * This field is returned only if the value is true.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getBuyItNowAvailable() {
	    return this.buyItNowAvailable;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the item has an active Buy It Now option. On most sites, the
     * Buy It Now option is disabled once a valid bid for the item has been accepted.
     * To see if the item was listed with a Buy It Now option, see if the response
     * includes Item.BuyItNowPrice.
     * <br />
     * <br />
     * This field is returned only if the value is true.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setBuyItNowAvailable(Boolean buyItNowAvailable) {
	    this.buyItNowAvailable = buyItNowAvailable;
	}
	/**
     * public getter
     *
     * 
     * The listing's Buy It Now Price (if any), converted into the currency
     * of the site to which you sent this request.
     * <br />
     * <br />
     * Price fields are returned as doubles, not necessarily in the traditional
     * monetary format of the site's country. For example, a US Dollar value might be
     * returned as 3.880001 instead of 3.88.
     * <br />
     * <br />
     * Some eBay sites also support multi-item Buy It Now auctions, where you can buy
     * multiple items from the same listing at a fixed price. See Item.BuyItNowAvailable.
     * <br>
     * <br>
     * For fixed-price (FixedPriceItem) and Store Inventory listings (StoresFixedPrice), see
     * CurrentPrice or ConvertedCurrentPrice instead.
     * <br>
     * <br>
     * Returned only if an item was listed with a Buy It Now option.
     * <br>
     * <br>
     * For active items, refresh this value every 24 hours to pick up the current
     * conversion rates (if this value has been converted).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getConvertedBuyItNowPrice() {
	    return this.convertedBuyItNowPrice;
	}
	
	/**
	 * public setter
	 *
     * 
     * The listing's Buy It Now Price (if any), converted into the currency
     * of the site to which you sent this request.
     * <br />
     * <br />
     * Price fields are returned as doubles, not necessarily in the traditional
     * monetary format of the site's country. For example, a US Dollar value might be
     * returned as 3.880001 instead of 3.88.
     * <br />
     * <br />
     * Some eBay sites also support multi-item Buy It Now auctions, where you can buy
     * multiple items from the same listing at a fixed price. See Item.BuyItNowAvailable.
     * <br>
     * <br>
     * For fixed-price (FixedPriceItem) and Store Inventory listings (StoresFixedPrice), see
     * CurrentPrice or ConvertedCurrentPrice instead.
     * <br>
     * <br>
     * Returned only if an item was listed with a Buy It Now option.
     * <br>
     * <br>
     * For active items, refresh this value every 24 hours to pick up the current
     * conversion rates (if this value has been converted).
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setConvertedBuyItNowPrice(AmountType convertedBuyItNowPrice) {
	    this.convertedBuyItNowPrice = convertedBuyItNowPrice;
	}
	/**
     * public getter
     *
     * 
     * Time stamp (in <a href="types/simpleTypes.html#dateTime">GMT</a>)
     * of when the listing is scheduled to end, or time stamp of the actual end time
     * (if the item ended).
     * 
     *
     * @returns java.util.Date
	 */
	public Date getEndTime() {
	    return this.endTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * Time stamp (in <a href="types/simpleTypes.html#dateTime">GMT</a>)
     * of when the listing is scheduled to end, or time stamp of the actual end time
     * (if the item ended).
     * 
     *
     * @param java.util.Date
	 */
	public void setEndTime(Date endTime) {
	    this.endTime = endTime;
	}
	/**
     * public getter
     *
     * 
     * Time stamp (in <a href="types/simpleTypes.html#dateTime">GMT</a>) that
     * eBay recorded as the moment that the listing was made available.
     * The start time returned by a search call may vary
     * from the value returned by GetSingleItem.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getStartTime() {
	    return this.startTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * Time stamp (in <a href="types/simpleTypes.html#dateTime">GMT</a>) that
     * eBay recorded as the moment that the listing was made available.
     * The start time returned by a search call may vary
     * from the value returned by GetSingleItem.
     * 
     *
     * @param java.util.Date
	 */
	public void setStartTime(Date startTime) {
	    this.startTime = startTime;
	}
	/**
     * public getter
     *
     * 
     * The URL to view this listing on eBay. This URL is optimized to support natural
     * search. That is, this URL is designed to make items on eBay easier to find via
     * popular Internet search engines. For example, this URL specifies the item title, and
     * it is optimized for natural search: "_W0QQ" is like "?" (question mark), "QQ" is like
     * "&" (ampersand), and "Z" is like "=" (equals sign). You shouldn't modify the
     * query syntax in your application. For example, eBay won't recognize the URL if you
     * change QQ to ?.
     * 
     *
     * @returns java.lang.String
	 */
	public String getViewItemURLForNaturalSearch() {
	    return this.viewItemURLForNaturalSearch;
	}
	
	/**
	 * public setter
	 *
     * 
     * The URL to view this listing on eBay. This URL is optimized to support natural
     * search. That is, this URL is designed to make items on eBay easier to find via
     * popular Internet search engines. For example, this URL specifies the item title, and
     * it is optimized for natural search: "_W0QQ" is like "?" (question mark), "QQ" is like
     * "&" (ampersand), and "Z" is like "=" (equals sign). You shouldn't modify the
     * query syntax in your application. For example, eBay won't recognize the URL if you
     * change QQ to ?.
     * 
     *
     * @param java.lang.String
	 */
	public void setViewItemURLForNaturalSearch(String viewItemURLForNaturalSearch) {
	    this.viewItemURLForNaturalSearch = viewItemURLForNaturalSearch;
	}
	/**
     * public getter
     *
     * 
     * The format of the listing, such as online auction, fixed price,
     * or advertisement format.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ListingTypeCodeType
	 */
	public ListingTypeCodeType getListingType() {
	    return this.listingType;
	}
	
	/**
	 * public setter
	 *
     * 
     * The format of the listing, such as online auction, fixed price,
     * or advertisement format.
     * 
     *
     * @param ebay.apis.eblbasecomponents.ListingTypeCodeType
	 */
	public void setListingType(ListingTypeCodeType listingType) {
	    this.listingType = listingType;
	}
	/**
     * public getter
     *
     * 
     * Physical location of the item, as specified by the seller.
     * (This gives a general indication of where the item will be
     * shipped or delivered from.)
     * 
     *
     * @returns java.lang.String
	 */
	public String getLocation() {
	    return this.location;
	}
	
	/**
	 * public setter
	 *
     * 
     * Physical location of the item, as specified by the seller.
     * (This gives a general indication of where the item will be
     * shipped or delivered from.)
     * 
     *
     * @param java.lang.String
	 */
	public void setLocation(String location) {
	    this.location = location;
	}
	/**
     * public getter
     *
     * 
     * Identifies the payment method (such as PayPal) the seller
     * will accept when the buyer pays for the item. <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * If the seller only accepts PayPal, the buyer can still pay
     * with a credit card. PayPal supports major credit cards.
     * </span>
     * <br>
     * Payment methods are not applicable to eBay Real Estate advertisement
     * listings, or other Classified Ad format listings.
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.BuyerPaymentMethodCodeType>
	 */
	public List<BuyerPaymentMethodCodeType> getPaymentMethods() {
	    return this.paymentMethods;
	}
	
	/**
	 * public setter
	 *
     * 
     * Identifies the payment method (such as PayPal) the seller
     * will accept when the buyer pays for the item. <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * If the seller only accepts PayPal, the buyer can still pay
     * with a credit card. PayPal supports major credit cards.
     * </span>
     * <br>
     * Payment methods are not applicable to eBay Real Estate advertisement
     * listings, or other Classified Ad format listings.
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.BuyerPaymentMethodCodeType>
	 */
	public void setPaymentMethods(List<BuyerPaymentMethodCodeType> paymentMethods) {
	    this.paymentMethods = paymentMethods;
	}
	/**
     * public getter
     *
     * 
     * URL for a picture used as the Gallery thumbnail, if any. The image uses
     * one of the following graphics formats: JPEG, BMP, TIF, or GIF. Only
     * returned if the seller chose to show a gallery image.
     * 
     *
     * @returns java.lang.String
	 */
	public String getGalleryURL() {
	    return this.galleryURL;
	}
	
	/**
	 * public setter
	 *
     * 
     * URL for a picture used as the Gallery thumbnail, if any. The image uses
     * one of the following graphics formats: JPEG, BMP, TIF, or GIF. Only
     * returned if the seller chose to show a gallery image.
     * 
     *
     * @param java.lang.String
	 */
	public void setGalleryURL(String galleryURL) {
	    this.galleryURL = galleryURL;
	}
	/**
     * public getter
     *
     * 
     * Contains the URL for an image associated with the item, if any.
     * Returned only if the seller included at least one picture
     * in their listing. Note that this element does not return the URLs of
     * pictures that the seller included in the Description via HTML IMG tags.
     * <br>
     * <br>
     * Items listed the main eBay site can have a maximum of 12 picture URLs
     * hosted by eBay Picture Services, or a maximum of 6 picture URLs hosted by a
     * third party (such as the a photo site). Note that a listing can have up to
     * 24 picture URLs on the US eBay Motors site (for all vehicle listings),
     * and on the eBay Canada Motors site.
     * <br>
     * <br>
     * eBay uses the seller's first picture at the top of the listing's
     * View Item page.
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getPictureURL() {
	    return this.pictureURL;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains the URL for an image associated with the item, if any.
     * Returned only if the seller included at least one picture
     * in their listing. Note that this element does not return the URLs of
     * pictures that the seller included in the Description via HTML IMG tags.
     * <br>
     * <br>
     * Items listed the main eBay site can have a maximum of 12 picture URLs
     * hosted by eBay Picture Services, or a maximum of 6 picture URLs hosted by a
     * third party (such as the a photo site). Note that a listing can have up to
     * 24 picture URLs on the US eBay Motors site (for all vehicle listings),
     * and on the eBay Canada Motors site.
     * <br>
     * <br>
     * eBay uses the seller's first picture at the top of the listing's
     * View Item page.
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setPictureURL(List<String> pictureURL) {
	    this.pictureURL = pictureURL;
	}
	/**
     * public getter
     *
     * 
     * Postal code indicating the physical location of the item,
     * as specified by the seller. (This gives a general indication of where
     * the item will be shipped or delivered from.)
     * 
     *
     * @returns java.lang.String
	 */
	public String getPostalCode() {
	    return this.postalCode;
	}
	
	/**
	 * public setter
	 *
     * 
     * Postal code indicating the physical location of the item,
     * as specified by the seller. (This gives a general indication of where
     * the item will be shipped or delivered from.)
     * 
     *
     * @param java.lang.String
	 */
	public void setPostalCode(String postalCode) {
	    this.postalCode = postalCode;
	}
	/**
     * public getter
     *
     * 
     * Numeric ID of the first (or only) category in which the item is listed.
     * (Listings can appear in more than one category.)
     * 
     *
     * @returns java.lang.String
	 */
	public String getPrimaryCategoryID() {
	    return this.primaryCategoryID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Numeric ID of the first (or only) category in which the item is listed.
     * (Listings can appear in more than one category.)
     * 
     *
     * @param java.lang.String
	 */
	public void setPrimaryCategoryID(String primaryCategoryID) {
	    this.primaryCategoryID = primaryCategoryID;
	}
	/**
     * public getter
     *
     * 
     * Display name of the first (or only) category in which the item is
     * listed. This is a fully qualified category breadcrumb
     * (e.g., Computers & Networking:Laptops, Notebooks).
     * 
     *
     * @returns java.lang.String
	 */
	public String getPrimaryCategoryName() {
	    return this.primaryCategoryName;
	}
	
	/**
	 * public setter
	 *
     * 
     * Display name of the first (or only) category in which the item is
     * listed. This is a fully qualified category breadcrumb
     * (e.g., Computers & Networking:Laptops, Notebooks).
     * 
     *
     * @param java.lang.String
	 */
	public void setPrimaryCategoryName(String primaryCategoryName) {
	    this.primaryCategoryName = primaryCategoryName;
	}
	/**
     * public getter
     *
     * 
     * The number of items the seller is offering in the listing. (Subtract
     * Item.QuantitySold from this value to calculate the number of items
     * currently available for sale.)
     * <br>
     * <br>
     * An online, comptetitive-bidding auction with a Quantity of 1 is referred to as a <
     * i>Chinese</i> auction. Basic fixed-price and Store Inventory listings can
     * have a Quantity of 1 or more.
     * <br />
     * <br />
     * The listing's current or Buy It Now price is the price of the item in the
     * listing.
     * <br />
     * <br />
     * <span class="tablenote"><strong>Note:</strong>
     * A seller can also offer multiple items for sale with a single
     * price for all the items. For example, instead of listing 10 lightbulbs
     * for US 2.00 each, they might list 10 lightbulbs for USD 20.00 (where
     * you have to buy all 10). This is called a "lot."
     * <br />
     * <br />
     * If the listing includes a lot, Quantity does not specify the lot size; it
     * reflects how many lots are being sold. For example, if the original listing
     * included 5 lots of 10 lightbulbs each, Quantity would be 5.
     * </span>
     * <br />
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getQuantity() {
	    return this.quantity;
	}
	
	/**
	 * public setter
	 *
     * 
     * The number of items the seller is offering in the listing. (Subtract
     * Item.QuantitySold from this value to calculate the number of items
     * currently available for sale.)
     * <br>
     * <br>
     * An online, comptetitive-bidding auction with a Quantity of 1 is referred to as a <
     * i>Chinese</i> auction. Basic fixed-price and Store Inventory listings can
     * have a Quantity of 1 or more.
     * <br />
     * <br />
     * The listing's current or Buy It Now price is the price of the item in the
     * listing.
     * <br />
     * <br />
     * <span class="tablenote"><strong>Note:</strong>
     * A seller can also offer multiple items for sale with a single
     * price for all the items. For example, instead of listing 10 lightbulbs
     * for US 2.00 each, they might list 10 lightbulbs for USD 20.00 (where
     * you have to buy all 10). This is called a "lot."
     * <br />
     * <br />
     * If the listing includes a lot, Quantity does not specify the lot size; it
     * reflects how many lots are being sold. For example, if the original listing
     * included 5 lots of 10 lightbulbs each, Quantity would be 5.
     * </span>
     * <br />
     * 
     *
     * @param java.lang.Integer
	 */
	public void setQuantity(Integer quantity) {
	    this.quantity = quantity;
	}
	/**
     * public getter
     *
     * 
     * Container for information about this listing's seller.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SimpleUserType
	 */
	public SimpleUserType getSeller() {
	    return this.seller;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container for information about this listing's seller.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SimpleUserType
	 */
	public void setSeller(SimpleUserType seller) {
	    this.seller = seller;
	}
	/**
     * public getter
     *
     * 
     * The number of bids that have been placed on the item.
     * <br>
     * <br>
     * On most sites, the Buy It Now Option becomes unavailable once an auction
     * has a valid bid. Note that the bid must be above any reserve price.
     * <br>
     * <br>
     * <b>FindPopularItems: </b>For fixed-price listings, the BidCount
     * value is the total number of items purchased so far (in the listing's
     * lifetime).
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getBidCount() {
	    return this.bidCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The number of bids that have been placed on the item.
     * <br>
     * <br>
     * On most sites, the Buy It Now Option becomes unavailable once an auction
     * has a valid bid. Note that the bid must be above any reserve price.
     * <br>
     * <br>
     * <b>FindPopularItems: </b>For fixed-price listings, the BidCount
     * value is the total number of items purchased so far (in the listing's
     * lifetime).
     * 
     *
     * @param java.lang.Integer
	 */
	public void setBidCount(Integer bidCount) {
	    this.bidCount = bidCount;
	}
	/**
     * public getter
     *
     * 
     * The listing's Buy It Now Price (if any), converted into the currency
     * of the site to which you sent this request.
     * <br />
     * <br />
     * Price fields are returned as doubles, not necessarily in the traditional
     * monetary format of the site's country. For example, a US Dollar value might be
     * returned as 3.880001 instead of 3.88.
     * <br>
     * <br />
     * Some eBay sites also support multi-item Buy It Now auctions, where you can buy
     * multiple items from the same listing at a fixed price. See Item.BuyItNowAvailable.
     * <br>
     * <br>
     * For fixed-price (FixedPriceItem) and Store Inventory listings (StoresFixedPrice), see
     * CurrentPrice or ConvertedCurrentPrice instead.
     * <br>
     * <br>
     * Returned only if an item was listed with a Buy It Now option.
     * <br>
     * <br>
     * For active items, refresh this value every 24 hours to pick up the current
     * conversion rates (if this value has been converted).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getConvertedCurrentPrice() {
	    return this.convertedCurrentPrice;
	}
	
	/**
	 * public setter
	 *
     * 
     * The listing's Buy It Now Price (if any), converted into the currency
     * of the site to which you sent this request.
     * <br />
     * <br />
     * Price fields are returned as doubles, not necessarily in the traditional
     * monetary format of the site's country. For example, a US Dollar value might be
     * returned as 3.880001 instead of 3.88.
     * <br>
     * <br />
     * Some eBay sites also support multi-item Buy It Now auctions, where you can buy
     * multiple items from the same listing at a fixed price. See Item.BuyItNowAvailable.
     * <br>
     * <br>
     * For fixed-price (FixedPriceItem) and Store Inventory listings (StoresFixedPrice), see
     * CurrentPrice or ConvertedCurrentPrice instead.
     * <br>
     * <br>
     * Returned only if an item was listed with a Buy It Now option.
     * <br>
     * <br>
     * For active items, refresh this value every 24 hours to pick up the current
     * conversion rates (if this value has been converted).
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setConvertedCurrentPrice(AmountType convertedCurrentPrice) {
	    this.convertedCurrentPrice = convertedCurrentPrice;
	}
	/**
     * public getter
     *
     * 
     * The current price of the item in the currency of the site on which the item was
     * listed. That is, CurrentPrice is in the original listing currency.
     * <br>
     * <br>
     * For competitive-bidding auction listings, this is the current minimum bid price (if
     * the listing has no bids) or the current high bid (if the listing has bids). This
     * does not reflect the BuyItNow price.
     * <br>
     * <br>
     * For Basic Fixed-Price (FixedPriceItem), Store Inventory
     * (StoresFixedPrice), and Ad format (AdType) listings, this is the
     * current fixed price.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getCurrentPrice() {
	    return this.currentPrice;
	}
	
	/**
	 * public setter
	 *
     * 
     * The current price of the item in the currency of the site on which the item was
     * listed. That is, CurrentPrice is in the original listing currency.
     * <br>
     * <br>
     * For competitive-bidding auction listings, this is the current minimum bid price (if
     * the listing has no bids) or the current high bid (if the listing has bids). This
     * does not reflect the BuyItNow price.
     * <br>
     * <br>
     * For Basic Fixed-Price (FixedPriceItem), Store Inventory
     * (StoresFixedPrice), and Ad format (AdType) listings, this is the
     * current fixed price.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setCurrentPrice(AmountType currentPrice) {
	    this.currentPrice = currentPrice;
	}
	/**
     * public getter
     *
     * 
     * The high bidder for comptetitive-bidding auctions that have ended and have a winning
     * bidder. This indicates the user who purchased the item.
     * <br>
     * <br>
     * Not returned for auctions that have received no bids, or for fixed price and
     * Store Inventory listings that are still active.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SimpleUserType
	 */
	public SimpleUserType getHighBidder() {
	    return this.highBidder;
	}
	
	/**
	 * public setter
	 *
     * 
     * The high bidder for comptetitive-bidding auctions that have ended and have a winning
     * bidder. This indicates the user who purchased the item.
     * <br>
     * <br>
     * Not returned for auctions that have received no bids, or for fixed price and
     * Store Inventory listings that are still active.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SimpleUserType
	 */
	public void setHighBidder(SimpleUserType highBidder) {
	    this.highBidder = highBidder;
	}
	/**
     * public getter
     *
     * 
     * Specifies a listing's status in eBay's processing workflow.
     * If an item's EndTime is in the past, but no details about the
     * buyer or high bidder are shown (and the user is not anonymous),
     * use this listing status information to determine whether eBay has
     * finished processing the listing.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ListingStatusCodeType
	 */
	public ListingStatusCodeType getListingStatus() {
	    return this.listingStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies a listing's status in eBay's processing workflow.
     * If an item's EndTime is in the past, but no details about the
     * buyer or high bidder are shown (and the user is not anonymous),
     * use this listing status information to determine whether eBay has
     * finished processing the listing.
     * 
     *
     * @param ebay.apis.eblbasecomponents.ListingStatusCodeType
	 */
	public void setListingStatus(ListingStatusCodeType listingStatus) {
	    this.listingStatus = listingStatus;
	}
	/**
     * public getter
     *
     * 
     * Number of items purchased so far from this listing. (Subtract this value from
     * Item.Quantity to calculate the number of items currently available for sale.)
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getQuantitySold() {
	    return this.quantitySold;
	}
	
	/**
	 * public setter
	 *
     * 
     * Number of items purchased so far from this listing. (Subtract this value from
     * Item.Quantity to calculate the number of items currently available for sale.)
     * 
     *
     * @param java.lang.Integer
	 */
	public void setQuantitySold(Integer quantitySold) {
	    this.quantitySold = quantitySold;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether any bids on this item are greater than the seller's
     * reserve price for the listing (if any).
     * <br>
     * <br>
     * A reserve is the lowest price at which the seller is willing to sell
     * the item. The reserve price is higher than the listing's opening bid
     * (minimum bid) and lower than the Buy It Now price, if any.
     * (The reserve price is only known to the seller.)
     * Some sellers don't set a reserve at all. If a listing does have
     * a reserve price, the highest bidder will only win
     * the item if their bid is also above that price.
     * <br>
     * <br>
     * Only returned for online auctions that have a reserve price. (Fixed price, Store
     * Inventory, and classified ad listings don't have reserve prices.)
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getReserveMet() {
	    return this.reserveMet;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether any bids on this item are greater than the seller's
     * reserve price for the listing (if any).
     * <br>
     * <br>
     * A reserve is the lowest price at which the seller is willing to sell
     * the item. The reserve price is higher than the listing's opening bid
     * (minimum bid) and lower than the Buy It Now price, if any.
     * (The reserve price is only known to the seller.)
     * Some sellers don't set a reserve at all. If a listing does have
     * a reserve price, the highest bidder will only win
     * the item if their bid is also above that price.
     * <br>
     * <br>
     * Only returned for online auctions that have a reserve price. (Fixed price, Store
     * Inventory, and classified ad listings don't have reserve prices.)
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setReserveMet(Boolean reserveMet) {
	    this.reserveMet = reserveMet;
	}
	/**
     * public getter
     *
     * 
     * An international location or region to which the seller is willing
     * to ship this item. Returned only for items that have ShipToLocations
     * specified.
     * <br>
     * <br>
     * <strong>Applicable values</strong>:
     * <p class="ename">&bull;&nbsp;&nbsp; Americas</p>
     * <p class="edef">(North, South, or Latin America)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Asia</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Caribbean</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Europe</p>
     * <p class="ename">&bull;&nbsp;&nbsp; EuropeanUnion</p>
     * <p class="ename">&bull;&nbsp;&nbsp; LatinAmerica</p>
     * <p class="ename">&bull;&nbsp;&nbsp; MiddleEast</p>
     * <p class="ename">&bull;&nbsp;&nbsp; NorthAmerica</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Oceania</p>
     * <p class="edef">(Pacific region other than Asia)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; SouthAmerica</p>
     * <p class="ename">&bull;&nbsp;&nbsp; WillNotShip</p>
     * <p class="edef">(No shipping, buyer must pick up the item)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Worldwide</p>
     * <p class="edef">(Seller will ship worldwide)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; 2-letter country identifier</p>
     * <p class="edef">(See CountryCodeType for values)</p>
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getShipToLocations() {
	    return this.shipToLocations;
	}
	
	/**
	 * public setter
	 *
     * 
     * An international location or region to which the seller is willing
     * to ship this item. Returned only for items that have ShipToLocations
     * specified.
     * <br>
     * <br>
     * <strong>Applicable values</strong>:
     * <p class="ename">&bull;&nbsp;&nbsp; Americas</p>
     * <p class="edef">(North, South, or Latin America)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Asia</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Caribbean</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Europe</p>
     * <p class="ename">&bull;&nbsp;&nbsp; EuropeanUnion</p>
     * <p class="ename">&bull;&nbsp;&nbsp; LatinAmerica</p>
     * <p class="ename">&bull;&nbsp;&nbsp; MiddleEast</p>
     * <p class="ename">&bull;&nbsp;&nbsp; NorthAmerica</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Oceania</p>
     * <p class="edef">(Pacific region other than Asia)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; SouthAmerica</p>
     * <p class="ename">&bull;&nbsp;&nbsp; WillNotShip</p>
     * <p class="edef">(No shipping, buyer must pick up the item)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Worldwide</p>
     * <p class="edef">(Seller will ship worldwide)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; 2-letter country identifier</p>
     * <p class="edef">(See CountryCodeType for values)</p>
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setShipToLocations(List<String> shipToLocations) {
	    this.shipToLocations = shipToLocations;
	}
	/**
     * public getter
     *
     * 
     * The name of the eBay site on which the item was originally listed.
     * For example, if the item is listed on the eBay US site,
     * the value would be US. If it's listed on the eBay Germany site,
     * the value would be Germany.
     * <br>
     * <br>
     * The listing's original site can affect the values of converted
     * (localized) prices (when your request specifies a site
     * that is different from the listing's site).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SiteCodeType
	 */
	public SiteCodeType getSite() {
	    return this.site;
	}
	
	/**
	 * public setter
	 *
     * 
     * The name of the eBay site on which the item was originally listed.
     * For example, if the item is listed on the eBay US site,
     * the value would be US. If it's listed on the eBay Germany site,
     * the value would be Germany.
     * <br>
     * <br>
     * The listing's original site can affect the values of converted
     * (localized) prices (when your request specifies a site
     * that is different from the listing's site).
     * 
     *
     * @param ebay.apis.eblbasecomponents.SiteCodeType
	 */
	public void setSite(SiteCodeType site) {
	    this.site = site;
	}
	/**
     * public getter
     *
     * 
     * Time left before the listing ends.
     * The duration is represented in the ISO 8601 duration format (PnYnMnDTnHnMnS).
     * For ended listings, the time left is PT0S (zero seconds).
     * 
     *
     * @returns com.leansoft.nano.custom.types.Duration
	 */
	public Duration getTimeLeft() {
	    return this.timeLeft;
	}
	
	/**
	 * public setter
	 *
     * 
     * Time left before the listing ends.
     * The duration is represented in the ISO 8601 duration format (PnYnMnDTnHnMnS).
     * For ended listings, the time left is PT0S (zero seconds).
     * 
     *
     * @param com.leansoft.nano.custom.types.Duration
	 */
	public void setTimeLeft(Duration timeLeft) {
	    this.timeLeft = timeLeft;
	}
	/**
     * public getter
     *
     * 
     * Name of the item as it appears in the listing or in search and
     * browse results.
     * <br>
     * <br>
     * <b>For US eBay Motors vehicles only:</b> In item-retrieval
     * calls (like GetSingleItem and GetMultipleItems), this value shows the
     * vehicle Make and Model (e.g., "Buick : Skylark").
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * GetSingleItem does not return the same Item.Title
     * value for US eBay Motors listings. Here's why:
     * <br>
     * <br>
     * In general, GetSingleItem maps to eBay's View Item page. The eBay Motors
     * Web site's View Item page shows two vehicle titles in the title bar: One
     * title is a label based on the Year, Make, Model, and Submodel (e.g.,
     * "1996 Buick Skylark Limited"). The model is included unless it's "Other"
     * or unspecified. The submodel is included if the seller specified a
     * submodel. The other title is a path based on the Make and Model (e.g.,
     * "Buick : Skylark"). The Item.Title value in GetSingleItem maps to this
     * path.
     * </span>
     * <br />
     * 
     *
     * @returns java.lang.String
	 */
	public String getTitle() {
	    return this.title;
	}
	
	/**
	 * public setter
	 *
     * 
     * Name of the item as it appears in the listing or in search and
     * browse results.
     * <br>
     * <br>
     * <b>For US eBay Motors vehicles only:</b> In item-retrieval
     * calls (like GetSingleItem and GetMultipleItems), this value shows the
     * vehicle Make and Model (e.g., "Buick : Skylark").
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * GetSingleItem does not return the same Item.Title
     * value for US eBay Motors listings. Here's why:
     * <br>
     * <br>
     * In general, GetSingleItem maps to eBay's View Item page. The eBay Motors
     * Web site's View Item page shows two vehicle titles in the title bar: One
     * title is a label based on the Year, Make, Model, and Submodel (e.g.,
     * "1996 Buick Skylark Limited"). The model is included unless it's "Other"
     * or unspecified. The submodel is included if the seller specified a
     * submodel. The other title is a path based on the Make and Model (e.g.,
     * "Buick : Skylark"). The Item.Title value in GetSingleItem maps to this
     * path.
     * </span>
     * <br />
     * 
     *
     * @param java.lang.String
	 */
	public void setTitle(String title) {
	    this.title = title;
	}
	/**
     * public getter
     *
     * 
     * Contains basic shipping-related costs for the item. If Item.Quantity
     * is greater than 1, this is the shipping cost for one item.
     * If the seller offers a choice of more than one shipping service
     * (such as UPS Ground and USPS Media mail), this is the cost of the
     * "first" shipping option (usually the lowest cost option).
     * <br>
     * <br>
     * If a listing has shipping costs, use GetShippingCosts if you want to get
     * more details about the services and costs that the seller is offering.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ShippingCostSummaryType
	 */
	public ShippingCostSummaryType getShippingCostSummary() {
	    return this.shippingCostSummary;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains basic shipping-related costs for the item. If Item.Quantity
     * is greater than 1, this is the shipping cost for one item.
     * If the seller offers a choice of more than one shipping service
     * (such as UPS Ground and USPS Media mail), this is the cost of the
     * "first" shipping option (usually the lowest cost option).
     * <br>
     * <br>
     * If a listing has shipping costs, use GetShippingCosts if you want to get
     * more details about the services and costs that the seller is offering.
     * 
     *
     * @param ebay.apis.eblbasecomponents.ShippingCostSummaryType
	 */
	public void setShippingCostSummary(ShippingCostSummaryType shippingCostSummary) {
	    this.shippingCostSummary = shippingCostSummary;
	}
	/**
     * public getter
     *
     * 
     * Category-specific fields that the seller added to describe
     * the listing. The names of these fields are different for items
     * in different categories, so they're returned in a generic
     * Name/Value structure. The field names are usually very well known
     * within the category.
     * <br>
     * <br>
     * For example, a book's item specifics might include a field like
     * Publication Year=2007 (where Publication Year is returned in Name, and
     * 2007 is returned in Value), and a field like Format=Hardcover. But a car's
     * item specifics would be different from a book's, with fields like Make=
     * Toyota and Model=Prius. And a ticket's item specifics would be different
     * from those of books and cars, with fields like EventType=Concerts and
     * Venue=The Fillmore.
     * <br>
     * <br>
     * One of the most common uses for item specifics is the item condition.
     * <br>
     * <br>
     * Only returned if the seller included Item Specifics in the listing.<br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * Starting in May 2010, many categories in Production and Sandbox
     * will start returning the item condition in ConditionID and
     * ConditionDisplayName instead, if the seller used ConditionID
     * instead of ItemSpecifics.
     * Monitor the eBay Developers Program
     * newsletter for details and timing.</span>
     * 
     *
     * @returns ebay.apis.eblbasecomponents.NameValueListArrayType
	 */
	public NameValueListArrayType getItemSpecifics() {
	    return this.itemSpecifics;
	}
	
	/**
	 * public setter
	 *
     * 
     * Category-specific fields that the seller added to describe
     * the listing. The names of these fields are different for items
     * in different categories, so they're returned in a generic
     * Name/Value structure. The field names are usually very well known
     * within the category.
     * <br>
     * <br>
     * For example, a book's item specifics might include a field like
     * Publication Year=2007 (where Publication Year is returned in Name, and
     * 2007 is returned in Value), and a field like Format=Hardcover. But a car's
     * item specifics would be different from a book's, with fields like Make=
     * Toyota and Model=Prius. And a ticket's item specifics would be different
     * from those of books and cars, with fields like EventType=Concerts and
     * Venue=The Fillmore.
     * <br>
     * <br>
     * One of the most common uses for item specifics is the item condition.
     * <br>
     * <br>
     * Only returned if the seller included Item Specifics in the listing.<br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * Starting in May 2010, many categories in Production and Sandbox
     * will start returning the item condition in ConditionID and
     * ConditionDisplayName instead, if the seller used ConditionID
     * instead of ItemSpecifics.
     * Monitor the eBay Developers Program
     * newsletter for details and timing.</span>
     * 
     *
     * @param ebay.apis.eblbasecomponents.NameValueListArrayType
	 */
	public void setItemSpecifics(NameValueListArrayType itemSpecifics) {
	    this.itemSpecifics = itemSpecifics;
	}
	/**
     * public getter
     *
     * 
     * The number of times the listing's View Item page has been viewed (as determined by
     * eBay). Only returned if the seller has chosen to include a hit counter in the
     * listing, and if the seller has also chosen to make the listing's hit count publicly
     * visible. This field is retrieved asynchronously. If you believe the item has a
     * publicly visible hit count, but this field is not returned, retry the call.
     * <br>
     * <br>
     * Not applicable to Half.com
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getHitCount() {
	    return this.hitCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The number of times the listing's View Item page has been viewed (as determined by
     * eBay). Only returned if the seller has chosen to include a hit counter in the
     * listing, and if the seller has also chosen to make the listing's hit count publicly
     * visible. This field is retrieved asynchronously. If you believe the item has a
     * publicly visible hit count, but this field is not returned, retry the call.
     * <br>
     * <br>
     * Not applicable to Half.com
     * 
     *
     * @param java.lang.Long
	 */
	public void setHitCount(Long hitCount) {
	    this.hitCount = hitCount;
	}
	/**
     * public getter
     *
     * 
     * Subtitle of the item. Only returned if the seller included a
     * subtitle for the listing.
     * <br>
     * <br>
     * For US eBay Motors passenger vehicle, motorcycle, and "other vehicle"
     * categories or listings in CA eBay Motors passenger vehicle and
     * motorcycle categories, the seller's subtitle is only available
     * in the Item.ItemSpecifics node. Call GetSingleItem with
     * IncludeSelector=ItemSpecifics to retrieve a listing's Item Specifics.
     * 
     *
     * @returns java.lang.String
	 */
	public String getSubtitle() {
	    return this.subtitle;
	}
	
	/**
	 * public setter
	 *
     * 
     * Subtitle of the item. Only returned if the seller included a
     * subtitle for the listing.
     * <br>
     * <br>
     * For US eBay Motors passenger vehicle, motorcycle, and "other vehicle"
     * categories or listings in CA eBay Motors passenger vehicle and
     * motorcycle categories, the seller's subtitle is only available
     * in the Item.ItemSpecifics node. Call GetSingleItem with
     * IncludeSelector=ItemSpecifics to retrieve a listing's Item Specifics.
     * 
     *
     * @param java.lang.String
	 */
	public void setSubtitle(String subtitle) {
	    this.subtitle = subtitle;
	}
	/**
     * public getter
     *
     * 
     * The fully qualified ID breadcrumb (path) of the first category.
     * For example, if the primary category ID is 45678, and its parent
     * category's ID is 123, the breadcrumb (path) would be 123:45678.
     * 
     *
     * @returns java.lang.String
	 */
	public String getPrimaryCategoryIDPath() {
	    return this.primaryCategoryIDPath;
	}
	
	/**
	 * public setter
	 *
     * 
     * The fully qualified ID breadcrumb (path) of the first category.
     * For example, if the primary category ID is 45678, and its parent
     * category's ID is 123, the breadcrumb (path) would be 123:45678.
     * 
     *
     * @param java.lang.String
	 */
	public void setPrimaryCategoryIDPath(String primaryCategoryIDPath) {
	    this.primaryCategoryIDPath = primaryCategoryIDPath;
	}
	/**
     * public getter
     *
     * 
     * ID of the second category in which the item is listed. Returned only if
     * the seller listed a second category.
     * 
     *
     * @returns java.lang.String
	 */
	public String getSecondaryCategoryID() {
	    return this.secondaryCategoryID;
	}
	
	/**
	 * public setter
	 *
     * 
     * ID of the second category in which the item is listed. Returned only if
     * the seller listed a second category.
     * 
     *
     * @param java.lang.String
	 */
	public void setSecondaryCategoryID(String secondaryCategoryID) {
	    this.secondaryCategoryID = secondaryCategoryID;
	}
	/**
     * public getter
     *
     * 
     * Name of the second category in which the item is listed. Returned only if
     * the seller listed a second category.
     * 
     *
     * @returns java.lang.String
	 */
	public String getSecondaryCategoryName() {
	    return this.secondaryCategoryName;
	}
	
	/**
	 * public setter
	 *
     * 
     * Name of the second category in which the item is listed. Returned only if
     * the seller listed a second category.
     * 
     *
     * @param java.lang.String
	 */
	public void setSecondaryCategoryName(String secondaryCategoryName) {
	    this.secondaryCategoryName = secondaryCategoryName;
	}
	/**
     * public getter
     *
     * 
     * The fully qualified ID breadcrumb (path) of the second category. For example, if the
     * secondary category ID is 45678, and its parent category's ID is 123, the breadcrumb
     * (path) would be 123:45678. Returned only if the seller listed a second category.
     * 
     *
     * @returns java.lang.String
	 */
	public String getSecondaryCategoryIDPath() {
	    return this.secondaryCategoryIDPath;
	}
	
	/**
	 * public setter
	 *
     * 
     * The fully qualified ID breadcrumb (path) of the second category. For example, if the
     * secondary category ID is 45678, and its parent category's ID is 123, the breadcrumb
     * (path) would be 123:45678. Returned only if the seller listed a second category.
     * 
     *
     * @param java.lang.String
	 */
	public void setSecondaryCategoryIDPath(String secondaryCategoryIDPath) {
	    this.secondaryCategoryIDPath = secondaryCategoryIDPath;
	}
	/**
     * public getter
     *
     * 
     * Identifier for a Giving Works listing and the benefiting nonprofit charity
     * organization.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.CharityType
	 */
	public CharityType getCharity() {
	    return this.charity;
	}
	
	/**
	 * public setter
	 *
     * 
     * Identifier for a Giving Works listing and the benefiting nonprofit charity
     * organization.
     * 
     *
     * @param ebay.apis.eblbasecomponents.CharityType
	 */
	public void setCharity(CharityType charity) {
	    this.charity = charity;
	}
	/**
     * public getter
     *
     * 
     * The item is featured in eBay search results on the mobile.de partner site.
     * Applicable to eBay Germany.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getGermanMotorsSearchable() {
	    return this.germanMotorsSearchable;
	}
	
	/**
	 * public setter
	 *
     * 
     * The item is featured in eBay search results on the mobile.de partner site.
     * Applicable to eBay Germany.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setGermanMotorsSearchable(Boolean germanMotorsSearchable) {
	    this.germanMotorsSearchable = germanMotorsSearchable;
	}
	/**
     * public getter
     *
     * 
     * A Get It Fast listing.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getGetItFast() {
	    return this.getItFast;
	}
	
	/**
	 * public setter
	 *
     * 
     * A Get It Fast listing.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setGetItFast(Boolean getItFast) {
	    this.getItFast = getItFast;
	}
	/**
     * public getter
     *
     * 
     * If true, a generic gift icon displays next the listing's title in search and
     * browse pages.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getGift() {
	    return this.gift;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, a generic gift icon displays next the listing's title in search and
     * browse pages.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setGift(Boolean gift) {
	    this.gift = gift;
	}
	/**
     * public getter
     *
     * 
     * Returns true if the item has an associated picture. Not returned
     * if value is false.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getPictureExists() {
	    return this.pictureExists;
	}
	
	/**
	 * public setter
	 *
     * 
     * Returns true if the item has an associated picture. Not returned
     * if value is false.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setPictureExists(Boolean pictureExists) {
	    this.pictureExists = pictureExists;
	}
	/**
     * public getter
     *
     * 
     * Returns true if the item listing is no more than one day old. Not returned
     * if value is false.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getRecentListing() {
	    return this.recentListing;
	}
	
	/**
	 * public setter
	 *
     * 
     * Returns true if the item listing is no more than one day old. Not returned
     * if value is false.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setRecentListing(Boolean recentListing) {
	    this.recentListing = recentListing;
	}
	/**
     * public getter
     *
     * 
     * Returns the seller's store information if the seller has an eBay store.
     * Returns a blank store if the seller does not have an eBay storefront.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.StorefrontType
	 */
	public StorefrontType getStorefront() {
	    return this.storefront;
	}
	
	/**
	 * public setter
	 *
     * 
     * Returns the seller's store information if the seller has an eBay store.
     * Returns a blank store if the seller does not have an eBay storefront.
     * 
     *
     * @param ebay.apis.eblbasecomponents.StorefrontType
	 */
	public void setStorefront(StorefrontType storefront) {
	    this.storefront = storefront;
	}
	/**
     * public getter
     *
     * 
     * The distance of the item from the buyer. The DistanceFromBuyer unit (miles
     * or kilometers) varies by site. If the country whose site you are
     * searching, e.g. India, uses kilometers, then the DistanceFromBuyer unit is
     * kilometers. Otherwise, e.g. if the country is US or UK, then the
     * DistanceFromBuyer unit is miles. DistanceFromBuyer is returned if a
     * value for PostalCode is supplied in the request.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.DistanceType
	 */
	public DistanceType getDistanceFromBuyer() {
	    return this.distanceFromBuyer;
	}
	
	/**
	 * public setter
	 *
     * 
     * The distance of the item from the buyer. The DistanceFromBuyer unit (miles
     * or kilometers) varies by site. If the country whose site you are
     * searching, e.g. India, uses kilometers, then the DistanceFromBuyer unit is
     * kilometers. Otherwise, e.g. if the country is US or UK, then the
     * DistanceFromBuyer unit is miles. DistanceFromBuyer is returned if a
     * value for PostalCode is supplied in the request.
     * 
     *
     * @param ebay.apis.eblbasecomponents.DistanceType
	 */
	public void setDistanceFromBuyer(DistanceType distanceFromBuyer) {
	    this.distanceFromBuyer = distanceFromBuyer;
	}
	/**
     * public getter
     *
     * 
     * Two-letter ISO 3166 country code to indicate the country where the item is located.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.CountryCodeType
	 */
	public CountryCodeType getCountry() {
	    return this.country;
	}
	
	/**
	 * public setter
	 *
     * 
     * Two-letter ISO 3166 country code to indicate the country where the item is located.
     * 
     *
     * @param ebay.apis.eblbasecomponents.CountryCodeType
	 */
	public void setCountry(CountryCodeType country) {
	    this.country = country;
	}
	/**
     * public getter
     *
     * 
     * Number of users who have placed the item on their Watch list.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getWatchCount() {
	    return this.watchCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Number of users who have placed the item on their Watch list.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setWatchCount(Integer watchCount) {
	    this.watchCount = watchCount;
	}
	/**
     * public getter
     *
     * 
     * Returns the Half.com condition code for the item. For example, "brand new,"
     * "used," etc.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.HalfItemConditionCodeType
	 */
	public HalfItemConditionCodeType getHalfItemCondition() {
	    return this.halfItemCondition;
	}
	
	/**
	 * public setter
	 *
     * 
     * Returns the Half.com condition code for the item. For example, "brand new,"
     * "used," etc.
     * 
     *
     * @param ebay.apis.eblbasecomponents.HalfItemConditionCodeType
	 */
	public void setHalfItemCondition(HalfItemConditionCodeType halfItemCondition) {
	    this.halfItemCondition = halfItemCondition;
	}
	/**
     * public getter
     *
     * 
     * Notes that the Seller made when they listed the item. Not returned if the Seller
     * did not make any comments.
     * 
     *
     * @returns java.lang.String
	 */
	public String getSellerComments() {
	    return this.sellerComments;
	}
	
	/**
	 * public setter
	 *
     * 
     * Notes that the Seller made when they listed the item. Not returned if the Seller
     * did not make any comments.
     * 
     *
     * @param java.lang.String
	 */
	public void setSellerComments(String sellerComments) {
	    this.sellerComments = sellerComments;
	}
	/**
     * public getter
     *
     * 
     * If a seller specified return policy details, then this container has fields with
     * those details. The fields that can be returned in this container vary by site.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ReturnPolicyType
	 */
	public ReturnPolicyType getReturnPolicy() {
	    return this.returnPolicy;
	}
	
	/**
	 * public setter
	 *
     * 
     * If a seller specified return policy details, then this container has fields with
     * those details. The fields that can be returned in this container vary by site.
     * 
     *
     * @param ebay.apis.eblbasecomponents.ReturnPolicyType
	 */
	public void setReturnPolicy(ReturnPolicyType returnPolicy) {
	    this.returnPolicy = returnPolicy;
	}
	/**
     * public getter
     *
     * 
     * Smallest amount the next bid on the item can be. Returns same value as
     * Item.StartPrice (if no bids have yet been placed) or CurrentPrice plus
     * BidIncrement (if at least one bid has been placed). Only applicable to
     * competitive-bid auction listings. Returns null for basic Fixed Price
     * (FixedPriceItem),Store Inventory (StoresFixedPrice), and Ad type listings.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getMinimumToBid() {
	    return this.minimumToBid;
	}
	
	/**
	 * public setter
	 *
     * 
     * Smallest amount the next bid on the item can be. Returns same value as
     * Item.StartPrice (if no bids have yet been placed) or CurrentPrice plus
     * BidIncrement (if at least one bid has been placed). Only applicable to
     * competitive-bid auction listings. Returns null for basic Fixed Price
     * (FixedPriceItem),Store Inventory (StoresFixedPrice), and Ad type listings.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setMinimumToBid(AmountType minimumToBid) {
	    this.minimumToBid = minimumToBid;
	}
	/**
     * public getter
     *
     * 
     * A prototype description of a well-known type of item, such as a popular book.
     * <br>
     * <br>
     * When returned for GetSingleItem, is always of type Reference, and serves as a global
     * reference ID for an eBay catalog product.
     * <br>
     * <br>
     * When used as input, retrieves product details for one specific product. Specify the
     * ID as a string, and use the type attribute to indicate the nature of the ID you are
     * specifying.
     * <br>
     * <br>
     * The request requires either QueryKeywords or
     * ProductID, but these fields cannot be used together.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ProductIDType
	 */
	public ProductIDType getProductID() {
	    return this.productID;
	}
	
	/**
	 * public setter
	 *
     * 
     * A prototype description of a well-known type of item, such as a popular book.
     * <br>
     * <br>
     * When returned for GetSingleItem, is always of type Reference, and serves as a global
     * reference ID for an eBay catalog product.
     * <br>
     * <br>
     * When used as input, retrieves product details for one specific product. Specify the
     * ID as a string, and use the type attribute to indicate the nature of the ID you are
     * specifying.
     * <br>
     * <br>
     * The request requires either QueryKeywords or
     * ProductID, but these fields cannot be used together.
     * 
     *
     * @param ebay.apis.eblbasecomponents.ProductIDType
	 */
	public void setProductID(ProductIDType productID) {
	    this.productID = productID;
	}
	/**
     * public getter
     *
     * 
     * If true, the seller requires immediate payment for the item. If false (or
     * not specified), immediate payment is not requested. Buyers must have a
     * PayPal account to purchase items that require immediate payment.
     * <br><br>
     * A seller can choose to require immediate payment for Fixed Price and Buy
     * It Now listings, including eBay Stores Inventory listings. If a Buy It
     * Now item ends as an auction (that is, if the Buy It Now option is removed
     * due to bids being placed on the listing), the immediate payment
     * requirement does not apply.
     * <br><br>
     * <span class="tablenote"><strong>Note:</strong>
     * The value of the AutoPay flag indicates the seller's stated preference
     * only. It does not indicate whether the listing is still a candidate for
     * purchase via immediate payment. For example, if a listing receives bids
     * and no longer qualifies for immediate payment, the value of the AutoPay
     * flag does not change.
     * </span>
     * <br>
     * Only applicable to items listed on PayPal-enabled sites and in categories
     * that support immediate payment. Not applicable to Half.com.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getAutoPay() {
	    return this.autoPay;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, the seller requires immediate payment for the item. If false (or
     * not specified), immediate payment is not requested. Buyers must have a
     * PayPal account to purchase items that require immediate payment.
     * <br><br>
     * A seller can choose to require immediate payment for Fixed Price and Buy
     * It Now listings, including eBay Stores Inventory listings. If a Buy It
     * Now item ends as an auction (that is, if the Buy It Now option is removed
     * due to bids being placed on the listing), the immediate payment
     * requirement does not apply.
     * <br><br>
     * <span class="tablenote"><strong>Note:</strong>
     * The value of the AutoPay flag indicates the seller's stated preference
     * only. It does not indicate whether the listing is still a candidate for
     * purchase via immediate payment. For example, if a listing receives bids
     * and no longer qualifies for immediate payment, the value of the AutoPay
     * flag does not change.
     * </span>
     * <br>
     * Only applicable to items listed on PayPal-enabled sites and in categories
     * that support immediate payment. Not applicable to Half.com.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setAutoPay(Boolean autoPay) {
	    this.autoPay = autoPay;
	}
	/**
     * public getter
     *
     * 
     * Returns the seller's business information. Set the SellerBusinessCodeType
     * to 'Commercial' in the request to return the related information. This is only
     * applicable for sites where Business Seller options are supported.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.BusinessSellerDetailsType
	 */
	public BusinessSellerDetailsType getBusinessSellerDetails() {
	    return this.businessSellerDetails;
	}
	
	/**
	 * public setter
	 *
     * 
     * Returns the seller's business information. Set the SellerBusinessCodeType
     * to 'Commercial' in the request to return the related information. This is only
     * applicable for sites where Business Seller options are supported.
     * 
     *
     * @param ebay.apis.eblbasecomponents.BusinessSellerDetailsType
	 */
	public void setBusinessSellerDetails(BusinessSellerDetailsType businessSellerDetails) {
	    this.businessSellerDetails = businessSellerDetails;
	}
	/**
     * public getter
     *
     * 
     * Enables you to view the sites on which an item can be purchased,
     * based on the payment methods offered for the item.
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.SiteCodeType>
	 */
	public List<SiteCodeType> getPaymentAllowedSite() {
	    return this.paymentAllowedSite;
	}
	
	/**
	 * public setter
	 *
     * 
     * Enables you to view the sites on which an item can be purchased,
     * based on the payment methods offered for the item.
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.SiteCodeType>
	 */
	public void setPaymentAllowedSite(List<SiteCodeType> paymentAllowedSite) {
	    this.paymentAllowedSite = paymentAllowedSite;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the item can be paid for through a payment gateway account. If
     * IntegratedMerchantCreditCardEnabled is true, then integrated merchant credit card is
     * enabled for credit cards because the seller has a payment gateway account. Therefore,
     * if IntegratedMerchantCreditCardEnabled is true, and AmEx, Discover, or VisaMC is
     * returned for an item, then on checkout, an online credit-card payment is processed
     * through a payment gateway account.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getIntegratedMerchantCreditCardEnabled() {
	    return this.integratedMerchantCreditCardEnabled;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the item can be paid for through a payment gateway account. If
     * IntegratedMerchantCreditCardEnabled is true, then integrated merchant credit card is
     * enabled for credit cards because the seller has a payment gateway account. Therefore,
     * if IntegratedMerchantCreditCardEnabled is true, and AmEx, Discover, or VisaMC is
     * returned for an item, then on checkout, an online credit-card payment is processed
     * through a payment gateway account.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setIntegratedMerchantCreditCardEnabled(Boolean integratedMerchantCreditCardEnabled) {
	    this.integratedMerchantCreditCardEnabled = integratedMerchantCreditCardEnabled;
	}
	/**
     * public getter
     *
     * 
     * Variations are multiple similar (but not identical) items in a single fixed-price (or
     * Store Inventory Format) listing. For example, a single listing could contain multiple
     * items of the same brand and model that vary by color and size (like "Blue, Large" and
     * "Black, Medium"). Each variation can have its own quantity and price. Only returned
     * if the listing contains multiple variations.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.VariationsType
	 */
	public VariationsType getVariations() {
	    return this.variations;
	}
	
	/**
	 * public setter
	 *
     * 
     * Variations are multiple similar (but not identical) items in a single fixed-price (or
     * Store Inventory Format) listing. For example, a single listing could contain multiple
     * items of the same brand and model that vary by color and size (like "Blue, Large" and
     * "Black, Medium"). Each variation can have its own quantity and price. Only returned
     * if the listing contains multiple variations.
     * 
     *
     * @param ebay.apis.eblbasecomponents.VariationsType
	 */
	public void setVariations(VariationsType variations) {
	    this.variations = variations;
	}
	/**
     * public getter
     *
     * 
     * Specifies the maximum number of business days the seller commits to for preparing an item to be shipped after receiving a cleared payment. When listing the item the seller sets this to a positive integer value (1, 2, 3, 4, 5, 10, 15, or 20) corresponding to the number of days. This time does not include the shipping time (the carrier's transit time). <strong>GetSingleItem</strong> or <strong>GetMultipleItems</strong> returns <strong>HandlingTime</strong> only when shipping service options are specified for the item and the seller specified a handling time.
     * <br>
     * <br>
     * Valid for flat and calculated shipping. Does not apply when there is no shipping, or when using local pickup only or freight shipping.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getHandlingTime() {
	    return this.handlingTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the maximum number of business days the seller commits to for preparing an item to be shipped after receiving a cleared payment. When listing the item the seller sets this to a positive integer value (1, 2, 3, 4, 5, 10, 15, or 20) corresponding to the number of days. This time does not include the shipping time (the carrier's transit time). <strong>GetSingleItem</strong> or <strong>GetMultipleItems</strong> returns <strong>HandlingTime</strong> only when shipping service options are specified for the item and the seller specified a handling time.
     * <br>
     * <br>
     * Valid for flat and calculated shipping. Does not apply when there is no shipping, or when using local pickup only or freight shipping.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setHandlingTime(Integer handlingTime) {
	    this.handlingTime = handlingTime;
	}
	/**
     * public getter
     *
     * 
     * A lot is a set of two or more similar items that must be purchased together in
     * a single transaction. A listing can have multiple lots (instead of multiple
     * items). When LotSize is specified, the listing price reflects the price of
     * each lot (not each item within the lot). In this case, Quantity indicates the
     * number of lots being listed, and LotSize indicates the number of items in each
     * lot. (If a listing has no lots, Quantity indicates the number of separate
     * items being listed.) Important: Lot items can be listed only in lot-enabled
     * categories. GetCategories returns lot size disabled with a value of true
     * for categories that do not support lots.
     * <br /><br />
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getLotSize() {
	    return this.lotSize;
	}
	
	/**
	 * public setter
	 *
     * 
     * A lot is a set of two or more similar items that must be purchased together in
     * a single transaction. A listing can have multiple lots (instead of multiple
     * items). When LotSize is specified, the listing price reflects the price of
     * each lot (not each item within the lot). In this case, Quantity indicates the
     * number of lots being listed, and LotSize indicates the number of items in each
     * lot. (If a listing has no lots, Quantity indicates the number of separate
     * items being listed.) Important: Lot items can be listed only in lot-enabled
     * categories. GetCategories returns lot size disabled with a value of true
     * for categories that do not support lots.
     * <br /><br />
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setLotSize(Integer lotSize) {
	    this.lotSize = lotSize;
	}
	/**
     * public getter
     *
     * 
     * <span class="tablenote"><b>Note:</b>
     * Starting in early March 2010, this will be supported for a
     * few test categories in the Sandbox.
     * In May 2010, ConditionID will be supported for many categories in
     * Production and Sandbox. Monitor the eBay Developers Program
     * newsletter for details and timing.</span>
     * <br>
     * <br>
     * The numeric ID (e.g., 1000) for the item condition.
     * Only returned when the seller specified ConditionID in their listing. Also see ItemSpecifics in case the seller used that
     * field for the condition instead.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getConditionID() {
	    return this.conditionID;
	}
	
	/**
	 * public setter
	 *
     * 
     * <span class="tablenote"><b>Note:</b>
     * Starting in early March 2010, this will be supported for a
     * few test categories in the Sandbox.
     * In May 2010, ConditionID will be supported for many categories in
     * Production and Sandbox. Monitor the eBay Developers Program
     * newsletter for details and timing.</span>
     * <br>
     * <br>
     * The numeric ID (e.g., 1000) for the item condition.
     * Only returned when the seller specified ConditionID in their listing. Also see ItemSpecifics in case the seller used that
     * field for the condition instead.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setConditionID(Integer conditionID) {
	    this.conditionID = conditionID;
	}
	/**
     * public getter
     *
     * 
     * <span class="tablenote"><b>Note:</b>
     * Starting in early March 2010, this will be supported for a
     * few test categories in the Sandbox.
     * In May 2010, ConditionDisplayName will be supported for
     * many categories in Production and Sandbox.
     * Monitor the eBay Developers Program
     * newsletter for details and timing.</span>
     * <br>
     * <br>
     * The human-readable label for the item condition.
     * Display names are localized for the site on
     * which they're listed (not necessarily the site on which
     * they're viewed).<br>
     * <br>
     * Most categories use the same display name for the
     * same condition ID. Some categories may override the display name
     * based on buyer expectations for items in the category.
     * For example, condition ID 1000 could be called
     * "New" in one category and "New with tags" in another.<br>
     * <br>
     * Behind the scenes, eBay's search engine uses the ID
     * (not the display name) to determine whether items are
     * new, used, or refurbished.<br>
     * <br>
     * Only returned when ConditionID is returned. Also see ItemSpecifics
     * in case the seller used that field for the condition instead.
     * 
     *
     * @returns java.lang.String
	 */
	public String getConditionDisplayName() {
	    return this.conditionDisplayName;
	}
	
	/**
	 * public setter
	 *
     * 
     * <span class="tablenote"><b>Note:</b>
     * Starting in early March 2010, this will be supported for a
     * few test categories in the Sandbox.
     * In May 2010, ConditionDisplayName will be supported for
     * many categories in Production and Sandbox.
     * Monitor the eBay Developers Program
     * newsletter for details and timing.</span>
     * <br>
     * <br>
     * The human-readable label for the item condition.
     * Display names are localized for the site on
     * which they're listed (not necessarily the site on which
     * they're viewed).<br>
     * <br>
     * Most categories use the same display name for the
     * same condition ID. Some categories may override the display name
     * based on buyer expectations for items in the category.
     * For example, condition ID 1000 could be called
     * "New" in one category and "New with tags" in another.<br>
     * <br>
     * Behind the scenes, eBay's search engine uses the ID
     * (not the display name) to determine whether items are
     * new, used, or refurbished.<br>
     * <br>
     * Only returned when ConditionID is returned. Also see ItemSpecifics
     * in case the seller used that field for the condition instead.
     * 
     *
     * @param java.lang.String
	 */
	public void setConditionDisplayName(String conditionDisplayName) {
	    this.conditionDisplayName = conditionDisplayName;
	}
	/**
     * public getter
     *
     * 
     * Indicates the type of message that will be returned describing the quantity
     * available for the item.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.QuantityAvailableHintCodeType
	 */
	public QuantityAvailableHintCodeType getQuantityAvailableHint() {
	    return this.quantityAvailableHint;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the type of message that will be returned describing the quantity
     * available for the item.
     * 
     *
     * @param ebay.apis.eblbasecomponents.QuantityAvailableHintCodeType
	 */
	public void setQuantityAvailableHint(QuantityAvailableHintCodeType quantityAvailableHint) {
	    this.quantityAvailableHint = quantityAvailableHint;
	}
	/**
     * public getter
     *
     * 
     * The quantity threshold above which the seller prefers not to show the actual
     * quantity available. Returned when the quantity available is greater than the
     * value of quantity threshold. Currently, 10 is the only available value for
     * this threshold.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getQuantityThreshold() {
	    return this.quantityThreshold;
	}
	
	/**
	 * public setter
	 *
     * 
     * The quantity threshold above which the seller prefers not to show the actual
     * quantity available. Returned when the quantity available is greater than the
     * value of quantity threshold. Currently, 10 is the only available value for
     * this threshold.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setQuantityThreshold(Integer quantityThreshold) {
	    this.quantityThreshold = quantityThreshold;
	}
	/**
     * public getter
     *
     * 
     * This container provides information for an item that has a Strikethrough Price
     * (STP) or a Minimum Advertised Price (MAP) discount pricing treatment. STP and MAP
     * applies to only fixed price, BIN items. STP is available on the US, UK, and German
     * (DE) sites, while MAP is available only on the US site.
     * <br > <br >
     * Discount pricing is available to qualified sellers (and their associated developers) who
     * participate in the Discount Pricing Program. Once qualified, sellers receive a
     * "sepcial account flag" (SAF) that allows them to apply Discount Pricing to both MSKU
     * and Non-MSKU items.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.DiscountPriceInfoType
	 */
	public DiscountPriceInfoType getDiscountPriceInfo() {
	    return this.discountPriceInfo;
	}
	
	/**
	 * public setter
	 *
     * 
     * This container provides information for an item that has a Strikethrough Price
     * (STP) or a Minimum Advertised Price (MAP) discount pricing treatment. STP and MAP
     * applies to only fixed price, BIN items. STP is available on the US, UK, and German
     * (DE) sites, while MAP is available only on the US site.
     * <br > <br >
     * Discount pricing is available to qualified sellers (and their associated developers) who
     * participate in the Discount Pricing Program. Once qualified, sellers receive a
     * "sepcial account flag" (SAF) that allows them to apply Discount Pricing to both MSKU
     * and Non-MSKU items.
     * 
     *
     * @param ebay.apis.eblbasecomponents.DiscountPriceInfoType
	 */
	public void setDiscountPriceInfo(DiscountPriceInfoType discountPriceInfo) {
	    this.discountPriceInfo = discountPriceInfo;
	}
	/**
     * public getter
     *
     * 
     * Use this field to specify an international country or region, or a special domestic
     * location (for sites supporting this feature, currently US, UK, DE) to where you
     * will not ship the associated item. On input, repeat this element for each
     * location that you want to exclude as a shipping destination for your item.
     * <br><br>
     * Set ShipToRegistrationCountry to true to have your ExcludeShipToLocation
     * settings applied to your listing. The locations you have excluded display in
     * the Shipping and Handling section of your item listing.
     * <br><br>
     * If a buyer's primary ship-to location is a location that you have listed as
     * an excluded ship-to location (or if the buyer does not have a primary ship-to
     * location), they will receive an error message if they attempt to buy or place
     * a bid on your item.
     * <br><br>
     * The exclude ship-to location values are eBay regions and countries. To see
     * the valid exclude ship-to locations for a specified site, call GeteBayDetails
     * with DetailName set to ExcludeShippingLocationDetails. Repeat GeteBayDetails
     * for each site on which you list.
     * <br><br>
     * This field works in conjunction with Item.ShipToLocations to create a set of
     * international countries and regions to where you will, and will not, ship.
     * You can list a region in the ShipToLocations field, then exclude specific
     * countries within that region with this field (for example, you can specify
     * Africa in ShipToLocations, yet exclude Chad with a ExcludeShipToLocation
     * setting). In addition, if your ShipToLocations is Worldwide, you can use
     * this field to specify both regions and countries that you want to exclude
     * from your shipping destinations.
     * <br><br>
     * You can specify a default set of locations to where you will not ship in My
     * eBay. If you create an Exclude Ship-To List, it is, by default, in effect
     * when you list items. However, if you specify any value in this field on
     * input, it nullifies the default settings in your Exclude Ship-To List. (If
     * you use ExcludeShipToLocation when you list an item, you will need to list
     * all the locations to where you will not ship the associated item, regardless
     * of the default settings in your Exclude Ship-To List.)
     * <br><br>
     * Specify NONE in this field to override the default Exclude Ship-To List you
     * might have set up in My eBay and indicate that you do not want to exclude any
     * shipping locations from the respective item listing.
     * <br><br>
     * <span class="tablenote"><strong>Note:</strong>
     * To enable your default Exclude Ship-To List, you must enable Exclude
     * Shipping Locations and Buyer Requirements in your My eBay Site Preferences.
     * For details, see the KnowledgeBase Article <a href=
     * "https://ebay.custhelp.com/cgi-bin/ebay.cfg/php/enduser/std_adp.php?p_faqid=1495"
     * >HowTo: ExcludeShipToLocation</a>.
     * </span>
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getExcludeShipToLocation() {
	    return this.excludeShipToLocation;
	}
	
	/**
	 * public setter
	 *
     * 
     * Use this field to specify an international country or region, or a special domestic
     * location (for sites supporting this feature, currently US, UK, DE) to where you
     * will not ship the associated item. On input, repeat this element for each
     * location that you want to exclude as a shipping destination for your item.
     * <br><br>
     * Set ShipToRegistrationCountry to true to have your ExcludeShipToLocation
     * settings applied to your listing. The locations you have excluded display in
     * the Shipping and Handling section of your item listing.
     * <br><br>
     * If a buyer's primary ship-to location is a location that you have listed as
     * an excluded ship-to location (or if the buyer does not have a primary ship-to
     * location), they will receive an error message if they attempt to buy or place
     * a bid on your item.
     * <br><br>
     * The exclude ship-to location values are eBay regions and countries. To see
     * the valid exclude ship-to locations for a specified site, call GeteBayDetails
     * with DetailName set to ExcludeShippingLocationDetails. Repeat GeteBayDetails
     * for each site on which you list.
     * <br><br>
     * This field works in conjunction with Item.ShipToLocations to create a set of
     * international countries and regions to where you will, and will not, ship.
     * You can list a region in the ShipToLocations field, then exclude specific
     * countries within that region with this field (for example, you can specify
     * Africa in ShipToLocations, yet exclude Chad with a ExcludeShipToLocation
     * setting). In addition, if your ShipToLocations is Worldwide, you can use
     * this field to specify both regions and countries that you want to exclude
     * from your shipping destinations.
     * <br><br>
     * You can specify a default set of locations to where you will not ship in My
     * eBay. If you create an Exclude Ship-To List, it is, by default, in effect
     * when you list items. However, if you specify any value in this field on
     * input, it nullifies the default settings in your Exclude Ship-To List. (If
     * you use ExcludeShipToLocation when you list an item, you will need to list
     * all the locations to where you will not ship the associated item, regardless
     * of the default settings in your Exclude Ship-To List.)
     * <br><br>
     * Specify NONE in this field to override the default Exclude Ship-To List you
     * might have set up in My eBay and indicate that you do not want to exclude any
     * shipping locations from the respective item listing.
     * <br><br>
     * <span class="tablenote"><strong>Note:</strong>
     * To enable your default Exclude Ship-To List, you must enable Exclude
     * Shipping Locations and Buyer Requirements in your My eBay Site Preferences.
     * For details, see the KnowledgeBase Article <a href=
     * "https://ebay.custhelp.com/cgi-bin/ebay.cfg/php/enduser/std_adp.php?p_faqid=1495"
     * >HowTo: ExcludeShipToLocation</a>.
     * </span>
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setExcludeShipToLocation(List<String> excludeShipToLocation) {
	    this.excludeShipToLocation = excludeShipToLocation;
	}
	/**
     * public getter
     *
     * 
     * This field is only applicable to the US site, and will only be returned if the US
     * seller qualifies as a Top-Rated Seller. The current requirements for US sellers to
     * qualify as Top-Rated Sellers are:
     * <ul>
     * <li>100 or more selling transactions per year</li>
     * <li>Shipment tracking information provided to buyer within handling time
     * for at least 90 percent of their listings</li>
     * </ul>
     * <br/><br/>
     * If this flag is returned for a listing, it indicates that the listing meets the new
     * requirements for a Top-Rated Listing. A Top-Rated Listing must meet the following
     * requirements:
     * <ul>
     * <li>14-day (or longer) return policy with Money Back option</li>
     * <li>1-day Handling Time or better</li>
     * </ul>
     * <br/><br/>
     * A new <b>Top-Rated Plus</b> seal will start appearing on the View Item
     * page for all Top-Rated Listings beginning in November 2012. This seal will
     * replace the <b>Top-Rated Seller</b> badge. US Top-Rated Sellers get a
     * 20 percent discount on their FVF for all listings that qualify as Top-Rated Listings.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getTopRatedListing() {
	    return this.topRatedListing;
	}
	
	/**
	 * public setter
	 *
     * 
     * This field is only applicable to the US site, and will only be returned if the US
     * seller qualifies as a Top-Rated Seller. The current requirements for US sellers to
     * qualify as Top-Rated Sellers are:
     * <ul>
     * <li>100 or more selling transactions per year</li>
     * <li>Shipment tracking information provided to buyer within handling time
     * for at least 90 percent of their listings</li>
     * </ul>
     * <br/><br/>
     * If this flag is returned for a listing, it indicates that the listing meets the new
     * requirements for a Top-Rated Listing. A Top-Rated Listing must meet the following
     * requirements:
     * <ul>
     * <li>14-day (or longer) return policy with Money Back option</li>
     * <li>1-day Handling Time or better</li>
     * </ul>
     * <br/><br/>
     * A new <b>Top-Rated Plus</b> seal will start appearing on the View Item
     * page for all Top-Rated Listings beginning in November 2012. This seal will
     * replace the <b>Top-Rated Seller</b> badge. US Top-Rated Sellers get a
     * 20 percent discount on their FVF for all listings that qualify as Top-Rated Listings.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setTopRatedListing(Boolean topRatedListing) {
	    this.topRatedListing = topRatedListing;
	}
	/**
     * public getter
     *
     * 
     * The URL to the eBay Motors item's full Vehicle History Report.
     * Only returned when the item has a Vehicle History Report.
     * 
     *
     * @returns java.lang.String
	 */
	public String getVhrUrl() {
	    return this.vhrUrl;
	}
	
	/**
	 * public setter
	 *
     * 
     * The URL to the eBay Motors item's full Vehicle History Report.
     * Only returned when the item has a Vehicle History Report.
     * 
     *
     * @param java.lang.String
	 */
	public void setVhrUrl(String vhrUrl) {
	    this.vhrUrl = vhrUrl;
	}
	/**
     * public getter
     *
     * 
     * If true, the eBay Motors item has a Vehicle History Report
     * associated with it.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getVhrAvailable() {
	    return this.vhrAvailable;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, the eBay Motors item has a Vehicle History Report
     * associated with it.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setVhrAvailable(Boolean vhrAvailable) {
	    this.vhrAvailable = vhrAvailable;
	}
	/**
     * public getter
     *
     * 
     * This container consists of the <b>MinimumRemnantSet</b>
     * field, which sets the minimum amount of event tickets that can
     * remain in the fixed-price listing's inventory after a buyer
     * purchases one or more tickets (but not all) from the listing.
     * <br/><br/>
     * This field is currently only applicable for event ticket listings in
     * US and CA, but may apply to other categories in the future. It is
     * only returned if set by the seller in the listing.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.QuantityInfo
	 */
	public QuantityInfo getQuantityInfo() {
	    return this.quantityInfo;
	}
	
	/**
	 * public setter
	 *
     * 
     * This container consists of the <b>MinimumRemnantSet</b>
     * field, which sets the minimum amount of event tickets that can
     * remain in the fixed-price listing's inventory after a buyer
     * purchases one or more tickets (but not all) from the listing.
     * <br/><br/>
     * This field is currently only applicable for event ticket listings in
     * US and CA, but may apply to other categories in the future. It is
     * only returned if set by the seller in the listing.
     * 
     *
     * @param ebay.apis.eblbasecomponents.QuantityInfo
	 */
	public void setQuantityInfo(QuantityInfo quantityInfo) {
	    this.quantityInfo = quantityInfo;
	}
	/**
     * public getter
     *
     * 
     *    Contains information about the weight, volume or other quantity measurement of a listed item so buyers can compare per-unit prices. The European Union requires listings for certain types of products to include the price per unit. eBay uses this information and the item's listed price to calculate and display the unit price on eBay EU sites. 
     *    <br/><br/>
     *                   <span class="tablenote">
     *                   <strong>Note:</strong> This information is currently required only for business sellers, and only for listings with a Buy It Now option.
     *                   </span>
     *    
     *
     * @returns ebay.apis.eblbasecomponents.UnitInfoType
	 */
	public UnitInfoType getUnitInfo() {
	    return this.unitInfo;
	}
	
	/**
	 * public setter
	 *
     * 
     *    Contains information about the weight, volume or other quantity measurement of a listed item so buyers can compare per-unit prices. The European Union requires listings for certain types of products to include the price per unit. eBay uses this information and the item's listed price to calculate and display the unit price on eBay EU sites. 
     *    <br/><br/>
     *                   <span class="tablenote">
     *                   <strong>Note:</strong> This information is currently required only for business sellers, and only for listings with a Buy It Now option.
     *                   </span>
     *    
     *
     * @param ebay.apis.eblbasecomponents.UnitInfoType
	 */
	public void setUnitInfo(UnitInfoType unitInfo) {
	    this.unitInfo = unitInfo;
	}
	/**
     * public getter
     *
     * 
     *    Indicates whether eBay's Global Shipping Program is offered for the listing. If the value of <strong>GlobalShipping</strong> is <code>true</code>, the Global Shipping Program is the default international shipping option for the listing, and eBay designates an appropriate international shipping service. If the value of <strong>GlobalShipping</strong> is <code>false</code>, the seller is responsible for specifying an international shipping service for the listing if desired.
     *    
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getGlobalShipping() {
	    return this.globalShipping;
	}
	
	/**
	 * public setter
	 *
     * 
     *    Indicates whether eBay's Global Shipping Program is offered for the listing. If the value of <strong>GlobalShipping</strong> is <code>true</code>, the Global Shipping Program is the default international shipping option for the listing, and eBay designates an appropriate international shipping service. If the value of <strong>GlobalShipping</strong> is <code>false</code>, the seller is responsible for specifying an international shipping service for the listing if desired.
     *    
     *
     * @param java.lang.Boolean
	 */
	public void setGlobalShipping(Boolean globalShipping) {
	    this.globalShipping = globalShipping;
	}
	/**
	 * public getter
	 *
     * @returns java.util.List<java.lang.Object>
	 */
	public List<Object> getAny() {
	    return this.any;
	}
	
	/**
	 * public setter
	 *
     * @param java.util.List<java.lang.Object>
	 */
	public void setAny(List<Object> any) {
	    this.any = any;
	}
	/**
     * public getter
     *
     * 
     * This string field is used by the seller to more clearly describe the condition of
     * items that are not brand new. This field becomes available to sellers starting in
     * November 2012.
     * <br><br>
     * The <b>ConditionDescription</b> field will be available for all
     * categories, including categories where the condition type is not applicable
     * (e.g., Antiques). This field will be applicable for all item conditions except
     * "New", "Brand New", "New with tags", and "New in box". If
     * <b>ConditionDescription</b> is used with these conditions (Condition
     * IDs 1000-1499), eBay will simply ignore this field if included, and eBay will
     * return a warning message to the user.
     * <br><br>
     * This field should only be used to further clarify the condition of the used item.
     * For example, "The right leg of the chair has a small scratch, and on the seat
     * back there is a light blue stain about the shape and size of a coin." It should
     * not be used for branding, promotions, shipping, returns, payment or other
     * information unrelated to the condition of the item. Make sure that the condition
     * type (<b>Item.ConditionID</b>), condition description, item description
     * (<b>Item.Description</b>), and the listing's pictures do not contradict
     * one another.
     * <br><br>
     * The <b>ConditionDescription</b> field is only returned if a condition
     * description is specified in the listing.
     * 
     *
     * @returns java.lang.String
	 */
	public String getConditionDescription() {
	    return this.conditionDescription;
	}
	
	/**
	 * public setter
	 *
     * 
     * This string field is used by the seller to more clearly describe the condition of
     * items that are not brand new. This field becomes available to sellers starting in
     * November 2012.
     * <br><br>
     * The <b>ConditionDescription</b> field will be available for all
     * categories, including categories where the condition type is not applicable
     * (e.g., Antiques). This field will be applicable for all item conditions except
     * "New", "Brand New", "New with tags", and "New in box". If
     * <b>ConditionDescription</b> is used with these conditions (Condition
     * IDs 1000-1499), eBay will simply ignore this field if included, and eBay will
     * return a warning message to the user.
     * <br><br>
     * This field should only be used to further clarify the condition of the used item.
     * For example, "The right leg of the chair has a small scratch, and on the seat
     * back there is a light blue stain about the shape and size of a coin." It should
     * not be used for branding, promotions, shipping, returns, payment or other
     * information unrelated to the condition of the item. Make sure that the condition
     * type (<b>Item.ConditionID</b>), condition description, item description
     * (<b>Item.Description</b>), and the listing's pictures do not contradict
     * one another.
     * <br><br>
     * The <b>ConditionDescription</b> field is only returned if a condition
     * description is specified in the listing.
     * 
     *
     * @param java.lang.String
	 */
	public void setConditionDescription(String conditionDescription) {
	    this.conditionDescription = conditionDescription;
	}

}