// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * Retrieves publicly available data for one or more listings. Use this call to retrieve much of the information that is visible on a listing's View Item page on the eBay Web site, such as title, prices, and basic shipping costs. Provide ItemID for every item for which you want information. This call returns the same minimal information that is returned by GetSingleItem, for each item with no IncludeSelector specified. (Use GetShippingCosts to retrieve more detailed shipping cost information for a given item.) Duplicated items are returned as a single item.
 * 
 */
@RootElement(name = "GetMultipleItemsRequest", namespace = "urn:ebay:apis:eBLBaseComponents")
public class GetMultipleItemsRequestType extends AbstractRequestType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "ItemID")
	private List<String> itemID;
	
	@Element(name = "IncludeSelector")
	private String includeSelector;
	
    
	/**
     * public getter
     *
     * 
     * The item ID that uniquely identifies the item listing for which to
     * retrieve the data. You can provide a maximum of 20 item IDs. When making a
     * URL request, repeating ItemID parameters must be specified as an indexed
     * array (e.g., <code>...&ItemID(0)=130310421484&ItemID(1)=
     * 300321408208& ItemID(2)=370214653822...</code>).
     * <br><br>
     * Alternatively, as a shortcut for URL requests, you can specify the item
     * IDs as a comma-separated list in a single ItemID parameter (e.g., ...<
     * code>&ItemID=130310421484,300321408208,370214653822...</code>
     * ) for convenience.
     * <br><br>
     * You can determine an item's ID by calling findItemsAdvanced (<a 
     * href="http://www.developer.ebay.com/DevZone/finding/CallRef/index.html" 
     * >Finding API</a>) or from the  eBay Web site. Provide ItemID for 
     * every item for which you want information.
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getItemID() {
	    return this.itemID;
	}
	
	/**
	 * public setter
	 *
     * 
     * The item ID that uniquely identifies the item listing for which to
     * retrieve the data. You can provide a maximum of 20 item IDs. When making a
     * URL request, repeating ItemID parameters must be specified as an indexed
     * array (e.g., <code>...&ItemID(0)=130310421484&ItemID(1)=
     * 300321408208& ItemID(2)=370214653822...</code>).
     * <br><br>
     * Alternatively, as a shortcut for URL requests, you can specify the item
     * IDs as a comma-separated list in a single ItemID parameter (e.g., ...<
     * code>&ItemID=130310421484,300321408208,370214653822...</code>
     * ) for convenience.
     * <br><br>
     * You can determine an item's ID by calling findItemsAdvanced (<a 
     * href="http://www.developer.ebay.com/DevZone/finding/CallRef/index.html" 
     * >Finding API</a>) or from the  eBay Web site. Provide ItemID for 
     * every item for which you want information.
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setItemID(List<String> itemID) {
	    this.itemID = itemID;
	}
	/**
     * public getter
     *
     * 
     * Defines standard subsets of fields to return within the
     * response.<br>
     * <br>
     * If you don't specify this field, the call returns a default
     * set of fields (see the "Detail Controls" link below). If you specify this field, the additional
     * fields you retrieve can affect the call's response time
     * (performance).<br>
     * <br>
     * <b>Applicable values</b>:
     * <p class="ename">&bull;&nbsp;&nbsp; Details</p>
     *   <p class="edef">Include most available fields in the
     *   response (except fields that significantly affect the call's
     *   performance).</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Description</p>
     *   <p class="edef">Include the Description field in the response. (This can affect the call's performance.)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; TextDescription</p>
     *   <p class="edef">Include the text Description (no html tag) field in the response. (This can affect the call's performance.)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; ItemSpecifics</p>
     * <p class="edef">Include ItemSpecifics in the response.</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Variations</p>
     * <p class="edef">Include Variations in the response.</p>
     * <br>
     * <br>
     * Use a comma to specify multiple values. (In this case,
     * the results are cumulative.) See "GetSingleItem Samples"
     * for an example of how to use this field.<br>
     * <br>
     * See "Detail Controls" for a complete list of
     * fields that can be returned for each selector.
     * 
     *
     * @returns java.lang.String
	 */
	public String getIncludeSelector() {
	    return this.includeSelector;
	}
	
	/**
	 * public setter
	 *
     * 
     * Defines standard subsets of fields to return within the
     * response.<br>
     * <br>
     * If you don't specify this field, the call returns a default
     * set of fields (see the "Detail Controls" link below). If you specify this field, the additional
     * fields you retrieve can affect the call's response time
     * (performance).<br>
     * <br>
     * <b>Applicable values</b>:
     * <p class="ename">&bull;&nbsp;&nbsp; Details</p>
     *   <p class="edef">Include most available fields in the
     *   response (except fields that significantly affect the call's
     *   performance).</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Description</p>
     *   <p class="edef">Include the Description field in the response. (This can affect the call's performance.)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; TextDescription</p>
     *   <p class="edef">Include the text Description (no html tag) field in the response. (This can affect the call's performance.)</p>
     * <p class="ename">&bull;&nbsp;&nbsp; ItemSpecifics</p>
     * <p class="edef">Include ItemSpecifics in the response.</p>
     * <p class="ename">&bull;&nbsp;&nbsp; Variations</p>
     * <p class="edef">Include Variations in the response.</p>
     * <br>
     * <br>
     * Use a comma to specify multiple values. (In this case,
     * the results are cumulative.) See "GetSingleItem Samples"
     * for an example of how to use this field.<br>
     * <br>
     * See "Detail Controls" for a complete list of
     * fields that can be returned for each selector.
     * 
     *
     * @param java.lang.String
	 */
	public void setIncludeSelector(String includeSelector) {
	    this.includeSelector = includeSelector;
	}

}