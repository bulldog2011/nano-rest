// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * 
 * Returns stock product information in Half.com catalogs, such as
 * information about a particular DVD or book. Optionally,
 * also returns items that match the product.
 * 
 */
@RootElement(name = "FindHalfProductsResponse", namespace = "urn:ebay:apis:eBLBaseComponents")
public class FindHalfProductsResponseType extends AbstractResponseType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "DomainHistogram")
	private DomainHistogramType domainHistogram;
	
	@Element(name = "PageNumber")
	private Integer pageNumber;
	
	@Element(name = "ApproximatePages")
	private Integer approximatePages;
	
	@Element(name = "MoreResults")
	private Boolean moreResults;
	
	@Element(name = "TotalProducts")
	private Integer totalProducts;
	
	@Element(name = "Products")
	private HalfProductsType products;
	
	@Element(name = "ProductSearchURL")
	private String productSearchURL;
	
    
	/**
     * public getter
     *
     * 
     * A histogram that lists the number of matching products found
     * and the domains in which they were found.
     * A <i>domain</i> is essentially
     * a set of categories that share certain common features
     * (as determined by Half.com). Each domain has its own name and ID.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.DomainHistogramType
	 */
	public DomainHistogramType getDomainHistogram() {
	    return this.domainHistogram;
	}
	
	/**
	 * public setter
	 *
     * 
     * A histogram that lists the number of matching products found
     * and the domains in which they were found.
     * A <i>domain</i> is essentially
     * a set of categories that share certain common features
     * (as determined by Half.com). Each domain has its own name and ID.
     * 
     *
     * @param ebay.apis.eblbasecomponents.DomainHistogramType
	 */
	public void setDomainHistogram(DomainHistogramType domainHistogram) {
	    this.domainHistogram = domainHistogram;
	}
	/**
     * public getter
     *
     * 
     * The number of the page of data returned. If many products
     * are found and multiple pages of results are available, use
     * this in combination with ApproximatePages and HasMore to decide
     * which page to retrieve next. As FindHalfProducts only returns
     * up to 2000 products, the maximum possible value is theoretically
     * 2000 (if you were to set EntriesPerPage to 1 in the request).
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getPageNumber() {
	    return this.pageNumber;
	}
	
	/**
	 * public setter
	 *
     * 
     * The number of the page of data returned. If many products
     * are found and multiple pages of results are available, use
     * this in combination with ApproximatePages and HasMore to decide
     * which page to retrieve next. As FindHalfProducts only returns
     * up to 2000 products, the maximum possible value is theoretically
     * 2000 (if you were to set EntriesPerPage to 1 in the request).
     * 
     *
     * @param java.lang.Integer
	 */
	public void setPageNumber(Integer pageNumber) {
	    this.pageNumber = pageNumber;
	}
	/**
     * public getter
     *
     * 
     * The total number of pages that can be returned, given the same
     * query and filters in the request. As FindHalfProducts only returns
     * up to 2000 products, the maximum possible value is theoretically
     * 2000 (if you were to set MaxEntries to 1 in the request).
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getApproximatePages() {
	    return this.approximatePages;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total number of pages that can be returned, given the same
     * query and filters in the request. As FindHalfProducts only returns
     * up to 2000 products, the maximum possible value is theoretically
     * 2000 (if you were to set MaxEntries to 1 in the request).
     * 
     *
     * @param java.lang.Integer
	 */
	public void setApproximatePages(Integer approximatePages) {
	    this.approximatePages = approximatePages;
	}
	/**
     * public getter
     *
     * 
     * If true, more pages of results are available.
     * That is, PageNumber is less than ApproximatePages.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getMoreResults() {
	    return this.moreResults;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, more pages of results are available.
     * That is, PageNumber is less than ApproximatePages.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setMoreResults(Boolean moreResults) {
	    this.moreResults = moreResults;
	}
	/**
     * public getter
     *
     * 
     * The total number of matching products found.
     * (If more than 2000 products are found, the call fails
     * with an error.)
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getTotalProducts() {
	    return this.totalProducts;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total number of matching products found.
     * (If more than 2000 products are found, the call fails
     * with an error.)
     * 
     *
     * @param java.lang.Integer
	 */
	public void setTotalProducts(Integer totalProducts) {
	    this.totalProducts = totalProducts;
	}
	/**
     * public getter
     *
     * 
     * An set of Half.com catalog products. This contains stock information about a
     * particular DVD, book, or other product.
     * When you use QueryKeywords in the request, FindHalfProducts returns a
     * maximum of 20 products per page.
     * When you use ProductID in the request, FindHalfProducts usually only
     * returns 1 product. ItemCount is only returned if you use ProductID with
     * IncludeSelector set to Items or Details.
     * (If more than one product matches the same ProductID,
     * FindHalfProducts will return all of those products. As of the time
     * of this writing, we expect this to be a rare case.)
     * 
     *
     * @returns ebay.apis.eblbasecomponents.HalfProductsType
	 */
	public HalfProductsType getProducts() {
	    return this.products;
	}
	
	/**
	 * public setter
	 *
     * 
     * An set of Half.com catalog products. This contains stock information about a
     * particular DVD, book, or other product.
     * When you use QueryKeywords in the request, FindHalfProducts returns a
     * maximum of 20 products per page.
     * When you use ProductID in the request, FindHalfProducts usually only
     * returns 1 product. ItemCount is only returned if you use ProductID with
     * IncludeSelector set to Items or Details.
     * (If more than one product matches the same ProductID,
     * FindHalfProducts will return all of those products. As of the time
     * of this writing, we expect this to be a rare case.)
     * 
     *
     * @param ebay.apis.eblbasecomponents.HalfProductsType
	 */
	public void setProducts(HalfProductsType products) {
	    this.products = products;
	}
	/**
     * public getter
     *
     * 
     * A URL for product search results that corresponds to your search request. This is similar to ItemSearchURL in FindItems and FindItemsAdvanced.
     * 
     *
     * @returns java.lang.String
	 */
	public String getProductSearchURL() {
	    return this.productSearchURL;
	}
	
	/**
	 * public setter
	 *
     * 
     * A URL for product search results that corresponds to your search request. This is similar to ItemSearchURL in FindItems and FindItemsAdvanced.
     * 
     *
     * @param java.lang.String
	 */
	public void setProductSearchURL(String productSearchURL) {
	    this.productSearchURL = productSearchURL;
	}

}