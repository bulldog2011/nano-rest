// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * 
 * Contains various details about the current status of a listing. These
 * values are computed by eBay and cannot be specified at listing time.
 * 
 */
public class SellingStatusType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "BidCount")
	private Integer bidCount;
	
	@Element(name = "BidIncrement")
	private AmountType bidIncrement;
	
	@Element(name = "ConvertedCurrentPrice")
	private AmountType convertedCurrentPrice;
	
	@Element(name = "CurrentPrice")
	private AmountType currentPrice;
	
	@Element(name = "HighBidder")
	private UserType highBidder;
	
	@Element(name = "LeadCount")
	private Integer leadCount;
	
	@Element(name = "MinimumToBid")
	private AmountType minimumToBid;
	
	@Element(name = "QuantitySold")
	private Integer quantitySold;
	
	@Element(name = "ReserveMet")
	private Boolean reserveMet;
	
	@Element(name = "SecondChanceEligible")
	private Boolean secondChanceEligible;
	
	@Element(name = "BidderCount")
	private Long bidderCount;
	
	@Element(name = "ListingStatus")
	private ListingStatusCodeType listingStatus;
	
	@Element(name = "FinalValueFee")
	private AmountType finalValueFee;
	
	@Element(name = "PromotionalSaleDetails")
	private PromotionalSaleDetailsType promotionalSaleDetails;
	
	@Element(name = "AdminEnded")
	private Boolean adminEnded;
	
	@Element(name = "SoldAsBin")
	private Boolean soldAsBin;
	
    
	/**
     * public getter
     *
     * 
     * Number of bids placed so far against the item. Only applicable to
     * competitive-bid item listings (Chinese auctions).
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getBidCount() {
	    return this.bidCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Number of bids placed so far against the item. Only applicable to
     * competitive-bid item listings (Chinese auctions).
     * 
     *
     * @param java.lang.Integer
	 */
	public void setBidCount(Integer bidCount) {
	    this.bidCount = bidCount;
	}
	/**
     * public getter
     *
     *  
     * The minimum amount a progressive bid must be above the current high bid to be accepted. This field is only 
     * applicable to auction listings. The value of this field will always be '0.00' for Classified Ad and fixed-price 
     * listings.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getBidIncrement() {
	    return this.bidIncrement;
	}
	
	/**
	 * public setter
	 *
     *  
     * The minimum amount a progressive bid must be above the current high bid to be accepted. This field is only 
     * applicable to auction listings. The value of this field will always be '0.00' for Classified Ad and fixed-price 
     * listings.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setBidIncrement(AmountType bidIncrement) {
	    this.bidIncrement = bidIncrement;
	}
	/**
     * public getter
     *
     * 
     * Converted value of the CurrentPrice in the currency of the site that
     * returned this response. For active items, refresh the listing's data every 24
     * hours to pick up the current conversion rates. Only returned when the item's
     * CurrentPrice on the listing site is in different currency than the currency of
     * the host site for the user/application making the API call. ConvertedCurrentPrice
     * is not returned for Classified listings (Classified listings are not available
     * on all sites).<br>
     * <br>
     * In multi-variation listings, this value matches the lowest-priced
     * variation that is still available for sale.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getConvertedCurrentPrice() {
	    return this.convertedCurrentPrice;
	}
	
	/**
	 * public setter
	 *
     * 
     * Converted value of the CurrentPrice in the currency of the site that
     * returned this response. For active items, refresh the listing's data every 24
     * hours to pick up the current conversion rates. Only returned when the item's
     * CurrentPrice on the listing site is in different currency than the currency of
     * the host site for the user/application making the API call. ConvertedCurrentPrice
     * is not returned for Classified listings (Classified listings are not available
     * on all sites).<br>
     * <br>
     * In multi-variation listings, this value matches the lowest-priced
     * variation that is still available for sale.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setConvertedCurrentPrice(AmountType convertedCurrentPrice) {
	    this.convertedCurrentPrice = convertedCurrentPrice;
	}
	/**
     * public getter
     *
     * 
     * For auction listings, this price is the starting price or the current highest
     * bid for the item if bids have been placed. 
     * <br><br>
     * For fixed-price listings, this price is the sale price of the item.<br>
     * <br>
     * In multi-variation, fixed-price listings, this value matches the lowest-priced
     * variation that is still available for sale.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getCurrentPrice() {
	    return this.currentPrice;
	}
	
	/**
	 * public setter
	 *
     * 
     * For auction listings, this price is the starting price or the current highest
     * bid for the item if bids have been placed. 
     * <br><br>
     * For fixed-price listings, this price is the sale price of the item.<br>
     * <br>
     * In multi-variation, fixed-price listings, this value matches the lowest-priced
     * variation that is still available for sale.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setCurrentPrice(AmountType currentPrice) {
	    this.currentPrice = currentPrice;
	}
	/**
     * public getter
     *
     * 
     * For ended Chinese auction listings that have a winning bidder,
     * this field is a container for the high bidder's user ID.
     * For ended, single-item, basic fixed price (FixedPriceItem) and
     * ended Store Inventory (StoresFixedPrice) listings,
     * this field is a container for the user ID of the purchaser.
     * This field isn't returned for auctions with no bids, or for active fixed price listings,
     * or for active Store Inventory listings.
     * In the case of PlaceOffer, for chinese auctions,
     * this field is a container for the high bidder's user ID.
     * In the PlaceOffer response, the following applies:
     * For multiple-quantity, fixed-price listings,
     * the high bidder is only returned if there is just one order line item
     * (or only for the first order line item that is created).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.UserType
	 */
	public UserType getHighBidder() {
	    return this.highBidder;
	}
	
	/**
	 * public setter
	 *
     * 
     * For ended Chinese auction listings that have a winning bidder,
     * this field is a container for the high bidder's user ID.
     * For ended, single-item, basic fixed price (FixedPriceItem) and
     * ended Store Inventory (StoresFixedPrice) listings,
     * this field is a container for the user ID of the purchaser.
     * This field isn't returned for auctions with no bids, or for active fixed price listings,
     * or for active Store Inventory listings.
     * In the case of PlaceOffer, for chinese auctions,
     * this field is a container for the high bidder's user ID.
     * In the PlaceOffer response, the following applies:
     * For multiple-quantity, fixed-price listings,
     * the high bidder is only returned if there is just one order line item
     * (or only for the first order line item that is created).
     * 
     *
     * @param ebay.apis.eblbasecomponents.UserType
	 */
	public void setHighBidder(UserType highBidder) {
	    this.highBidder = highBidder;
	}
	/**
     * public getter
     *
     * 
     * Applicable to Ad type listings only. Indicates how many leads to
     * potential buyers are associated with this item. Returns 0 (zero) for listings in other formats. You must be the seller of the item to retrieve the lead count.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getLeadCount() {
	    return this.leadCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Applicable to Ad type listings only. Indicates how many leads to
     * potential buyers are associated with this item. Returns 0 (zero) for listings in other formats. You must be the seller of the item to retrieve the lead count.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setLeadCount(Integer leadCount) {
	    this.leadCount = leadCount;
	}
	/**
     * public getter
     *
     * 
     * Smallest amount the next bid on the item can be. Returns same value as
     * Item.StartPrice (if no bids have yet been placed) or CurrentPrice plus
     * BidIncrement (if at least one bid has been placed). Only applicable to
     * competitive-bid item listings (Chinese auctions). Returns null for basic
     * Fixed Price (FixedPriceItem), Store Inventory (StoresFixedPrice),
     * and Ad type listings.
     * <br><br>
     * In multi-variation listings, this value matches the lowest-priced
     * variation that is still available for sale.
     * <br><br>
     * <span class="tablenote"><strong>Note:</strong>
     * As of version 619, Dutch-style (multi-item) competitive-bid auctions are deprecated.
     * eBay throws an error if you submit a Dutch item listing with AddItem
     * or VerifyAddItem. If you use RelistItem to update a Dutch auction listing,
     * eBay generates a warning and resets the Quantity value to 1.
     * </span>
     * <br>
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getMinimumToBid() {
	    return this.minimumToBid;
	}
	
	/**
	 * public setter
	 *
     * 
     * Smallest amount the next bid on the item can be. Returns same value as
     * Item.StartPrice (if no bids have yet been placed) or CurrentPrice plus
     * BidIncrement (if at least one bid has been placed). Only applicable to
     * competitive-bid item listings (Chinese auctions). Returns null for basic
     * Fixed Price (FixedPriceItem), Store Inventory (StoresFixedPrice),
     * and Ad type listings.
     * <br><br>
     * In multi-variation listings, this value matches the lowest-priced
     * variation that is still available for sale.
     * <br><br>
     * <span class="tablenote"><strong>Note:</strong>
     * As of version 619, Dutch-style (multi-item) competitive-bid auctions are deprecated.
     * eBay throws an error if you submit a Dutch item listing with AddItem
     * or VerifyAddItem. If you use RelistItem to update a Dutch auction listing,
     * eBay generates a warning and resets the Quantity value to 1.
     * </span>
     * <br>
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setMinimumToBid(AmountType minimumToBid) {
	    this.minimumToBid = minimumToBid;
	}
	/**
     * public getter
     *
     * 
     * The total number of items purchased so far (in the listing's lifetime).
     * Subtract this from Quantity to determine the quantity available.
     * <br>
     * <br>
     * If the listing has Item Variations,
     * then in GetItem (and related calls) and GetItemTransactions,
     * Item.SellingStatus.QuantitySold contains the sum of all quantities
     * sold across all variations in the listing, and  Variation.SellingStatus.QuantitySold contains the number
     * of items sold for that variation.
     * In GetSellerTransactions,
     * Transaction.Item.SellingStatus.QuantitySold contains the number
     * of items sold in that order line item.<br>
     * <br>
     * For order line item calls, also see Transaction.QuantityPurchased for
     * the number of items purchased in the order line item.<br>
     * In multi-variation listings, this value matches total quantity sold
     * across all variations.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getQuantitySold() {
	    return this.quantitySold;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total number of items purchased so far (in the listing's lifetime).
     * Subtract this from Quantity to determine the quantity available.
     * <br>
     * <br>
     * If the listing has Item Variations,
     * then in GetItem (and related calls) and GetItemTransactions,
     * Item.SellingStatus.QuantitySold contains the sum of all quantities
     * sold across all variations in the listing, and  Variation.SellingStatus.QuantitySold contains the number
     * of items sold for that variation.
     * In GetSellerTransactions,
     * Transaction.Item.SellingStatus.QuantitySold contains the number
     * of items sold in that order line item.<br>
     * <br>
     * For order line item calls, also see Transaction.QuantityPurchased for
     * the number of items purchased in the order line item.<br>
     * In multi-variation listings, this value matches total quantity sold
     * across all variations.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setQuantitySold(Integer quantitySold) {
	    this.quantitySold = quantitySold;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the reserve price has been met for the listing. Returns
     * true if the reserve price was met or no reserve price was specified.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getReserveMet() {
	    return this.reserveMet;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the reserve price has been met for the listing. Returns
     * true if the reserve price was met or no reserve price was specified.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setReserveMet(Boolean reserveMet) {
	    this.reserveMet = reserveMet;
	}
	/**
     * public getter
     *
     * 
     * Part of the Second Chance Offer feature, indicates whether the seller can
     * extend a second chance offer for the item.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getSecondChanceEligible() {
	    return this.secondChanceEligible;
	}
	
	/**
	 * public setter
	 *
     * 
     * Part of the Second Chance Offer feature, indicates whether the seller can
     * extend a second chance offer for the item.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setSecondChanceEligible(Boolean secondChanceEligible) {
	    this.secondChanceEligible = secondChanceEligible;
	}
	/**
     * public getter
     *
     * 
     * Number of bidders for an item. Only applicable to competitive-bid item listings
     * (Chinese auctions). Only returned for the seller of the item.
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getBidderCount() {
	    return this.bidderCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Number of bidders for an item. Only applicable to competitive-bid item listings
     * (Chinese auctions). Only returned for the seller of the item.
     * 
     *
     * @param java.lang.Long
	 */
	public void setBidderCount(Long bidderCount) {
	    this.bidderCount = bidderCount;
	}
	/**
     * public getter
     *
     * 
     * Specifies an active or ended listing's status in eBay's processing workflow.
     * If a listing ends with a sale (or sales), eBay needs to update the sale details
     * (e.g., total price and buyer/high bidder) and the final value fee. This processing
     * can take several minutes. If you retrieve a sold item and no details about the buyer/high bidder
     * are returned or no final value fee is available, use this listing status information
     * to determine whether eBay has finished processing the listing.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ListingStatusCodeType
	 */
	public ListingStatusCodeType getListingStatus() {
	    return this.listingStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies an active or ended listing's status in eBay's processing workflow.
     * If a listing ends with a sale (or sales), eBay needs to update the sale details
     * (e.g., total price and buyer/high bidder) and the final value fee. This processing
     * can take several minutes. If you retrieve a sold item and no details about the buyer/high bidder
     * are returned or no final value fee is available, use this listing status information
     * to determine whether eBay has finished processing the listing.
     * 
     *
     * @param ebay.apis.eblbasecomponents.ListingStatusCodeType
	 */
	public void setListingStatus(ListingStatusCodeType listingStatus) {
	    this.listingStatus = listingStatus;
	}
	/**
     * public getter
     *
     * 
     * You are charged a Final Value Fee (FVF) if your item is sold, ends with a
     * winning bid, or is purchased. This fee applies whether or not you actually
     * complete the sale with the buyer. The Final Value Fee is returned in
     * Transaction.FinalValueFee. See the eBay.com Web site online help for more
     * information about the final value fee.
     * <br><br>
     * The Final Value Fee for fixed price format (FixedPriceItem) and Store Inventory
     * (StoresFixedPrice) items is returned by GetSellerTransactions,
     * GetItemTransactions, and GetOrderTransactions in a Transaction container, regardless of the listing status. For all other listing types, (excluding
     * Buy It Now purchases), the Final Value Fee is returned when the listing status
     * is Completed.
     * <br/ > <br />
     * If you request a Final Value Fee Credit, the value of Transaction.FinalValueFee
     * will not change for the item if a credit is issued. (The credit only appears in
     * the seller's account data.)
     * 
     *         
     * <br>
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getFinalValueFee() {
	    return this.finalValueFee;
	}
	
	/**
	 * public setter
	 *
     * 
     * You are charged a Final Value Fee (FVF) if your item is sold, ends with a
     * winning bid, or is purchased. This fee applies whether or not you actually
     * complete the sale with the buyer. The Final Value Fee is returned in
     * Transaction.FinalValueFee. See the eBay.com Web site online help for more
     * information about the final value fee.
     * <br><br>
     * The Final Value Fee for fixed price format (FixedPriceItem) and Store Inventory
     * (StoresFixedPrice) items is returned by GetSellerTransactions,
     * GetItemTransactions, and GetOrderTransactions in a Transaction container, regardless of the listing status. For all other listing types, (excluding
     * Buy It Now purchases), the Final Value Fee is returned when the listing status
     * is Completed.
     * <br/ > <br />
     * If you request a Final Value Fee Credit, the value of Transaction.FinalValueFee
     * will not change for the item if a credit is issued. (The credit only appears in
     * the seller's account data.)
     * 
     *         
     * <br>
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setFinalValueFee(AmountType finalValueFee) {
	    this.finalValueFee = finalValueFee;
	}
	/**
     * public getter
     *
     * 
     * If a seller has reduced the price of a listed item with the Promotional Price Display feature,
     * this field contains the original price of the discounted item, along with the start-time
     * and end-time of the discount.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PromotionalSaleDetailsType
	 */
	public PromotionalSaleDetailsType getPromotionalSaleDetails() {
	    return this.promotionalSaleDetails;
	}
	
	/**
	 * public setter
	 *
     * 
     * If a seller has reduced the price of a listed item with the Promotional Price Display feature,
     * this field contains the original price of the discounted item, along with the start-time
     * and end-time of the discount.
     * 
     *
     * @param ebay.apis.eblbasecomponents.PromotionalSaleDetailsType
	 */
	public void setPromotionalSaleDetails(PromotionalSaleDetailsType promotionalSaleDetails) {
	    this.promotionalSaleDetails = promotionalSaleDetails;
	}
	/**
     * public getter
     *
     * 
     * If included in the response as true, indicates that the listing was administratively
     * canceled due to a violation of eBay's listing policies and that the item can be relisted
     * using RelistItem. Note that GetItem returns an error (invalid item ID)
     * in the response if Item.SellingStatus.AdminEnded is true and the requesting user
     * is not the seller of the item.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getAdminEnded() {
	    return this.adminEnded;
	}
	
	/**
	 * public setter
	 *
     * 
     * If included in the response as true, indicates that the listing was administratively
     * canceled due to a violation of eBay's listing policies and that the item can be relisted
     * using RelistItem. Note that GetItem returns an error (invalid item ID)
     * in the response if Item.SellingStatus.AdminEnded is true and the requesting user
     * is not the seller of the item.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setAdminEnded(Boolean adminEnded) {
	    this.adminEnded = adminEnded;
	}
	/**
     * public getter
     *
     * 
     *     If this flag appears in the <b>GetItem</b> response, the auction has ended due to the
     * item being sold to a seller using the <b>Buy It Now</b> option.
     * This flag is not relevant for fixed-priced listings.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getSoldAsBin() {
	    return this.soldAsBin;
	}
	
	/**
	 * public setter
	 *
     * 
     *     If this flag appears in the <b>GetItem</b> response, the auction has ended due to the
     * item being sold to a seller using the <b>Buy It Now</b> option.
     * This flag is not relevant for fixed-priced listings.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setSoldAsBin(Boolean soldAsBin) {
	    this.soldAsBin = soldAsBin;
	}

}