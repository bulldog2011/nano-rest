// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * 
 * Specifies 1 year feedback metrics for a seller.
 * 
 */
public class SellerRoleMetricsType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "PositiveFeedbackLeftCount")
	private Integer positiveFeedbackLeftCount;
	
	@Element(name = "NegativeFeedbackLeftCount")
	private Integer negativeFeedbackLeftCount;
	
	@Element(name = "NeutralFeedbackLeftCount")
	private Integer neutralFeedbackLeftCount;
	
	@Element(name = "FeedbackLeftPercent")
	private Float feedbackLeftPercent;
	
	@Element(name = "RepeatBuyerCount")
	private Integer repeatBuyerCount;
	
	@Element(name = "RepeatBuyerPercent")
	private Float repeatBuyerPercent;
	
	@Element(name = "UniqueBuyerCount")
	private Integer uniqueBuyerCount;
	
	@Element(name = "TransactionPercent")
	private Float transactionPercent;
	
	@Element(name = "CrossBorderTransactionCount")
	private Integer crossBorderTransactionCount;
	
	@Element(name = "CrossBorderTransactionPercent")
	private Float crossBorderTransactionPercent;
	
    
	/**
     * public getter
     *
     * 
     * Count of positive feedback entries given as a seller.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getPositiveFeedbackLeftCount() {
	    return this.positiveFeedbackLeftCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Count of positive feedback entries given as a seller.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setPositiveFeedbackLeftCount(Integer positiveFeedbackLeftCount) {
	    this.positiveFeedbackLeftCount = positiveFeedbackLeftCount;
	}
	/**
     * public getter
     *
     * 
     * Count of negative feedback entries given as a seller.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getNegativeFeedbackLeftCount() {
	    return this.negativeFeedbackLeftCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Count of negative feedback entries given as a seller.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setNegativeFeedbackLeftCount(Integer negativeFeedbackLeftCount) {
	    this.negativeFeedbackLeftCount = negativeFeedbackLeftCount;
	}
	/**
     * public getter
     *
     * 
     * Count of neutral feedback entries given as a seller.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getNeutralFeedbackLeftCount() {
	    return this.neutralFeedbackLeftCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Count of neutral feedback entries given as a seller.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setNeutralFeedbackLeftCount(Integer neutralFeedbackLeftCount) {
	    this.neutralFeedbackLeftCount = neutralFeedbackLeftCount;
	}
	/**
     * public getter
     *
     * 
     * Percentage of leaving feedback as a seller.
     * 
     *
     * @returns java.lang.Float
	 */
	public Float getFeedbackLeftPercent() {
	    return this.feedbackLeftPercent;
	}
	
	/**
	 * public setter
	 *
     * 
     * Percentage of leaving feedback as a seller.
     * 
     *
     * @param java.lang.Float
	 */
	public void setFeedbackLeftPercent(Float feedbackLeftPercent) {
	    this.feedbackLeftPercent = feedbackLeftPercent;
	}
	/**
     * public getter
     *
     * 
     * Number of buyers who bought more than once from this seller.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getRepeatBuyerCount() {
	    return this.repeatBuyerCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Number of buyers who bought more than once from this seller.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setRepeatBuyerCount(Integer repeatBuyerCount) {
	    this.repeatBuyerCount = repeatBuyerCount;
	}
	/**
     * public getter
     *
     * 
     * Percentage of repeat buyers.
     * 
     *
     * @returns java.lang.Float
	 */
	public Float getRepeatBuyerPercent() {
	    return this.repeatBuyerPercent;
	}
	
	/**
	 * public setter
	 *
     * 
     * Percentage of repeat buyers.
     * 
     *
     * @param java.lang.Float
	 */
	public void setRepeatBuyerPercent(Float repeatBuyerPercent) {
	    this.repeatBuyerPercent = repeatBuyerPercent;
	}
	/**
     * public getter
     *
     * 
     * Count of unique buyers from this seller.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getUniqueBuyerCount() {
	    return this.uniqueBuyerCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Count of unique buyers from this seller.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setUniqueBuyerCount(Integer uniqueBuyerCount) {
	    this.uniqueBuyerCount = uniqueBuyerCount;
	}
	/**
     * public getter
     *
     * 
     * Percentage of number of times a member has sold successfully vs. the number of
     * times a member has bought an item in the preceding 365 days.
     * 
     *
     * @returns java.lang.Float
	 */
	public Float getTransactionPercent() {
	    return this.transactionPercent;
	}
	
	/**
	 * public setter
	 *
     * 
     * Percentage of number of times a member has sold successfully vs. the number of
     * times a member has bought an item in the preceding 365 days.
     * 
     *
     * @param java.lang.Float
	 */
	public void setTransactionPercent(Float transactionPercent) {
	    this.transactionPercent = transactionPercent;
	}
	/**
     * public getter
     *
     * 
     * The count of Cross-Border Trade order line items.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getCrossBorderTransactionCount() {
	    return this.crossBorderTransactionCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The count of Cross-Border Trade order line items.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setCrossBorderTransactionCount(Integer crossBorderTransactionCount) {
	    this.crossBorderTransactionCount = crossBorderTransactionCount;
	}
	/**
     * public getter
     *
     * 
     * The percentage of order line items that are Cross-Border Trade order line items.
     * 
     *
     * @returns java.lang.Float
	 */
	public Float getCrossBorderTransactionPercent() {
	    return this.crossBorderTransactionPercent;
	}
	
	/**
	 * public setter
	 *
     * 
     * The percentage of order line items that are Cross-Border Trade order line items.
     * 
     *
     * @param java.lang.Float
	 */
	public void setCrossBorderTransactionPercent(Float crossBorderTransactionPercent) {
	    this.crossBorderTransactionPercent = crossBorderTransactionPercent;
	}

}