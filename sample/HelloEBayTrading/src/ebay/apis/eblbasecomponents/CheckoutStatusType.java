// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

/**
 * 
 * Type defining the <b>CheckoutStatus</b> container that is returned in 
 * <b>GetOrders</b> and <b>GetOrderTransactions</b> to indicate 
 * the current checkout status of the order.
 * 
 */
public class CheckoutStatusType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PaymentStatusCodeType eBayPaymentStatus;
	
	@Element(name = "LastModifiedTime")
	private Date lastModifiedTime;
	
	@Element(name = "PaymentMethod")
	private BuyerPaymentMethodCodeType paymentMethod;
	
	@Element(name = "Status")
	private CompleteStatusCodeType status;
	
	@Element(name = "IntegratedMerchantCreditCardEnabled")
	private Boolean integratedMerchantCreditCardEnabled;
	
	@Element
	private EBayPaymentMismatchDetailsType eBayPaymentMismatchDetails;
	
    
	/**
     * public getter
     *
     * 
     * This value indicates the payment status of an order. 
     * <br><br>
     * Also applicable to Half.com orders (GetOrders only).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PaymentStatusCodeType
	 */
	public PaymentStatusCodeType getEBayPaymentStatus() {
	    return this.eBayPaymentStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the payment status of an order. 
     * <br><br>
     * Also applicable to Half.com orders (GetOrders only).
     * 
     *
     * @param ebay.apis.eblbasecomponents.PaymentStatusCodeType
	 */
	public void setEBayPaymentStatus(PaymentStatusCodeType eBayPaymentStatus) {
	    this.eBayPaymentStatus = eBayPaymentStatus;
	}
	/**
     * public getter
     *
     * 
     * Indicates the last time that there was a change in value of the
     * <b>CheckoutStatus.Status</b> field, such as 'Pending' to 'Complete'.
     * <br><br>
     * This field is also applicable to Half.com orders (GetOrders only).
     * 
     *
     * @returns java.util.Date
	 */
	public Date getLastModifiedTime() {
	    return this.lastModifiedTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the last time that there was a change in value of the
     * <b>CheckoutStatus.Status</b> field, such as 'Pending' to 'Complete'.
     * <br><br>
     * This field is also applicable to Half.com orders (GetOrders only).
     * 
     *
     * @param java.util.Date
	 */
	public void setLastModifiedTime(Date lastModifiedTime) {
	    this.lastModifiedTime = lastModifiedTime;
	}
	/**
     * public getter
     *
     * 
     * The payment method that the buyer selected to pay for the order.
     * <br>
     * <br>
     * This field is also applicable to Half.com orders (GetOrders only).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.BuyerPaymentMethodCodeType
	 */
	public BuyerPaymentMethodCodeType getPaymentMethod() {
	    return this.paymentMethod;
	}
	
	/**
	 * public setter
	 *
     * 
     * The payment method that the buyer selected to pay for the order.
     * <br>
     * <br>
     * This field is also applicable to Half.com orders (GetOrders only).
     * 
     *
     * @param ebay.apis.eblbasecomponents.BuyerPaymentMethodCodeType
	 */
	public void setPaymentMethod(BuyerPaymentMethodCodeType paymentMethod) {
	    this.paymentMethod = paymentMethod;
	}
	/**
     * public getter
     *
     * 
     * Indicates the status of the order. This value is subject to change based on the
     * status of the checkout flow. Generally speaking, the <b>Status</b> 
     * field reads 'Incomplete'
     * when payment has yet to be initiated, 'Pending' when payment has been initiated
     * but is in process, and 'Complete' when the payment process has completed. 
     * <br><br>
     * <b>Note</b>: If the PaymentMethod is CashOnPickup, the Status value
     * will read Complete right at Checkout, even though the seller may not have been
     * officially paid yet, and the eBayPaymentStatus field will read NoPaymentFailure.
     * The CheckoutStatus.Status value will remain as Complete even if the seller uses
     * ReviseCheckoutStatus to change the checkout status to Pending. However, the
     * eBayPaymentStatus value in GetOrders will change from NoPaymentFailure to
     * PaymentInProcess.
     * <br><br>
     * This field is also applicable to Half.com orders (GetOrders only).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.CompleteStatusCodeType
	 */
	public CompleteStatusCodeType getStatus() {
	    return this.status;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the status of the order. This value is subject to change based on the
     * status of the checkout flow. Generally speaking, the <b>Status</b> 
     * field reads 'Incomplete'
     * when payment has yet to be initiated, 'Pending' when payment has been initiated
     * but is in process, and 'Complete' when the payment process has completed. 
     * <br><br>
     * <b>Note</b>: If the PaymentMethod is CashOnPickup, the Status value
     * will read Complete right at Checkout, even though the seller may not have been
     * officially paid yet, and the eBayPaymentStatus field will read NoPaymentFailure.
     * The CheckoutStatus.Status value will remain as Complete even if the seller uses
     * ReviseCheckoutStatus to change the checkout status to Pending. However, the
     * eBayPaymentStatus value in GetOrders will change from NoPaymentFailure to
     * PaymentInProcess.
     * <br><br>
     * This field is also applicable to Half.com orders (GetOrders only).
     * 
     *
     * @param ebay.apis.eblbasecomponents.CompleteStatusCodeType
	 */
	public void setStatus(CompleteStatusCodeType status) {
	    this.status = status;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the item can be paid for through a payment gateway (Payflow) account.
     * If IntegratedMerchantCreditCardEnabled is true, then integrated merchant credit card (IMCC) is
     * enabled for credit cards because the seller has a payment gateway account.
     * Therefore, if IntegratedMerchantCreditCardEnabled is true, and AmEx, Discover, or
     * VisaMC is returned for an item, then on checkout, an online credit-card payment
     * is processed through a payment gateway account.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getIntegratedMerchantCreditCardEnabled() {
	    return this.integratedMerchantCreditCardEnabled;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the item can be paid for through a payment gateway (Payflow) account.
     * If IntegratedMerchantCreditCardEnabled is true, then integrated merchant credit card (IMCC) is
     * enabled for credit cards because the seller has a payment gateway account.
     * Therefore, if IntegratedMerchantCreditCardEnabled is true, and AmEx, Discover, or
     * VisaMC is returned for an item, then on checkout, an online credit-card payment
     * is processed through a payment gateway account.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setIntegratedMerchantCreditCardEnabled(Boolean integratedMerchantCreditCardEnabled) {
	    this.integratedMerchantCreditCardEnabled = integratedMerchantCreditCardEnabled;
	}
	/**
     * public getter
     *
     * 
     * This container is returned when a buyer's payment does not match the total cost of an
     * order going through the new eBay payment process. This container is only applicable for
     * German and Austrian orders going through the new eBay payment process, and if the buyer 
     * has selected EFT as the payment method.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.EBayPaymentMismatchDetailsType
	 */
	public EBayPaymentMismatchDetailsType getEBayPaymentMismatchDetails() {
	    return this.eBayPaymentMismatchDetails;
	}
	
	/**
	 * public setter
	 *
     * 
     * This container is returned when a buyer's payment does not match the total cost of an
     * order going through the new eBay payment process. This container is only applicable for
     * German and Austrian orders going through the new eBay payment process, and if the buyer 
     * has selected EFT as the payment method.
     * 
     *
     * @param ebay.apis.eblbasecomponents.EBayPaymentMismatchDetailsType
	 */
	public void setEBayPaymentMismatchDetails(EBayPaymentMismatchDetailsType eBayPaymentMismatchDetails) {
	    this.eBayPaymentMismatchDetails = eBayPaymentMismatchDetails;
	}

}