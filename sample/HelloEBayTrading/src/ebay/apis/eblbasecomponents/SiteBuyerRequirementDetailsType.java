// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

/**
 * 
 * Type defining the <b>BuyerRequirementDetails</b> container, which is returned in
 * GeteBayDetails, and provides the seller with the buyer requirement features (and applicable
 * values) that are supported by the listing site.
 * <br/><br/>
 * <span class="tablenote"><b>Note: </b>
 * This container is only returned if <b>BuyerRequirementDetails</b> is included as a <b>DetailName</b> 
 * filter in the request, or if no <b>DetailName</b> filters are used in the request.
 * </span>  <br/><br/>
 * 
 */
public class SiteBuyerRequirementDetailsType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "LinkedPayPalAccount")
	private Boolean linkedPayPalAccount;
	
	@Element(name = "MaximumBuyerPolicyViolations")
	private MaximumBuyerPolicyViolationsDetailsType maximumBuyerPolicyViolations;
	
	@Element(name = "MaximumItemRequirements")
	private MaximumItemRequirementsDetailsType maximumItemRequirements;
	
	@Element(name = "MaximumUnpaidItemStrikesInfo")
	private MaximumUnpaidItemStrikesInfoDetailsType maximumUnpaidItemStrikesInfo;
	
	@Element(name = "MinimumFeedbackScore")
	private MinimumFeedbackScoreDetailsType minimumFeedbackScore;
	
	@Element(name = "ShipToRegistrationCountry")
	private Boolean shipToRegistrationCountry;
	
	@Element(name = "VerifiedUserRequirements")
	private VerifiedUserRequirementsDetailsType verifiedUserRequirements;
	
	@Element(name = "DetailVersion")
	private String detailVersion;
	
	@Element(name = "UpdateTime")
	private Date updateTime;
	
    
	/**
     * public getter
     *
     * 
     * Specifies that the site's buyer requirements support PayPal.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getLinkedPayPalAccount() {
	    return this.linkedPayPalAccount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies that the site's buyer requirements support PayPal.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setLinkedPayPalAccount(Boolean linkedPayPalAccount) {
	    this.linkedPayPalAccount = linkedPayPalAccount;
	}
	/**
     * public getter
     *
     * 
     * Blocks bidders who have reached the maximum allowed buyer
     * policy violation stricks (in a specific time period) from bidding on this item.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.MaximumBuyerPolicyViolationsDetailsType
	 */
	public MaximumBuyerPolicyViolationsDetailsType getMaximumBuyerPolicyViolations() {
	    return this.maximumBuyerPolicyViolations;
	}
	
	/**
	 * public setter
	 *
     * 
     * Blocks bidders who have reached the maximum allowed buyer
     * policy violation stricks (in a specific time period) from bidding on this item.
     * 
     *
     * @param ebay.apis.eblbasecomponents.MaximumBuyerPolicyViolationsDetailsType
	 */
	public void setMaximumBuyerPolicyViolations(MaximumBuyerPolicyViolationsDetailsType maximumBuyerPolicyViolations) {
	    this.maximumBuyerPolicyViolations = maximumBuyerPolicyViolations;
	}
	/**
     * public getter
     *
     * 
     *   Limits unpaying or low feedback bidders, by setting the MaximumItemCount and 
     *   MinimumFeedbackScore to define when a bidder is blocked from bidding.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.MaximumItemRequirementsDetailsType
	 */
	public MaximumItemRequirementsDetailsType getMaximumItemRequirements() {
	    return this.maximumItemRequirements;
	}
	
	/**
	 * public setter
	 *
     * 
     *   Limits unpaying or low feedback bidders, by setting the MaximumItemCount and 
     *   MinimumFeedbackScore to define when a bidder is blocked from bidding.
     * 
     *
     * @param ebay.apis.eblbasecomponents.MaximumItemRequirementsDetailsType
	 */
	public void setMaximumItemRequirements(MaximumItemRequirementsDetailsType maximumItemRequirements) {
	    this.maximumItemRequirements = maximumItemRequirements;
	}
	/**
     * public getter
     *
     * 
     *   Specifies a maximum number of unpaid items strikes that will result in blocking a bidder from
     *   bidding on the item (within a specific time period).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.MaximumUnpaidItemStrikesInfoDetailsType
	 */
	public MaximumUnpaidItemStrikesInfoDetailsType getMaximumUnpaidItemStrikesInfo() {
	    return this.maximumUnpaidItemStrikesInfo;
	}
	
	/**
	 * public setter
	 *
     * 
     *   Specifies a maximum number of unpaid items strikes that will result in blocking a bidder from
     *   bidding on the item (within a specific time period).
     * 
     *
     * @param ebay.apis.eblbasecomponents.MaximumUnpaidItemStrikesInfoDetailsType
	 */
	public void setMaximumUnpaidItemStrikesInfo(MaximumUnpaidItemStrikesInfoDetailsType maximumUnpaidItemStrikesInfo) {
	    this.maximumUnpaidItemStrikesInfo = maximumUnpaidItemStrikesInfo;
	}
	/**
     * public getter
     *
     * 
     * This container consists of the values that can be used in the 
     * <b>BuyerRequirementDetails.MinimumFeedbackScore</b> field when listing
     * an item through an Add/Revise/Relist API call. The Feedback Score for a potential
     * buyer must be greater than or equal to the specified value, or that buyer is blocked
     * from buying the item.
     * <br/><br/>
     * For this container to appear in the response,
     * <b>BuyerRequirementDetails</b> must be one of the values passed into the
     * <b>DetailLevel</b> field in the request (or, no
     * <b>DetailLevel</b> filters should be used).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.MinimumFeedbackScoreDetailsType
	 */
	public MinimumFeedbackScoreDetailsType getMinimumFeedbackScore() {
	    return this.minimumFeedbackScore;
	}
	
	/**
	 * public setter
	 *
     * 
     * This container consists of the values that can be used in the 
     * <b>BuyerRequirementDetails.MinimumFeedbackScore</b> field when listing
     * an item through an Add/Revise/Relist API call. The Feedback Score for a potential
     * buyer must be greater than or equal to the specified value, or that buyer is blocked
     * from buying the item.
     * <br/><br/>
     * For this container to appear in the response,
     * <b>BuyerRequirementDetails</b> must be one of the values passed into the
     * <b>DetailLevel</b> field in the request (or, no
     * <b>DetailLevel</b> filters should be used).
     * 
     *
     * @param ebay.apis.eblbasecomponents.MinimumFeedbackScoreDetailsType
	 */
	public void setMinimumFeedbackScore(MinimumFeedbackScoreDetailsType minimumFeedbackScore) {
	    this.minimumFeedbackScore = minimumFeedbackScore;
	}
	/**
     * public getter
     *
     * 
     * Specifies that the site's buyer requirements support ShipToRegistrationCountry.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getShipToRegistrationCountry() {
	    return this.shipToRegistrationCountry;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies that the site's buyer requirements support ShipToRegistrationCountry.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setShipToRegistrationCountry(Boolean shipToRegistrationCountry) {
	    this.shipToRegistrationCountry = shipToRegistrationCountry;
	}
	/**
     * public getter
     *
     * 
     * Specifies the valid values for limiting unverified bidders.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.VerifiedUserRequirementsDetailsType
	 */
	public VerifiedUserRequirementsDetailsType getVerifiedUserRequirements() {
	    return this.verifiedUserRequirements;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the valid values for limiting unverified bidders.
     * 
     *
     * @param ebay.apis.eblbasecomponents.VerifiedUserRequirementsDetailsType
	 */
	public void setVerifiedUserRequirements(VerifiedUserRequirementsDetailsType verifiedUserRequirements) {
	    this.verifiedUserRequirements = verifiedUserRequirements;
	}
	/**
     * public getter
     *
     * 
     * Returns the latest version number for this field. The version can be
     * used to determine if and when to refresh cached client data.
     * 
     *
     * @returns java.lang.String
	 */
	public String getDetailVersion() {
	    return this.detailVersion;
	}
	
	/**
	 * public setter
	 *
     * 
     * Returns the latest version number for this field. The version can be
     * used to determine if and when to refresh cached client data.
     * 
     *
     * @param java.lang.String
	 */
	public void setDetailVersion(String detailVersion) {
	    this.detailVersion = detailVersion;
	}
	/**
     * public getter
     *
     * 
     * Gives the time in GMT when the feature flags for the details were last
     * updated. This timestamp can be used to determine if and when to refresh
     * cached client data.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getUpdateTime() {
	    return this.updateTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * Gives the time in GMT when the feature flags for the details were last
     * updated. This timestamp can be used to determine if and when to refresh
     * cached client data.
     * 
     *
     * @param java.util.Date
	 */
	public void setUpdateTime(Date updateTime) {
	    this.updateTime = updateTime;
	}

}