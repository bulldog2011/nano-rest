// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

/**
 * 
 * Retrieves price changes, item revisions, description revisions,
 * and other changes that have occurred within the last 48 hours
 * related to a seller's eBay listings.
 * 
 */
@RootElement(name = "GetSellerEventsRequest", namespace = "urn:ebay:apis:eBLBaseComponents")
public class GetSellerEventsRequestType extends AbstractRequestType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "UserID")
	private String userID;
	
	@Element(name = "StartTimeFrom")
	private Date startTimeFrom;
	
	@Element(name = "StartTimeTo")
	private Date startTimeTo;
	
	@Element(name = "EndTimeFrom")
	private Date endTimeFrom;
	
	@Element(name = "EndTimeTo")
	private Date endTimeTo;
	
	@Element(name = "ModTimeFrom")
	private Date modTimeFrom;
	
	@Element(name = "ModTimeTo")
	private Date modTimeTo;
	
	@Element(name = "NewItemFilter")
	private Boolean newItemFilter;
	
	@Element(name = "IncludeWatchCount")
	private Boolean includeWatchCount;
	
	@Element(name = "IncludeVariationSpecifics")
	private Boolean includeVariationSpecifics;
	
	@Element(name = "HideVariations")
	private Boolean hideVariations;
	
    
	/**
     * public getter
     *
     * 
     * eBay user ID for the seller whose events are to be returned.
     * If not specified, retrieves events for the user identified by
     * the authentication token passed in the request. Note that since user information is anonymous to everyone except the bidder and the seller (during an active auction), only sellers looking for information about
     * their own listings and bidders who know the user IDs of their sellers
     * will be able to make this API call successfully.
     * 
     *
     * @returns java.lang.String
	 */
	public String getUserID() {
	    return this.userID;
	}
	
	/**
	 * public setter
	 *
     * 
     * eBay user ID for the seller whose events are to be returned.
     * If not specified, retrieves events for the user identified by
     * the authentication token passed in the request. Note that since user information is anonymous to everyone except the bidder and the seller (during an active auction), only sellers looking for information about
     * their own listings and bidders who know the user IDs of their sellers
     * will be able to make this API call successfully.
     * 
     *
     * @param java.lang.String
	 */
	public void setUserID(String userID) {
	    this.userID = userID;
	}
	/**
     * public getter
     *
     * 
     * Describes the earliest (oldest) time to use in a time range filter based
     * on item start time. Must be specified if StartTimeTo is specified. Either
     * the StartTimeFrom, EndTimeFrom, or ModTimeFrom filter must be specified.
     * If you do not specify the correspoding To filter,
     * it is set to the time you make the call.
     * For better results, the time period you use should be less than 48 hours.
     * If 3000 or more items are found, use a smaller time range.<br>
     * <br>
     * Include a 2-minute, overlapping buffer between requests.
     * For example, if StartTimeTo was 6:58 in a prior request,
     * the current request should use 6:56 in StartTimeFrom
     * (e.g., use ranges like 5:56-6:58, 6:56-7:58, 7:56-8:58).
     * 
     *
     * @returns java.util.Date
	 */
	public Date getStartTimeFrom() {
	    return this.startTimeFrom;
	}
	
	/**
	 * public setter
	 *
     * 
     * Describes the earliest (oldest) time to use in a time range filter based
     * on item start time. Must be specified if StartTimeTo is specified. Either
     * the StartTimeFrom, EndTimeFrom, or ModTimeFrom filter must be specified.
     * If you do not specify the correspoding To filter,
     * it is set to the time you make the call.
     * For better results, the time period you use should be less than 48 hours.
     * If 3000 or more items are found, use a smaller time range.<br>
     * <br>
     * Include a 2-minute, overlapping buffer between requests.
     * For example, if StartTimeTo was 6:58 in a prior request,
     * the current request should use 6:56 in StartTimeFrom
     * (e.g., use ranges like 5:56-6:58, 6:56-7:58, 7:56-8:58).
     * 
     *
     * @param java.util.Date
	 */
	public void setStartTimeFrom(Date startTimeFrom) {
	    this.startTimeFrom = startTimeFrom;
	}
	/**
     * public getter
     *
     * 
     * Describes the latest (most recent) date to use in a time range filter
     * based on item start time. If you specify the corresponding From filter,
     * but you do not include StartTimeTo, the StartTimeTo is set to
     * the time you make the call.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getStartTimeTo() {
	    return this.startTimeTo;
	}
	
	/**
	 * public setter
	 *
     * 
     * Describes the latest (most recent) date to use in a time range filter
     * based on item start time. If you specify the corresponding From filter,
     * but you do not include StartTimeTo, the StartTimeTo is set to
     * the time you make the call.
     * 
     *
     * @param java.util.Date
	 */
	public void setStartTimeTo(Date startTimeTo) {
	    this.startTimeTo = startTimeTo;
	}
	/**
     * public getter
     *
     * 
     * Describes the earliest (oldest) date to use in a time range filter based
     * on item end time. Must be specified if EndTimeTo is specified. Either
     * the StartTimeFrom, EndTimeFrom, or ModTimeFrom filter must be specified.
     * If you do not specify the correspoding To filter,
     * it is set to the time you make the call.<br>
     * <br>
     * For better results, the time range you use should be less than 48 hours.
     * If 3000 or more items are found, use a smaller time range.<br>
     * <br>
     * Include a 2-minute, overlapping buffer between requests.
     * For example, if EndTimeTo was 6:58 in a prior request,
     * the current request should use 6:56 in EndTimeFrom
     * (e.g., use ranges like 5:56-6:58, 6:56-7:58, 7:56-8:58).
     * 
     *
     * @returns java.util.Date
	 */
	public Date getEndTimeFrom() {
	    return this.endTimeFrom;
	}
	
	/**
	 * public setter
	 *
     * 
     * Describes the earliest (oldest) date to use in a time range filter based
     * on item end time. Must be specified if EndTimeTo is specified. Either
     * the StartTimeFrom, EndTimeFrom, or ModTimeFrom filter must be specified.
     * If you do not specify the correspoding To filter,
     * it is set to the time you make the call.<br>
     * <br>
     * For better results, the time range you use should be less than 48 hours.
     * If 3000 or more items are found, use a smaller time range.<br>
     * <br>
     * Include a 2-minute, overlapping buffer between requests.
     * For example, if EndTimeTo was 6:58 in a prior request,
     * the current request should use 6:56 in EndTimeFrom
     * (e.g., use ranges like 5:56-6:58, 6:56-7:58, 7:56-8:58).
     * 
     *
     * @param java.util.Date
	 */
	public void setEndTimeFrom(Date endTimeFrom) {
	    this.endTimeFrom = endTimeFrom;
	}
	/**
     * public getter
     *
     * 
     * Describes the latest (most recent) date to use in a time range filter
     * based on item end time. If you specify the corresponding From filter,
     * but you do not include EndTimeTo, then EndTimeTo is set
     * to the time you make the call.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getEndTimeTo() {
	    return this.endTimeTo;
	}
	
	/**
	 * public setter
	 *
     * 
     * Describes the latest (most recent) date to use in a time range filter
     * based on item end time. If you specify the corresponding From filter,
     * but you do not include EndTimeTo, then EndTimeTo is set
     * to the time you make the call.
     * 
     *
     * @param java.util.Date
	 */
	public void setEndTimeTo(Date endTimeTo) {
	    this.endTimeTo = endTimeTo;
	}
	/**
     * public getter
     *
     * 
     * Describes the earliest (oldest) date to use in a time range filter based
     * on item modification time. Must be specified if ModTimeTo is specified. Either
     * the StartTimeFrom, EndTimeFrom, or ModTimeFrom filter must be specified.
     * If you do not specify the correspoding To filter,
     * it is set to the time you make the call.<br>
     * <br>
     * Include a 2-minute, overlapping buffer between requests.
     * For example, if ModTimeTo was 6:58 in a prior request,
     * the current request should use 6:56 in ModTimeFrom
     * (e.g., use ranges like 5:56-6:58, 6:56-7:58, 7:56-8:58).
     * <br><br>
     * For better results, the time range you use should be less than 48 hours.
     * If 3000 or more items are found, use a smaller time range.
     * <br><br>
     * If an unexpected item is returned (including an old item
     * or an unchanged active item), please ignore the item.
     * Although a maintenance process may have triggered a change in the modification time,
     * item characteristics are unchanged.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getModTimeFrom() {
	    return this.modTimeFrom;
	}
	
	/**
	 * public setter
	 *
     * 
     * Describes the earliest (oldest) date to use in a time range filter based
     * on item modification time. Must be specified if ModTimeTo is specified. Either
     * the StartTimeFrom, EndTimeFrom, or ModTimeFrom filter must be specified.
     * If you do not specify the correspoding To filter,
     * it is set to the time you make the call.<br>
     * <br>
     * Include a 2-minute, overlapping buffer between requests.
     * For example, if ModTimeTo was 6:58 in a prior request,
     * the current request should use 6:56 in ModTimeFrom
     * (e.g., use ranges like 5:56-6:58, 6:56-7:58, 7:56-8:58).
     * <br><br>
     * For better results, the time range you use should be less than 48 hours.
     * If 3000 or more items are found, use a smaller time range.
     * <br><br>
     * If an unexpected item is returned (including an old item
     * or an unchanged active item), please ignore the item.
     * Although a maintenance process may have triggered a change in the modification time,
     * item characteristics are unchanged.
     * 
     *
     * @param java.util.Date
	 */
	public void setModTimeFrom(Date modTimeFrom) {
	    this.modTimeFrom = modTimeFrom;
	}
	/**
     * public getter
     *
     * 
     * Describes the latest (most recent) date and time to use in a time range filter
     * based on the time an item's record was modified. If you specify
     * the corresponding From filter, but you do not include ModTimeTo,
     * then ModTimeTo is set to the time you make the call.
     * Include a 2-minute buffer between the current time and
     * the ModTimeTo filter.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getModTimeTo() {
	    return this.modTimeTo;
	}
	
	/**
	 * public setter
	 *
     * 
     * Describes the latest (most recent) date and time to use in a time range filter
     * based on the time an item's record was modified. If you specify
     * the corresponding From filter, but you do not include ModTimeTo,
     * then ModTimeTo is set to the time you make the call.
     * Include a 2-minute buffer between the current time and
     * the ModTimeTo filter.
     * 
     *
     * @param java.util.Date
	 */
	public void setModTimeTo(Date modTimeTo) {
	    this.modTimeTo = modTimeTo;
	}
	/**
     * public getter
     *
     * 
     * Default is true. If true, response includes only items that have been modified
     * within the ModTime range. If false, response includes all items.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getNewItemFilter() {
	    return this.newItemFilter;
	}
	
	/**
	 * public setter
	 *
     * 
     * Default is true. If true, response includes only items that have been modified
     * within the ModTime range. If false, response includes all items.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setNewItemFilter(Boolean newItemFilter) {
	    this.newItemFilter = newItemFilter;
	}
	/**
     * public getter
     *
     * 
     * Specifies whether to include WatchCount in Item nodes returned. WatchCount
     * is the number of watches buyers have placed on the item from their My eBay
     * accounts.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getIncludeWatchCount() {
	    return this.includeWatchCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies whether to include WatchCount in Item nodes returned. WatchCount
     * is the number of watches buyers have placed on the item from their My eBay
     * accounts.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setIncludeWatchCount(Boolean includeWatchCount) {
	    this.includeWatchCount = includeWatchCount;
	}
	/**
     * public getter
     *
     * 
     * Specifies whether to force the response to include
     * variation specifics for multi-variation listings. <br>
     * <br>
     * If false (or not specified), eBay keeps the response as small as
     * possible by not returning Variation.VariationSpecifics.
     * It only returns Variation.SKU as an identifier
     * (along with the variation price and other selling details).
     * If the variation has no SKU, then Variation.VariationSpecifics
     * is returned as the variation's unique identifier.<br>
     * <br>
     * If true, Variation.VariationSpecifics is returned.
     * (Variation.SKU is also returned, if the variation has a SKU.)
     * This may be useful for applications that don't track variations
     * by SKU.<br>
     * <br>
     * Ignored when HideVariations=true.<br>
     * <br>
     * Please note that if the seller includes a large number of
     * variations in many listings, using this flag may degrade the
     * call's performance. Therefore, when you use this flag, you may
     * need to reduce the total number of items you're requesting at
     * once. For example, you may need to use shorter time ranges in
     * the EndTime, StartTime, or ModTime filters.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getIncludeVariationSpecifics() {
	    return this.includeVariationSpecifics;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies whether to force the response to include
     * variation specifics for multi-variation listings. <br>
     * <br>
     * If false (or not specified), eBay keeps the response as small as
     * possible by not returning Variation.VariationSpecifics.
     * It only returns Variation.SKU as an identifier
     * (along with the variation price and other selling details).
     * If the variation has no SKU, then Variation.VariationSpecifics
     * is returned as the variation's unique identifier.<br>
     * <br>
     * If true, Variation.VariationSpecifics is returned.
     * (Variation.SKU is also returned, if the variation has a SKU.)
     * This may be useful for applications that don't track variations
     * by SKU.<br>
     * <br>
     * Ignored when HideVariations=true.<br>
     * <br>
     * Please note that if the seller includes a large number of
     * variations in many listings, using this flag may degrade the
     * call's performance. Therefore, when you use this flag, you may
     * need to reduce the total number of items you're requesting at
     * once. For example, you may need to use shorter time ranges in
     * the EndTime, StartTime, or ModTime filters.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setIncludeVariationSpecifics(Boolean includeVariationSpecifics) {
	    this.includeVariationSpecifics = includeVariationSpecifics;
	}
	/**
     * public getter
     *
     * 
     * Specifies whether to force the response to hide
     * variation details for multi-variation listings.<br>
     * <br>
     * If false (or not specified), eBay returns variation details (if
     * any). In this case, the amount of detail can be controlled by
     * using IncludeVariationSpecifics.<br>
     * <br>
     * If true, variation details are not returned (and
     * IncludeVariationSpecifics has no effect). This may be useful for
     * applications that use other calls, notifications, alerts,
     * or reports to track price and quantity details.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getHideVariations() {
	    return this.hideVariations;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies whether to force the response to hide
     * variation details for multi-variation listings.<br>
     * <br>
     * If false (or not specified), eBay returns variation details (if
     * any). In this case, the amount of detail can be controlled by
     * using IncludeVariationSpecifics.<br>
     * <br>
     * If true, variation details are not returned (and
     * IncludeVariationSpecifics has no effect). This may be useful for
     * applications that use other calls, notifications, alerts,
     * or reports to track price and quantity details.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setHideVariations(Boolean hideVariations) {
	    this.hideVariations = hideVariations;
	}

}