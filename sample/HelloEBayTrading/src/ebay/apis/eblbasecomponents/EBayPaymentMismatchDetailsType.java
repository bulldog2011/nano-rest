// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

/**
 * 
 * Complex type that defines the <b>eBayPaymentMismatchDetails</b> container, which
 * is returned when a buyer's payment does not match the total cost of an order going through
 * the new eBay payment process. This type is only applicable for German and Austrian orders going
 * through the new eBay payment process.
 * 
 */
public class EBayPaymentMismatchDetailsType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "MismatchType")
	private MismatchTypeCodeType mismatchType;
	
	@Element(name = "ActionRequiredBy")
	private Date actionRequiredBy;
	
	@Element(name = "MismatchAmount")
	private AmountType mismatchAmount;
	
    
	/**
     * public getter
     *
     * 
     * This enumeration value indicates if the buyer has overpaid or underpaid for an order 
     * going through the new eBay payment process. This field is always returned with the 
     * <b>eBayPaymentMismatchDetails</b> container.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @returns ebay.apis.eblbasecomponents.MismatchTypeCodeType
	 */
	public MismatchTypeCodeType getMismatchType() {
	    return this.mismatchType;
	}
	
	/**
	 * public setter
	 *
     * 
     * This enumeration value indicates if the buyer has overpaid or underpaid for an order 
     * going through the new eBay payment process. This field is always returned with the 
     * <b>eBayPaymentMismatchDetails</b> container.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @param ebay.apis.eblbasecomponents.MismatchTypeCodeType
	 */
	public void setMismatchType(MismatchTypeCodeType mismatchType) {
	    this.mismatchType = mismatchType;
	}
	/**
     * public getter
     *
     * 
     * This dateTime value indicates the date by which the seller needs to accept or reject the
     * overpayment/underpayment. If the seller doesn't take action by this date, eBay returns
     * the payment to the buyer and essentially voids the sale. This field is always returned
     * with the <b>eBayPaymentMismatchDetails</b> container.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @returns java.util.Date
	 */
	public Date getActionRequiredBy() {
	    return this.actionRequiredBy;
	}
	
	/**
	 * public setter
	 *
     * 
     * This dateTime value indicates the date by which the seller needs to accept or reject the
     * overpayment/underpayment. If the seller doesn't take action by this date, eBay returns
     * the payment to the buyer and essentially voids the sale. This field is always returned
     * with the <b>eBayPaymentMismatchDetails</b> container.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @param java.util.Date
	 */
	public void setActionRequiredBy(Date actionRequiredBy) {
	    this.actionRequiredBy = actionRequiredBy;
	}
	/**
     * public getter
     *
     * 
     * This value indicates the amount in which the buyer's payment was either over
     * (<b>MismatchType</b>=OverPayment) or under 
     * (<b>MismatchType</b>=UnderPayment) the actual total
     * cost of an order going through the new eBay payment process.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getMismatchAmount() {
	    return this.mismatchAmount;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the amount in which the buyer's payment was either over
     * (<b>MismatchType</b>=OverPayment) or under 
     * (<b>MismatchType</b>=UnderPayment) the actual total
     * cost of an order going through the new eBay payment process.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setMismatchAmount(AmountType mismatchAmount) {
	    this.mismatchAmount = mismatchAmount;
	}

}