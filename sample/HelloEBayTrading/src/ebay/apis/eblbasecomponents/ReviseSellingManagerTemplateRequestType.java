// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * Revises a Selling Manager template.
 * This call is subject to change without notice; the
 * deprecation process is inapplicable to this call.
 * 
 */
@RootElement(name = "ReviseSellingManagerTemplateRequest", namespace = "urn:ebay:apis:eBLBaseComponents")
public class ReviseSellingManagerTemplateRequestType extends AbstractRequestType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "SaleTemplateID")
	private Long saleTemplateID;
	
	@Element(name = "ProductID")
	private Long productID;
	
	@Element(name = "SaleTemplateName")
	private String saleTemplateName;
	
	@Element(name = "Item")
	private ItemType item;
	
	@Element(name = "DeletedField")
	private List<String> deletedField;
	
	@Element(name = "VerifyOnly")
	private Boolean verifyOnly;
	
    
	/**
     * public getter
     *
     * 
     * The ID of the sale template. You can obtain a
     * SaleTemplateID by calling GetSellingManagerInventory or AddSellingManagerTemplate.
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getSaleTemplateID() {
	    return this.saleTemplateID;
	}
	
	/**
	 * public setter
	 *
     * 
     * The ID of the sale template. You can obtain a
     * SaleTemplateID by calling GetSellingManagerInventory or AddSellingManagerTemplate.
     * 
     *
     * @param java.lang.Long
	 */
	public void setSaleTemplateID(Long saleTemplateID) {
	    this.saleTemplateID = saleTemplateID;
	}
	/**
     * public getter
     *
     * 
     * Reserved for future use.
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getProductID() {
	    return this.productID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Reserved for future use.
     * 
     *
     * @param java.lang.Long
	 */
	public void setProductID(Long productID) {
	    this.productID = productID;
	}
	/**
     * public getter
     *
     * 
     * The name of the sale template.
     * 
     *
     * @returns java.lang.String
	 */
	public String getSaleTemplateName() {
	    return this.saleTemplateName;
	}
	
	/**
	 * public setter
	 *
     * 
     * The name of the sale template.
     * 
     *
     * @param java.lang.String
	 */
	public void setSaleTemplateName(String saleTemplateName) {
	    this.saleTemplateName = saleTemplateName;
	}
	/**
     * public getter
     *
     * 
     * Required. In Item.ItemID, specify the same value as the
     * value you specified in SaleTemplateID.
     * Other child elements hold the values for properties that are being changed.
     * Set values in the Item object only for those properties that are
     * changing. Use DeletedField to remove a property.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ItemType
	 */
	public ItemType getItem() {
	    return this.item;
	}
	
	/**
	 * public setter
	 *
     * 
     * Required. In Item.ItemID, specify the same value as the
     * value you specified in SaleTemplateID.
     * Other child elements hold the values for properties that are being changed.
     * Set values in the Item object only for those properties that are
     * changing. Use DeletedField to remove a property.
     * 
     *
     * @param ebay.apis.eblbasecomponents.ItemType
	 */
	public void setItem(ItemType item) {
	    this.item = item;
	}
	/**
     * public getter
     *
     * 
     * Specifies the name of a field to remove from a template.
     * See the eBay Web Services guide for rules on removing values when revising items.
     * Also see the relevant field descriptions to determine when to use DeletedField (and potential consequences).
     * The request can contain zero, one, or many instances of DeletedField (one for each field to be removed).
     * DeletedField accepts the following path names, which remove the corresponding fields:
     * <br><br>
     * Item.ApplicationData<br>
     * Item.AttributeSetArray<br>
     * Item.ConditionID<br>
     * Item.ItemSpecifics<br>
     * Item.ListingCheckoutRedirectPreference.ProStoresStoreName<br>
     * Item.ListingCheckoutRedirectPreference.SellerThirdPartyUsername<br>
     * Item.ListingDesigner.LayoutID<br>
     * Item.ListingDesigner.ThemeID<br>
     * Item.ListingEnhancement[Value]<br>
     * Item.PayPalEmailAddress<br>
     * Item.PictureDetails.GalleryURL<br>
     * Item.PictureDetails.PictureURL<br>
     * Item.PostalCode<br>
     * Item.ProductListingDetails<br>
     * item.ShippingDetails.PaymentInstructions<br>
     * item.SKU<br>
     * Item.SubTitle<br><br>
     * These values are case-sensitive. Use values that match the case of the schema element names
     * (Item.PictureDetails.GalleryURL) or make the initial letter of each field name lowercase (item.pictureDetails.galleryURL).
     * However, do not change the case of letters in the middle of a field name (e.g., item.picturedetails.galleryUrl is not allowed).
     * <br><br>
     * Depending on how you have configured your pictures, you cannot necessarily delete
     * both GalleryURL and PictureURL from an existing listing.
     * If GalleryType was already set for the item you are revising, you cannot remove it.
     * This means you still need to include either a first picture
     *  or a gallery URL in your revised listing.
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getDeletedField() {
	    return this.deletedField;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the name of a field to remove from a template.
     * See the eBay Web Services guide for rules on removing values when revising items.
     * Also see the relevant field descriptions to determine when to use DeletedField (and potential consequences).
     * The request can contain zero, one, or many instances of DeletedField (one for each field to be removed).
     * DeletedField accepts the following path names, which remove the corresponding fields:
     * <br><br>
     * Item.ApplicationData<br>
     * Item.AttributeSetArray<br>
     * Item.ConditionID<br>
     * Item.ItemSpecifics<br>
     * Item.ListingCheckoutRedirectPreference.ProStoresStoreName<br>
     * Item.ListingCheckoutRedirectPreference.SellerThirdPartyUsername<br>
     * Item.ListingDesigner.LayoutID<br>
     * Item.ListingDesigner.ThemeID<br>
     * Item.ListingEnhancement[Value]<br>
     * Item.PayPalEmailAddress<br>
     * Item.PictureDetails.GalleryURL<br>
     * Item.PictureDetails.PictureURL<br>
     * Item.PostalCode<br>
     * Item.ProductListingDetails<br>
     * item.ShippingDetails.PaymentInstructions<br>
     * item.SKU<br>
     * Item.SubTitle<br><br>
     * These values are case-sensitive. Use values that match the case of the schema element names
     * (Item.PictureDetails.GalleryURL) or make the initial letter of each field name lowercase (item.pictureDetails.galleryURL).
     * However, do not change the case of letters in the middle of a field name (e.g., item.picturedetails.galleryUrl is not allowed).
     * <br><br>
     * Depending on how you have configured your pictures, you cannot necessarily delete
     * both GalleryURL and PictureURL from an existing listing.
     * If GalleryType was already set for the item you are revising, you cannot remove it.
     * This means you still need to include either a first picture
     *  or a gallery URL in your revised listing.
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setDeletedField(List<String> deletedField) {
	    this.deletedField = deletedField;
	}
	/**
     * public getter
     *
     * 
     * Use this field to verify the template instead of revising it.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getVerifyOnly() {
	    return this.verifyOnly;
	}
	
	/**
	 * public setter
	 *
     * 
     * Use this field to verify the template instead of revising it.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setVerifyOnly(Boolean verifyOnly) {
	    this.verifyOnly = verifyOnly;
	}

}