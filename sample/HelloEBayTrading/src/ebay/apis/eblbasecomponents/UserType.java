// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.util.Date;

/**
 * 
 * Type to contain the data for one eBay user. Depending on the context, the user
 * might be the seller or the buyer on either side of an order, or the bidder or winning bidder
 * in a listing. An object of this type is returned by a number of calls, including
 * the GetUser call.
 * 
 */
public class UserType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "AboutMePage")
	private Boolean aboutMePage;
	
	@Element(name = "EIASToken")
	private String eiasToken;
	
	@Element(name = "Email")
	private String email;
	
	@Element(name = "FeedbackScore")
	private Integer feedbackScore;
	
	@Element(name = "UniqueNegativeFeedbackCount")
	private Integer uniqueNegativeFeedbackCount;
	
	@Element(name = "UniquePositiveFeedbackCount")
	private Integer uniquePositiveFeedbackCount;
	
	@Element(name = "PositiveFeedbackPercent")
	private Float positiveFeedbackPercent;
	
	@Element(name = "FeedbackPrivate")
	private Boolean feedbackPrivate;
	
	@Element(name = "FeedbackRatingStar")
	private FeedbackRatingStarCodeType feedbackRatingStar;
	
	@Element(name = "IDVerified")
	private Boolean idVerified;
	
	@Element
	private Boolean eBayGoodStanding;
	
	@Element(name = "NewUser")
	private Boolean newUser;
	
	@Element(name = "RegistrationAddress")
	private AddressType registrationAddress;
	
	@Element(name = "RegistrationDate")
	private Date registrationDate;
	
	@Element(name = "Site")
	private SiteCodeType site;
	
	@Element(name = "Status")
	private UserStatusCodeType status;
	
	@Element(name = "UserID")
	private String userID;
	
	@Element(name = "UserIDChanged")
	private Boolean userIDChanged;
	
	@Element(name = "UserIDLastChanged")
	private Date userIDLastChanged;
	
	@Element(name = "VATStatus")
	private VATStatusCodeType vatStatus;
	
	@Element(name = "BuyerInfo")
	private BuyerType buyerInfo;
	
	@Element(name = "SellerInfo")
	private SellerType sellerInfo;
	
	@Element(name = "BusinessRole")
	private BusinessRoleType businessRole;
	
	@Element(name = "CharityAffiliations")
	private CharityAffiliationsType charityAffiliations;
	
	@Element(name = "PayPalAccountLevel")
	private PayPalAccountLevelCodeType payPalAccountLevel;
	
	@Element(name = "PayPalAccountType")
	private PayPalAccountTypeCodeType payPalAccountType;
	
	@Element(name = "PayPalAccountStatus")
	private PayPalAccountStatusCodeType payPalAccountStatus;
	
	@Element(name = "UserSubscription")
	private List<EBaySubscriptionTypeCodeType> userSubscription;
	
	@Element(name = "SiteVerified")
	private Boolean siteVerified;
	
	@Element(name = "SkypeID")
	private List<String> skypeID;
	
	@Element
	private Boolean eBayWikiReadOnly;
	
	@Element(name = "TUVLevel")
	private Integer tuvLevel;
	
	@Element(name = "VATID")
	private String vatid;
	
	@Element(name = "MotorsDealer")
	private Boolean motorsDealer;
	
	@Element(name = "SellerPaymentMethod")
	private SellerPaymentMethodCodeType sellerPaymentMethod;
	
	@Element(name = "BiddingSummary")
	private BiddingSummaryType biddingSummary;
	
	@Element(name = "UserAnonymized")
	private Boolean userAnonymized;
	
	@Element(name = "UniqueNeutralFeedbackCount")
	private Integer uniqueNeutralFeedbackCount;
	
	@Element(name = "EnterpriseSeller")
	private Boolean enterpriseSeller;
	
	@Element(name = "BillingEmail")
	private String billingEmail;
	
	@Element(name = "QualifiesForSelling")
	private Boolean qualifiesForSelling;
	
	@Element(name = "StaticAlias")
	private String staticAlias;
	
    
	/**
     * public getter
     *
     * 
     * If true, indicates that the user has set up an About Me page.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getAboutMePage() {
	    return this.aboutMePage;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, indicates that the user has set up an About Me page.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setAboutMePage(Boolean aboutMePage) {
	    this.aboutMePage = aboutMePage;
	}
	/**
     * public getter
     *
     * 
     * Unique identifier for the user that does not change when the eBay user name
     * is changed. Use when an application needs to associate a new eBay user name
     * with the corresponding eBay user.
     * 
     *
     * @returns java.lang.String
	 */
	public String getEiasToken() {
	    return this.eiasToken;
	}
	
	/**
	 * public setter
	 *
     * 
     * Unique identifier for the user that does not change when the eBay user name
     * is changed. Use when an application needs to associate a new eBay user name
     * with the corresponding eBay user.
     * 
     *
     * @param java.lang.String
	 */
	public void setEiasToken(String eiasToken) {
	    this.eiasToken = eiasToken;
	}
	/**
     * public getter
     *
     * 
     * Email address for the user.
     * Please see the links below to the topics related to anonymous user information
     * and static email addresses.
     * You cannot retrieve an email address for any user
     * with whom you do not have an order relationship, regardless of site.
     * An email address of another user is only returned
     * if you and the other user are in an order relationship,
     * within a certain time of order line item creation
     * (although this limitation isn't applicable to the GetAllBidders call
     * in the case of motor vehicles categories.)
     * Based on Trust and Safety policies, the time is
     * unspecified and can vary by site.
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to that
     * bidder, and to the seller of an item that the user is bidding on.
     * <br><br>
     * For the order retrieval calls, the buyer's registration email address is only
     * returned if the buyer is registered on the DE, AT, or CH sites, regardless of
     * the seller's registration site and the site to which the seller sends the
     * request.
     * 
     *
     * @returns java.lang.String
	 */
	public String getEmail() {
	    return this.email;
	}
	
	/**
	 * public setter
	 *
     * 
     * Email address for the user.
     * Please see the links below to the topics related to anonymous user information
     * and static email addresses.
     * You cannot retrieve an email address for any user
     * with whom you do not have an order relationship, regardless of site.
     * An email address of another user is only returned
     * if you and the other user are in an order relationship,
     * within a certain time of order line item creation
     * (although this limitation isn't applicable to the GetAllBidders call
     * in the case of motor vehicles categories.)
     * Based on Trust and Safety policies, the time is
     * unspecified and can vary by site.
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to that
     * bidder, and to the seller of an item that the user is bidding on.
     * <br><br>
     * For the order retrieval calls, the buyer's registration email address is only
     * returned if the buyer is registered on the DE, AT, or CH sites, regardless of
     * the seller's registration site and the site to which the seller sends the
     * request.
     * 
     *
     * @param java.lang.String
	 */
	public void setEmail(String email) {
	    this.email = email;
	}
	/**
     * public getter
     *
     * 
     * The aggregate feedback score for a user. A user's feedback score is the net
     * positive feedback minus the net negative feedback left for the user.
     * Feedback scores are a quantitative expression of the desirability of dealing
     * with a user as a buyer or a seller in either side of an order. Each order line item can
     * result in one feedback entry for a given user (the buyer can leave feedback
     * for the seller, and the seller can leave feedback for the buyer.). That one
     * feedback can be positive, negative, or neutral. The aggregated feedback
     * counts for a particular user represent that user's overall feedback score
     * (referred to as a "feedback rating" on the eBay site). If the user has
     * chosen to make their feedback private and that user is not the user
     * identified in the request's authentication token, FeedbackScore is not
     * returned and FeedbackPrivate is returned with a value of true.<br>
     * <br>
     * In GetMyeBayBuying and GetMyeBaySelling, feedback information (FeedbackScore
     * and FeedbackRatingStar) is returned in BidList.ItemArray.Item.Seller. For
     * GetMyeBayBuying, the feedback score of each seller with an item having
     * received a bid from the buyer is returned. For GetMyeBaySelling, the
     * feedback score of the seller is returned. <br>
     * <br>
     * GetMyeBayBuying and GetMyeBaySelling also return feedback information
     * (FeedbackScore and FeedbackRatingStar) in
     * BidList.ItemArray.Item.SellingStatus.HighBidder. GetMyeBayBuying returns
     * feedback information on the high bidder of each item the buyer is bidding
     * on. GetMyeBaySelling returns feedback information on the high bidder of each
     * item the seller is selling.<br>
     * <br>
     * Since a bidder's user info is anonymous, the real feedback score will
     * be returned only to that bidder, and to the seller of an item that the
     * user is bidding on. For all other users, the value -99 is returned.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getFeedbackScore() {
	    return this.feedbackScore;
	}
	
	/**
	 * public setter
	 *
     * 
     * The aggregate feedback score for a user. A user's feedback score is the net
     * positive feedback minus the net negative feedback left for the user.
     * Feedback scores are a quantitative expression of the desirability of dealing
     * with a user as a buyer or a seller in either side of an order. Each order line item can
     * result in one feedback entry for a given user (the buyer can leave feedback
     * for the seller, and the seller can leave feedback for the buyer.). That one
     * feedback can be positive, negative, or neutral. The aggregated feedback
     * counts for a particular user represent that user's overall feedback score
     * (referred to as a "feedback rating" on the eBay site). If the user has
     * chosen to make their feedback private and that user is not the user
     * identified in the request's authentication token, FeedbackScore is not
     * returned and FeedbackPrivate is returned with a value of true.<br>
     * <br>
     * In GetMyeBayBuying and GetMyeBaySelling, feedback information (FeedbackScore
     * and FeedbackRatingStar) is returned in BidList.ItemArray.Item.Seller. For
     * GetMyeBayBuying, the feedback score of each seller with an item having
     * received a bid from the buyer is returned. For GetMyeBaySelling, the
     * feedback score of the seller is returned. <br>
     * <br>
     * GetMyeBayBuying and GetMyeBaySelling also return feedback information
     * (FeedbackScore and FeedbackRatingStar) in
     * BidList.ItemArray.Item.SellingStatus.HighBidder. GetMyeBayBuying returns
     * feedback information on the high bidder of each item the buyer is bidding
     * on. GetMyeBaySelling returns feedback information on the high bidder of each
     * item the seller is selling.<br>
     * <br>
     * Since a bidder's user info is anonymous, the real feedback score will
     * be returned only to that bidder, and to the seller of an item that the
     * user is bidding on. For all other users, the value -99 is returned.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setFeedbackScore(Integer feedbackScore) {
	    this.feedbackScore = feedbackScore;
	}
	/**
     * public getter
     *
     * 
     * Total count of negative Feedback entries received by the user, including weekly repeats.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getUniqueNegativeFeedbackCount() {
	    return this.uniqueNegativeFeedbackCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Total count of negative Feedback entries received by the user, including weekly repeats.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setUniqueNegativeFeedbackCount(Integer uniqueNegativeFeedbackCount) {
	    this.uniqueNegativeFeedbackCount = uniqueNegativeFeedbackCount;
	}
	/**
     * public getter
     *
     * 
     * Total count of positive Feedback entries received by the user, including
     * weekly repeats. Contains the aggregate feedback score for a user. A member's
     * feedback score is the net positive feedback minus the net negative feedback
     * left for the member. Feedback scores are a quantitative expression of the
     * desirability of dealing with that person as a Buyer or a Seller on either side of an order. Each order line item can result in one feedback entry for
     * a given user (the buyer can leave feedback for the seller, and the seller
     * can leave feedback for the buyer.). That one feedback can be positive,
     * negative, or neutral. The aggregated feedback counts for a particular user
     * represent that user's overall feedback score (referred to as a "feedback
     * rating" on the eBay site). This rating is commonly expressed as the eBay
     * Feedback score for the user.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getUniquePositiveFeedbackCount() {
	    return this.uniquePositiveFeedbackCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Total count of positive Feedback entries received by the user, including
     * weekly repeats. Contains the aggregate feedback score for a user. A member's
     * feedback score is the net positive feedback minus the net negative feedback
     * left for the member. Feedback scores are a quantitative expression of the
     * desirability of dealing with that person as a Buyer or a Seller on either side of an order. Each order line item can result in one feedback entry for
     * a given user (the buyer can leave feedback for the seller, and the seller
     * can leave feedback for the buyer.). That one feedback can be positive,
     * negative, or neutral. The aggregated feedback counts for a particular user
     * represent that user's overall feedback score (referred to as a "feedback
     * rating" on the eBay site). This rating is commonly expressed as the eBay
     * Feedback score for the user.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setUniquePositiveFeedbackCount(Integer uniquePositiveFeedbackCount) {
	    this.uniquePositiveFeedbackCount = uniquePositiveFeedbackCount;
	}
	/**
     * public getter
     *
     * 
     * Percent of total feedback that is positive. For example, if the member has
     * 50 feedbacks, where 49 are positive and 1 is neutral or negative, the
     * positive feedback percent could be 98.0. The value uses a max precision of 4
     * and a scale of 1. If the user has feedback, this value can be returned
     * regardless of whether the member has chosen to make their feedback private.
     * Not returned if the user has no feedback.
     * 
     *
     * @returns java.lang.Float
	 */
	public Float getPositiveFeedbackPercent() {
	    return this.positiveFeedbackPercent;
	}
	
	/**
	 * public setter
	 *
     * 
     * Percent of total feedback that is positive. For example, if the member has
     * 50 feedbacks, where 49 are positive and 1 is neutral or negative, the
     * positive feedback percent could be 98.0. The value uses a max precision of 4
     * and a scale of 1. If the user has feedback, this value can be returned
     * regardless of whether the member has chosen to make their feedback private.
     * Not returned if the user has no feedback.
     * 
     *
     * @param java.lang.Float
	 */
	public void setPositiveFeedbackPercent(Float positiveFeedbackPercent) {
	    this.positiveFeedbackPercent = positiveFeedbackPercent;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the user has chosen to make their feedback score and
     * feedback details private (hidden from other users). Note that the percentage
     * of positive feedback can still be returned, even if other feedback details
     * are private.
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to
     * that bidder, and to the seller of an item that the user is bidding on.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getFeedbackPrivate() {
	    return this.feedbackPrivate;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the user has chosen to make their feedback score and
     * feedback details private (hidden from other users). Note that the percentage
     * of positive feedback can still be returned, even if other feedback details
     * are private.
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to
     * that bidder, and to the seller of an item that the user is bidding on.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setFeedbackPrivate(Boolean feedbackPrivate) {
	    this.feedbackPrivate = feedbackPrivate;
	}
	/**
     * public getter
     *
     * 
     * Visual indicator of user's feedback score. See FeedbackRatingStarCodeType for
     * specific values.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.FeedbackRatingStarCodeType
	 */
	public FeedbackRatingStarCodeType getFeedbackRatingStar() {
	    return this.feedbackRatingStar;
	}
	
	/**
	 * public setter
	 *
     * 
     * Visual indicator of user's feedback score. See FeedbackRatingStarCodeType for
     * specific values.
     * 
     *
     * @param ebay.apis.eblbasecomponents.FeedbackRatingStarCodeType
	 */
	public void setFeedbackRatingStar(FeedbackRatingStarCodeType feedbackRatingStar) {
	    this.feedbackRatingStar = feedbackRatingStar;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the user has been verified. For more information
     * about the ID Verify program, see:
     * http://pages.ebay.com/help/policies/identity-idverify.html
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getIdVerified() {
	    return this.idVerified;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the user has been verified. For more information
     * about the ID Verify program, see:
     * http://pages.ebay.com/help/policies/identity-idverify.html
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setIdVerified(Boolean idVerified) {
	    this.idVerified = idVerified;
	}
	/**
     * public getter
     *
     * 
     * If true, indicates that the user is in good standing with eBay.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getEBayGoodStanding() {
	    return this.eBayGoodStanding;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, indicates that the user is in good standing with eBay.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setEBayGoodStanding(Boolean eBayGoodStanding) {
	    this.eBayGoodStanding = eBayGoodStanding;
	}
	/**
     * public getter
     *
     * 
     * If true, identifies a new user who has been a registered eBay user for 30 days
     * or less. Always false after the user has been registered for more than 30
     * days. Does not indicate an ID change (see UserIdChanged).
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getNewUser() {
	    return this.newUser;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, identifies a new user who has been a registered eBay user for 30 days
     * or less. Always false after the user has been registered for more than 30
     * days. Does not indicate an ID change (see UserIdChanged).
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setNewUser(Boolean newUser) {
	    this.newUser = newUser;
	}
	/**
     * public getter
     *
     * 
     * Registration address for a user.<br>
     * <br>
     * <b>GetUser:</b> eBay returns complete
     * RegistrationAddress details (including Phone), as applicable to the
     * registration site, when you retrieve your own user data. <br>
     * <br>
     * <b>GetItem and GetSellerTransactions:</b> RegistrationAddress for another user
     * (except for Phone) is only returned if you have an order relationship
     * with that user AND that user is registered on DE/AT/CH, regardless of your
     * registration site and the site to which you send the request. For example,
     * the seller can see the buyer's registration address if the buyer is
     * registered on DE/AT/CH, or the buyer can see the seller's registration
     * address if the seller is registered on DE/AT/CH. (The buyer and seller won't
     * see their own registration addresses in GetItem.)
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AddressType
	 */
	public AddressType getRegistrationAddress() {
	    return this.registrationAddress;
	}
	
	/**
	 * public setter
	 *
     * 
     * Registration address for a user.<br>
     * <br>
     * <b>GetUser:</b> eBay returns complete
     * RegistrationAddress details (including Phone), as applicable to the
     * registration site, when you retrieve your own user data. <br>
     * <br>
     * <b>GetItem and GetSellerTransactions:</b> RegistrationAddress for another user
     * (except for Phone) is only returned if you have an order relationship
     * with that user AND that user is registered on DE/AT/CH, regardless of your
     * registration site and the site to which you send the request. For example,
     * the seller can see the buyer's registration address if the buyer is
     * registered on DE/AT/CH, or the buyer can see the seller's registration
     * address if the seller is registered on DE/AT/CH. (The buyer and seller won't
     * see their own registration addresses in GetItem.)
     * 
     *
     * @param ebay.apis.eblbasecomponents.AddressType
	 */
	public void setRegistrationAddress(AddressType registrationAddress) {
	    this.registrationAddress = registrationAddress;
	}
	/**
     * public getter
     *
     * 
     * Indicates the date the specified user originally registered with eBay.
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to that bidder,
     * and to the seller of an item that the user is bidding on.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getRegistrationDate() {
	    return this.registrationDate;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the date the specified user originally registered with eBay.
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to that bidder,
     * and to the seller of an item that the user is bidding on.
     * 
     *
     * @param java.util.Date
	 */
	public void setRegistrationDate(Date registrationDate) {
	    this.registrationDate = registrationDate;
	}
	/**
     * public getter
     *
     * 
     * eBay site the user is registered with.
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to
     * that bidder, and to the seller of an item that the user is bidding on.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SiteCodeType
	 */
	public SiteCodeType getSite() {
	    return this.site;
	}
	
	/**
	 * public setter
	 *
     * 
     * eBay site the user is registered with.
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to
     * that bidder, and to the seller of an item that the user is bidding on.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SiteCodeType
	 */
	public void setSite(SiteCodeType site) {
	    this.site = site;
	}
	/**
     * public getter
     *
     * 
     * Indicates the user's registration/user status.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.UserStatusCodeType
	 */
	public UserStatusCodeType getStatus() {
	    return this.status;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the user's registration/user status.
     * 
     *
     * @param ebay.apis.eblbasecomponents.UserStatusCodeType
	 */
	public void setStatus(UserStatusCodeType status) {
	    this.status = status;
	}
	/**
     * public getter
     *
     * 
     * Unique eBay user ID for the user.<br>
     * <br>
     * Since a bidder's user info is anonymous, this tag contains the actual
     * value of an ID only for that bidder, and for the seller of an item that the user is
     * bidding on. For other users, the actual value is replaced by an
     * anonymous value, according to these rules:
     * <br><br>
     * When bidding on items, UserID is replaced with the
     * value "a****b" where a and b are random characters from the UserID. For
     * example, if the UserID = IBidALot, it might be displayed as, "I****A".
     * <br><br>
     * Note that in this format, the anonymous bidder ID can change for each
     * auction.
     * <br><br>
     * For GetMyeBayBuying only, when bidding on items: UserID
     * is replaced with the value "a****b" where a and b are random characters from
     * the UserID.
     * <br><br>
     * When bidding on items listed on the the Philippines site: UserID is replaced
     * with the value "Bidder X" where X is a number indicating the order of that
     * user's first bid. For example, if the user was the third bidder,
     * UserID = Bidder 3.
     * <br><br>
     * Note that in this Philippines site format, the anonymous bidder ID stays the same for a given
     * auction, but is different for different auctions. For example, a bidder who
     * is the third and then the seventh bidder in an auction will be listed for
     * both bids as "Bidder 3". However, if that same bidder is the first bidder on
     * a different auction, the bidder will be listed for that auction as "Bidder
     * 1", not "Bidder 3".
     * <br><br>
     * For GetMyeBayBuying only, when bidding on items listed on the UK and AU sites:
     * UserID is replaced with the string "High Bidder".
     * <br><br>
     * For PlaceOffer, see also SellingStatus.HighBidder.
     * 
     *
     * @returns java.lang.String
	 */
	public String getUserID() {
	    return this.userID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Unique eBay user ID for the user.<br>
     * <br>
     * Since a bidder's user info is anonymous, this tag contains the actual
     * value of an ID only for that bidder, and for the seller of an item that the user is
     * bidding on. For other users, the actual value is replaced by an
     * anonymous value, according to these rules:
     * <br><br>
     * When bidding on items, UserID is replaced with the
     * value "a****b" where a and b are random characters from the UserID. For
     * example, if the UserID = IBidALot, it might be displayed as, "I****A".
     * <br><br>
     * Note that in this format, the anonymous bidder ID can change for each
     * auction.
     * <br><br>
     * For GetMyeBayBuying only, when bidding on items: UserID
     * is replaced with the value "a****b" where a and b are random characters from
     * the UserID.
     * <br><br>
     * When bidding on items listed on the the Philippines site: UserID is replaced
     * with the value "Bidder X" where X is a number indicating the order of that
     * user's first bid. For example, if the user was the third bidder,
     * UserID = Bidder 3.
     * <br><br>
     * Note that in this Philippines site format, the anonymous bidder ID stays the same for a given
     * auction, but is different for different auctions. For example, a bidder who
     * is the third and then the seventh bidder in an auction will be listed for
     * both bids as "Bidder 3". However, if that same bidder is the first bidder on
     * a different auction, the bidder will be listed for that auction as "Bidder
     * 1", not "Bidder 3".
     * <br><br>
     * For GetMyeBayBuying only, when bidding on items listed on the UK and AU sites:
     * UserID is replaced with the string "High Bidder".
     * <br><br>
     * For PlaceOffer, see also SellingStatus.HighBidder.
     * 
     *
     * @param java.lang.String
	 */
	public void setUserID(String userID) {
	    this.userID = userID;
	}
	/**
     * public getter
     *
     * 
     * If true, identifies a user whose ID has changed within the last 30 days. Does not
     * indicate a new user (see NewUser).
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to that bidder,
     * and to the seller of an item that the user is bidding on.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getUserIDChanged() {
	    return this.userIDChanged;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, identifies a user whose ID has changed within the last 30 days. Does not
     * indicate a new user (see NewUser).
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to that bidder,
     * and to the seller of an item that the user is bidding on.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setUserIDChanged(Boolean userIDChanged) {
	    this.userIDChanged = userIDChanged;
	}
	/**
     * public getter
     *
     * 
     * Date and time the user's data was last changed (in GMT).
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to that bidder,
     * and to the seller of an item that the user is bidding on.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getUserIDLastChanged() {
	    return this.userIDLastChanged;
	}
	
	/**
	 * public setter
	 *
     * 
     * Date and time the user's data was last changed (in GMT).
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to that bidder,
     * and to the seller of an item that the user is bidding on.
     * 
     *
     * @param java.util.Date
	 */
	public void setUserIDLastChanged(Date userIDLastChanged) {
	    this.userIDLastChanged = userIDLastChanged;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether or not the user is subject to VAT.
     * Users who have registered with eBay as VAT-exempt are not
     * subject to VAT. See documentation on Value-Added Tax (VAT).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.VATStatusCodeType
	 */
	public VATStatusCodeType getVatStatus() {
	    return this.vatStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether or not the user is subject to VAT.
     * Users who have registered with eBay as VAT-exempt are not
     * subject to VAT. See documentation on Value-Added Tax (VAT).
     * 
     *
     * @param ebay.apis.eblbasecomponents.VATStatusCodeType
	 */
	public void setVatStatus(VATStatusCodeType vatStatus) {
	    this.vatStatus = vatStatus;
	}
	/**
     * public getter
     *
     * 
     * Contains information about the user as a buyer, such as
     * the shipping address. See BuyerType for its child elements.
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to that bidder,
     * and to the seller of an item that the user is bidding on.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.BuyerType
	 */
	public BuyerType getBuyerInfo() {
	    return this.buyerInfo;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains information about the user as a buyer, such as
     * the shipping address. See BuyerType for its child elements.
     * <br><br>
     * Since a bidder's user info is anonymous, this tag will be returned only to that bidder,
     * and to the seller of an item that the user is bidding on.
     * 
     *
     * @param ebay.apis.eblbasecomponents.BuyerType
	 */
	public void setBuyerInfo(BuyerType buyerInfo) {
	    this.buyerInfo = buyerInfo;
	}
	/**
     * public getter
     *
     * 
     * Contains information about a seller, including listing settings, listing
     * preferences, seller rankings, and seller type.
     * <br><br>
     * This field is replaced by the SellerBusinessType
     * field if the user is a business seller with a site
     * ID of 77 (Germany), 3 (UK), 205 (Ireland) or 100 (Motors).
     * <br><br>
     * See SellerType or SellerBusinessCodeType for the child elements.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SellerType
	 */
	public SellerType getSellerInfo() {
	    return this.sellerInfo;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains information about a seller, including listing settings, listing
     * preferences, seller rankings, and seller type.
     * <br><br>
     * This field is replaced by the SellerBusinessType
     * field if the user is a business seller with a site
     * ID of 77 (Germany), 3 (UK), 205 (Ireland) or 100 (Motors).
     * <br><br>
     * See SellerType or SellerBusinessCodeType for the child elements.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SellerType
	 */
	public void setSellerInfo(SellerType sellerInfo) {
	    this.sellerInfo = sellerInfo;
	}
	/**
     * public getter
     *
     * 
     * This field indicates whether the user's account is enabled for buying and selling
     * (indicated by 'FullMarketPlaceParticipant') on eBay, or if the account is a Partially
     * Provisioned Account (indicated by 'Shopper') without selling and buying privileges on
     * eBay.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.BusinessRoleType
	 */
	public BusinessRoleType getBusinessRole() {
	    return this.businessRole;
	}
	
	/**
	 * public setter
	 *
     * 
     * This field indicates whether the user's account is enabled for buying and selling
     * (indicated by 'FullMarketPlaceParticipant') on eBay, or if the account is a Partially
     * Provisioned Account (indicated by 'Shopper') without selling and buying privileges on
     * eBay.
     * 
     *
     * @param ebay.apis.eblbasecomponents.BusinessRoleType
	 */
	public void setBusinessRole(BusinessRoleType businessRole) {
	    this.businessRole = businessRole;
	}
	/**
     * public getter
     *
     * 
     * Contains information about the seller's charity affliations.
     * Returned if the user is affiliated with one or more
     * charities. Seller must be registered with the eBay Giving
     * Works provider to be affiliated with a charity non-profit
     * organization.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.CharityAffiliationsType
	 */
	public CharityAffiliationsType getCharityAffiliations() {
	    return this.charityAffiliations;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains information about the seller's charity affliations.
     * Returned if the user is affiliated with one or more
     * charities. Seller must be registered with the eBay Giving
     * Works provider to be affiliated with a charity non-profit
     * organization.
     * 
     *
     * @param ebay.apis.eblbasecomponents.CharityAffiliationsType
	 */
	public void setCharityAffiliations(CharityAffiliationsType charityAffiliations) {
	    this.charityAffiliations = charityAffiliations;
	}
	/**
     * public getter
     *
     * 
     * The user's PayPal account level. Only returned for the user identified in
     * eBayAuthToken. That is, you cannot see someone else's PayPal account level.
     * Use this information to check whether a seller is eligible to list digital
     * downloadable items. See the eBay Web site online
     * help for current PayPal requirements for listing digital items.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PayPalAccountLevelCodeType
	 */
	public PayPalAccountLevelCodeType getPayPalAccountLevel() {
	    return this.payPalAccountLevel;
	}
	
	/**
	 * public setter
	 *
     * 
     * The user's PayPal account level. Only returned for the user identified in
     * eBayAuthToken. That is, you cannot see someone else's PayPal account level.
     * Use this information to check whether a seller is eligible to list digital
     * downloadable items. See the eBay Web site online
     * help for current PayPal requirements for listing digital items.
     * 
     *
     * @param ebay.apis.eblbasecomponents.PayPalAccountLevelCodeType
	 */
	public void setPayPalAccountLevel(PayPalAccountLevelCodeType payPalAccountLevel) {
	    this.payPalAccountLevel = payPalAccountLevel;
	}
	/**
     * public getter
     *
     * 
     * The user's PayPal account type. Only returned for the user identified in
     * eBayAuthToken. That is, you cannot see someone else's PayPal account type.
     * Use this information to check whether a seller is likely to be eligible to
     * list digital downloadable items. See the eBay Web site online help for
     * current PayPal requirements for listing digital items.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PayPalAccountTypeCodeType
	 */
	public PayPalAccountTypeCodeType getPayPalAccountType() {
	    return this.payPalAccountType;
	}
	
	/**
	 * public setter
	 *
     * 
     * The user's PayPal account type. Only returned for the user identified in
     * eBayAuthToken. That is, you cannot see someone else's PayPal account type.
     * Use this information to check whether a seller is likely to be eligible to
     * list digital downloadable items. See the eBay Web site online help for
     * current PayPal requirements for listing digital items.
     * 
     *
     * @param ebay.apis.eblbasecomponents.PayPalAccountTypeCodeType
	 */
	public void setPayPalAccountType(PayPalAccountTypeCodeType payPalAccountType) {
	    this.payPalAccountType = payPalAccountType;
	}
	/**
     * public getter
     *
     * 
     * The user's PayPal account status. Only returned for the user identified in
     * eBayAuthToken. That is, you cannot see someone else's PayPal account status.
     * Use this information to check whether a seller is eligible to list digital
     * downloadable items. See the eBay Web site online
     * help for current PayPal requirements for listing digital items.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PayPalAccountStatusCodeType
	 */
	public PayPalAccountStatusCodeType getPayPalAccountStatus() {
	    return this.payPalAccountStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * The user's PayPal account status. Only returned for the user identified in
     * eBayAuthToken. That is, you cannot see someone else's PayPal account status.
     * Use this information to check whether a seller is eligible to list digital
     * downloadable items. See the eBay Web site online
     * help for current PayPal requirements for listing digital items.
     * 
     *
     * @param ebay.apis.eblbasecomponents.PayPalAccountStatusCodeType
	 */
	public void setPayPalAccountStatus(PayPalAccountStatusCodeType payPalAccountStatus) {
	    this.payPalAccountStatus = payPalAccountStatus;
	}
	/**
     * public getter
     *
     * 
     * Specifies the subscription level for a user.
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.EBaySubscriptionTypeCodeType>
	 */
	public List<EBaySubscriptionTypeCodeType> getUserSubscription() {
	    return this.userSubscription;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the subscription level for a user.
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.EBaySubscriptionTypeCodeType>
	 */
	public void setUserSubscription(List<EBaySubscriptionTypeCodeType> userSubscription) {
	    this.userSubscription = userSubscription;
	}
	/**
     * public getter
     *
     * 
     * No longer used.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getSiteVerified() {
	    return this.siteVerified;
	}
	
	/**
	 * public setter
	 *
     * 
     * No longer used.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setSiteVerified(Boolean siteVerified) {
	    this.siteVerified = siteVerified;
	}
	/**
     * public getter
     *
     * 
     * Indicates the Skype name of the user. Available if
     * the seller has a Skype account and has linked it (on the eBay site)
     * with his or her eBay account.
     * 
     *
     * @returns java.util.List<java.lang.String>
	 */
	public List<String> getSkypeID() {
	    return this.skypeID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the Skype name of the user. Available if
     * the seller has a Skype account and has linked it (on the eBay site)
     * with his or her eBay account.
     * 
     *
     * @param java.util.List<java.lang.String>
	 */
	public void setSkypeID(List<String> skypeID) {
	    this.skypeID = skypeID;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether a user has read-only access to the eBay Wiki (true)
     * or whether the user is able contribute or edit articles on the eBay Wiki
     * (false). By default, all registered eBay users have access to contribute and
     * edit articles on the eBay Wiki. All content contributed to the eBay Wiki is
     * subject to the Community Content Policy.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getEBayWikiReadOnly() {
	    return this.eBayWikiReadOnly;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether a user has read-only access to the eBay Wiki (true)
     * or whether the user is able contribute or edit articles on the eBay Wiki
     * (false). By default, all registered eBay users have access to contribute and
     * edit articles on the eBay Wiki. All content contributed to the eBay Wiki is
     * subject to the Community Content Policy.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setEBayWikiReadOnly(Boolean eBayWikiReadOnly) {
	    this.eBayWikiReadOnly = eBayWikiReadOnly;
	}
	/**
     * public getter
     *
     * 
     * TUV level is a number allocated to a user based on various characteristics
     * such as buyer, seller, new buyer, new seller, high risk, or bid limit.
     * Applies to eBay Motors Pro applications only.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getTuvLevel() {
	    return this.tuvLevel;
	}
	
	/**
	 * public setter
	 *
     * 
     * TUV level is a number allocated to a user based on various characteristics
     * such as buyer, seller, new buyer, new seller, high risk, or bid limit.
     * Applies to eBay Motors Pro applications only.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setTuvLevel(Integer tuvLevel) {
	    this.tuvLevel = tuvLevel;
	}
	/**
     * public getter
     *
     * 
     * The value added tax identifier (VATID) is applicable to the VAT-enabled
     * sites.
     * Applies to eBay Motors Pro applications only.
     * 
     *
     * @returns java.lang.String
	 */
	public String getVatid() {
	    return this.vatid;
	}
	
	/**
	 * public setter
	 *
     * 
     * The value added tax identifier (VATID) is applicable to the VAT-enabled
     * sites.
     * Applies to eBay Motors Pro applications only.
     * 
     *
     * @param java.lang.String
	 */
	public void setVatid(String vatid) {
	    this.vatid = vatid;
	}
	/**
     * public getter
     *
     * 
     * Indicates if item is listed for sale by owner (FSBO) or listed by a
     * dealer.
     * Applies to eBay Motors Pro applications only.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getMotorsDealer() {
	    return this.motorsDealer;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates if item is listed for sale by owner (FSBO) or listed by a
     * dealer.
     * Applies to eBay Motors Pro applications only.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setMotorsDealer(Boolean motorsDealer) {
	    this.motorsDealer = motorsDealer;
	}
	/**
     * public getter
     *
     * 
     * Not used by any call.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SellerPaymentMethodCodeType
	 */
	public SellerPaymentMethodCodeType getSellerPaymentMethod() {
	    return this.sellerPaymentMethod;
	}
	
	/**
	 * public setter
	 *
     * 
     * Not used by any call.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SellerPaymentMethodCodeType
	 */
	public void setSellerPaymentMethod(SellerPaymentMethodCodeType sellerPaymentMethod) {
	    this.sellerPaymentMethod = sellerPaymentMethod;
	}
	/**
     * public getter
     *
     * 
     * Contains information about the user as a bidder on a certain
     * item. Returned for GetAllBidders if IncludeBiddingSummary =
     * true is included in the request.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.BiddingSummaryType
	 */
	public BiddingSummaryType getBiddingSummary() {
	    return this.biddingSummary;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains information about the user as a bidder on a certain
     * item. Returned for GetAllBidders if IncludeBiddingSummary =
     * true is included in the request.
     * 
     *
     * @param ebay.apis.eblbasecomponents.BiddingSummaryType
	 */
	public void setBiddingSummary(BiddingSummaryType biddingSummary) {
	    this.biddingSummary = biddingSummary;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether or not the User container has been made
     * anonymous. If true, some elements in the User container have
     * either been removed, or had their values changed to remove
     * identifying characteristics. If false, all expected elements
     * are returned, and no values are changed.
     * <br><br>
     * Since a bidder's user info is anonymous, this tag is returned as false
     * only to the bidder, and to the seller of an item that the user is bidding
     * on. For all other users, this tag is returned as true.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getUserAnonymized() {
	    return this.userAnonymized;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether or not the User container has been made
     * anonymous. If true, some elements in the User container have
     * either been removed, or had their values changed to remove
     * identifying characteristics. If false, all expected elements
     * are returned, and no values are changed.
     * <br><br>
     * Since a bidder's user info is anonymous, this tag is returned as false
     * only to the bidder, and to the seller of an item that the user is bidding
     * on. For all other users, this tag is returned as true.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setUserAnonymized(Boolean userAnonymized) {
	    this.userAnonymized = userAnonymized;
	}
	/**
     * public getter
     *
     * 
     * Total count of neutral Feedback entries received by the user, including weekly repeats.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getUniqueNeutralFeedbackCount() {
	    return this.uniqueNeutralFeedbackCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Total count of neutral Feedback entries received by the user, including weekly repeats.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setUniqueNeutralFeedbackCount(Integer uniqueNeutralFeedbackCount) {
	    this.uniqueNeutralFeedbackCount = uniqueNeutralFeedbackCount;
	}
	/**
     * public getter
     *
     * 
     * Reserved for internal or future use.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getEnterpriseSeller() {
	    return this.enterpriseSeller;
	}
	
	/**
	 * public setter
	 *
     * 
     * Reserved for internal or future use.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setEnterpriseSeller(Boolean enterpriseSeller) {
	    this.enterpriseSeller = enterpriseSeller;
	}
	/**
     * public getter
     *
     * 
     * When a user has their billing option set to 'email', they can include
     * this element in a GetUser request to retrieve their own email bills.
     * 
     *
     * @returns java.lang.String
	 */
	public String getBillingEmail() {
	    return this.billingEmail;
	}
	
	/**
	 * public setter
	 *
     * 
     * When a user has their billing option set to 'email', they can include
     * this element in a GetUser request to retrieve their own email bills.
     * 
     *
     * @param java.lang.String
	 */
	public void setBillingEmail(String billingEmail) {
	    this.billingEmail = billingEmail;
	}
	/**
     * public getter
     *
     * 
     * Indicate whether user is eligible to list item or not.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getQualifiesForSelling() {
	    return this.qualifiesForSelling;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicate whether user is eligible to list item or not.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setQualifiesForSelling(Boolean qualifiesForSelling) {
	    this.qualifiesForSelling = qualifiesForSelling;
	}
	/**
     * public getter
     *
     * 
     * Contains the static email address of an eBay member, used within the "reply to"
     * email address when the eBay member sends a message.
     * (Each eBay member is assigned a static alias. The alias is
     * used within a static email address.)
     * 
     *
     * @returns java.lang.String
	 */
	public String getStaticAlias() {
	    return this.staticAlias;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains the static email address of an eBay member, used within the "reply to"
     * email address when the eBay member sends a message.
     * (Each eBay member is assigned a static alias. The alias is
     * used within a static email address.)
     * 
     *
     * @param java.lang.String
	 */
	public void setStaticAlias(String staticAlias) {
	    this.staticAlias = staticAlias;
	}

}