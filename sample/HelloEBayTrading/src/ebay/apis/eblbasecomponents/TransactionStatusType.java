// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.Date;

/**
 * 
 * Contains the order status, e.g. the buyer's online
 * payment and whether the checkout process for the order is complete.
 * 
 */
public class TransactionStatusType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element
	private PaymentStatusCodeType eBayPaymentStatus;
	
	@Element(name = "CheckoutStatus")
	private CheckoutStatusCodeType checkoutStatus;
	
	@Element(name = "LastTimeModified")
	private Date lastTimeModified;
	
	@Element(name = "PaymentMethodUsed")
	private BuyerPaymentMethodCodeType paymentMethodUsed;
	
	@Element(name = "CompleteStatus")
	private CompleteStatusCodeType completeStatus;
	
	@Element(name = "BuyerSelectedShipping")
	private Boolean buyerSelectedShipping;
	
	@Element(name = "PaymentHoldStatus")
	private PaymentHoldStatusCodeType paymentHoldStatus;
	
	@Element(name = "IntegratedMerchantCreditCardEnabled")
	private Boolean integratedMerchantCreditCardEnabled;
	
	@Element
	private EBayPaymentMismatchDetailsType eBayPaymentMismatchDetails;
	
    
	/**
     * public getter
     *
     * 
     * Indicates the success or failure of the buyer's online payment
     * for an order. Applicable for the payment method that the buyer chose
     * for the order.
     * If the payment failed, the value returned indicates the reason for the failure.
     * Output only.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PaymentStatusCodeType
	 */
	public PaymentStatusCodeType getEBayPaymentStatus() {
	    return this.eBayPaymentStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the success or failure of the buyer's online payment
     * for an order. Applicable for the payment method that the buyer chose
     * for the order.
     * If the payment failed, the value returned indicates the reason for the failure.
     * Output only.
     * 
     *
     * @param ebay.apis.eblbasecomponents.PaymentStatusCodeType
	 */
	public void setEBayPaymentStatus(PaymentStatusCodeType eBayPaymentStatus) {
	    this.eBayPaymentStatus = eBayPaymentStatus;
	}
	/**
     * public getter
     *
     * 
     * Indicates the current status of the checkout flow for the order.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.CheckoutStatusCodeType
	 */
	public CheckoutStatusCodeType getCheckoutStatus() {
	    return this.checkoutStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the current status of the checkout flow for the order.
     * 
     *
     * @param ebay.apis.eblbasecomponents.CheckoutStatusCodeType
	 */
	public void setCheckoutStatus(CheckoutStatusCodeType checkoutStatus) {
	    this.checkoutStatus = checkoutStatus;
	}
	/**
     * public getter
     *
     * 
     * Indicates date and time an order's status was last updated (in GMT).
     * 
     *
     * @returns java.util.Date
	 */
	public Date getLastTimeModified() {
	    return this.lastTimeModified;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates date and time an order's status was last updated (in GMT).
     * 
     *
     * @param java.util.Date
	 */
	public void setLastTimeModified(Date lastTimeModified) {
	    this.lastTimeModified = lastTimeModified;
	}
	/**
     * public getter
     *
     * 
     * The payment method that the buyer selected to pay for the order. If checkout is
     * not yet complete, PaymentMethodUsed is set to whatever the buyer selected as his
     * or her preference on the Review Your Purchase page.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.BuyerPaymentMethodCodeType
	 */
	public BuyerPaymentMethodCodeType getPaymentMethodUsed() {
	    return this.paymentMethodUsed;
	}
	
	/**
	 * public setter
	 *
     * 
     * The payment method that the buyer selected to pay for the order. If checkout is
     * not yet complete, PaymentMethodUsed is set to whatever the buyer selected as his
     * or her preference on the Review Your Purchase page.
     * 
     *
     * @param ebay.apis.eblbasecomponents.BuyerPaymentMethodCodeType
	 */
	public void setPaymentMethodUsed(BuyerPaymentMethodCodeType paymentMethodUsed) {
	    this.paymentMethodUsed = paymentMethodUsed;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether checkout is complete, incomplete, or pending for an order.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.CompleteStatusCodeType
	 */
	public CompleteStatusCodeType getCompleteStatus() {
	    return this.completeStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether checkout is complete, incomplete, or pending for an order.
     * 
     *
     * @param ebay.apis.eblbasecomponents.CompleteStatusCodeType
	 */
	public void setCompleteStatus(CompleteStatusCodeType completeStatus) {
	    this.completeStatus = completeStatus;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the buyer has selected shipping details
     * during checkout. False indicates that the shipping service was
     * selected by eBay for the buyer. For example, if the buyer has
     * not yet completed the Review Your Purchase page, he has not
     * picked a shipping service. If it is false, the application
     * should ignore ShippingServiceCost and ShippingServiceSelected
     * (items whose values are defaulted by eBay).
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getBuyerSelectedShipping() {
	    return this.buyerSelectedShipping;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the buyer has selected shipping details
     * during checkout. False indicates that the shipping service was
     * selected by eBay for the buyer. For example, if the buyer has
     * not yet completed the Review Your Purchase page, he has not
     * picked a shipping service. If it is false, the application
     * should ignore ShippingServiceCost and ShippingServiceSelected
     * (items whose values are defaulted by eBay).
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setBuyerSelectedShipping(Boolean buyerSelectedShipping) {
	    this.buyerSelectedShipping = buyerSelectedShipping;
	}
	/**
     * public getter
     *
     * 
     * Contains the status of a PayPal payment hold on the item.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PaymentHoldStatusCodeType
	 */
	public PaymentHoldStatusCodeType getPaymentHoldStatus() {
	    return this.paymentHoldStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains the status of a PayPal payment hold on the item.
     * 
     *
     * @param ebay.apis.eblbasecomponents.PaymentHoldStatusCodeType
	 */
	public void setPaymentHoldStatus(PaymentHoldStatusCodeType paymentHoldStatus) {
	    this.paymentHoldStatus = paymentHoldStatus;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the item can be paid for through a payment gateway account.
     * If IntegratedMerchantCreditCardEnabled is true, then integrated merchant
     * credit card (IMCC) is enabled for credit cards because the seller
     * has a payment gateway (Payflow) account.
     * Therefore, if IntegratedMerchantCreditCardEnabled is true, and AmEx, Discover, or
     * VisaMC is returned for an item, then on checkout, an online credit-card payment
     * is processed through a payment gateway account.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getIntegratedMerchantCreditCardEnabled() {
	    return this.integratedMerchantCreditCardEnabled;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the item can be paid for through a payment gateway account.
     * If IntegratedMerchantCreditCardEnabled is true, then integrated merchant
     * credit card (IMCC) is enabled for credit cards because the seller
     * has a payment gateway (Payflow) account.
     * Therefore, if IntegratedMerchantCreditCardEnabled is true, and AmEx, Discover, or
     * VisaMC is returned for an item, then on checkout, an online credit-card payment
     * is processed through a payment gateway account.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setIntegratedMerchantCreditCardEnabled(Boolean integratedMerchantCreditCardEnabled) {
	    this.integratedMerchantCreditCardEnabled = integratedMerchantCreditCardEnabled;
	}
	/**
     * public getter
     *
     * 
     * This container is returned when a buyer's payment does not match the total cost of an
     * order going through the new eBay payment process. This container is only applicable for
     * German and Austrian orders going through the new eBay payment process, and when the 
     * buyer has selected EFT as the payment method.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @returns ebay.apis.eblbasecomponents.EBayPaymentMismatchDetailsType
	 */
	public EBayPaymentMismatchDetailsType getEBayPaymentMismatchDetails() {
	    return this.eBayPaymentMismatchDetails;
	}
	
	/**
	 * public setter
	 *
     * 
     * This container is returned when a buyer's payment does not match the total cost of an
     * order going through the new eBay payment process. This container is only applicable for
     * German and Austrian orders going through the new eBay payment process, and when the 
     * buyer has selected EFT as the payment method.
     * <br>
     * <br>
     * <span class="tablenote"><b>Note:</b>
     * The introduction of the new eBay payment process for the entire German and
     * Austrian eBay marketplace has been delayed until further notice.<br>
     * 
     *
     * @param ebay.apis.eblbasecomponents.EBayPaymentMismatchDetailsType
	 */
	public void setEBayPaymentMismatchDetails(EBayPaymentMismatchDetailsType eBayPaymentMismatchDetails) {
	    this.eBayPaymentMismatchDetails = eBayPaymentMismatchDetails;
	}

}