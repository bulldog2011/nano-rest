// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * 
 * Contains the data for an eBay user's address. This is the base type for a
 * number of user addresses, including seller payment address, buyer
 * shipping address and buyer and seller registration address.
 * 
 */
public class AddressType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "Name")
	private String name;
	
	@Element(name = "Street")
	private String street;
	
	@Element(name = "Street1")
	private String street1;
	
	@Element(name = "Street2")
	private String street2;
	
	@Element(name = "CityName")
	private String cityName;
	
	@Element(name = "County")
	private String county;
	
	@Element(name = "StateOrProvince")
	private String stateOrProvince;
	
	@Element(name = "Country")
	private CountryCodeType country;
	
	@Element(name = "CountryName")
	private String countryName;
	
	@Element(name = "Phone")
	private String phone;
	
	@Element(name = "PhoneCountryCode")
	private CountryCodeType phoneCountryCode;
	
	@Element(name = "PhoneCountryPrefix")
	private String phoneCountryPrefix;
	
	@Element(name = "PhoneAreaOrCityCode")
	private String phoneAreaOrCityCode;
	
	@Element(name = "PhoneLocalNumber")
	private String phoneLocalNumber;
	
	@Element(name = "Phone2CountryCode")
	private CountryCodeType phone2CountryCode;
	
	@Element(name = "Phone2CountryPrefix")
	private String phone2CountryPrefix;
	
	@Element(name = "Phone2AreaOrCityCode")
	private String phone2AreaOrCityCode;
	
	@Element(name = "Phone2LocalNumber")
	private String phone2LocalNumber;
	
	@Element(name = "PostalCode")
	private String postalCode;
	
	@Element(name = "AddressID")
	private String addressID;
	
	@Element(name = "AddressOwner")
	private AddressOwnerCodeType addressOwner;
	
	@Element(name = "AddressStatus")
	private AddressStatusCodeType addressStatus;
	
	@Element(name = "ExternalAddressID")
	private String externalAddressID;
	
	@Element(name = "InternationalName")
	private String internationalName;
	
	@Element(name = "InternationalStateAndCity")
	private String internationalStateAndCity;
	
	@Element(name = "InternationalStreet")
	private String internationalStreet;
	
	@Element(name = "CompanyName")
	private String companyName;
	
	@Element(name = "AddressRecordType")
	private AddressRecordTypeCodeType addressRecordType;
	
	@Element(name = "FirstName")
	private String firstName;
	
	@Element(name = "LastName")
	private String lastName;
	
	@Element(name = "Phone2")
	private String phone2;
	
	@Element(name = "AddressUsage")
	private AddressUsageCodeType addressUsage;
	
	@Element(name = "ReferenceID")
	private String referenceID;
	
    
	/**
     * public getter
     *
     * 
     * User's name for the address.
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @returns java.lang.String
	 */
	public String getName() {
	    return this.name;
	}
	
	/**
	 * public setter
	 *
     * 
     * User's name for the address.
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @param java.lang.String
	 */
	public void setName(String name) {
	    this.name = name;
	}
	/**
     * public getter
     *
     * 
     * A concatenation of Street1 and Street2, primarily for RegistrationAddress.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.String
	 */
	public String getStreet() {
	    return this.street;
	}
	
	/**
	 * public setter
	 *
     * 
     * A concatenation of Street1 and Street2, primarily for RegistrationAddress.
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.String
	 */
	public void setStreet(String street) {
	    this.street = street;
	}
	/**
     * public getter
     *
     * 
     * Line 1 of the user's street address.
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @returns java.lang.String
	 */
	public String getStreet1() {
	    return this.street1;
	}
	
	/**
	 * public setter
	 *
     * 
     * Line 1 of the user's street address.
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @param java.lang.String
	 */
	public void setStreet1(String street1) {
	    this.street1 = street1;
	}
	/**
     * public getter
     *
     * 
     * Line 2 of the user's address (such as an apartment number).
     * Returned if the user specified a second street value for their address.
     * Also applicable to Half.com (for GetOrders).<br>
     * In case of Item.SellerContactDetails, Street2 can be used to provide City, Address, State, and Zip code (if applicable).
     * 
     *
     * @returns java.lang.String
	 */
	public String getStreet2() {
	    return this.street2;
	}
	
	/**
	 * public setter
	 *
     * 
     * Line 2 of the user's address (such as an apartment number).
     * Returned if the user specified a second street value for their address.
     * Also applicable to Half.com (for GetOrders).<br>
     * In case of Item.SellerContactDetails, Street2 can be used to provide City, Address, State, and Zip code (if applicable).
     * 
     *
     * @param java.lang.String
	 */
	public void setStreet2(String street2) {
	    this.street2 = street2;
	}
	/**
     * public getter
     *
     * 
     * The name of the user's city.
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @returns java.lang.String
	 */
	public String getCityName() {
	    return this.cityName;
	}
	
	/**
	 * public setter
	 *
     * 
     * The name of the user's city.
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @param java.lang.String
	 */
	public void setCityName(String cityName) {
	    this.cityName = cityName;
	}
	/**
     * public getter
     *
     * 
     * County information for the user.
     * This field applies to Classified Ad format listings and to the UK only.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCounty() {
	    return this.county;
	}
	
	/**
	 * public setter
	 *
     * 
     * County information for the user.
     * This field applies to Classified Ad format listings and to the UK only.
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.String
	 */
	public void setCounty(String county) {
	    this.county = county;
	}
	/**
     * public getter
     *
     * 
     * The region of the user's address.
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @returns java.lang.String
	 */
	public String getStateOrProvince() {
	    return this.stateOrProvince;
	}
	
	/**
	 * public setter
	 *
     * 
     * The region of the user's address.
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @param java.lang.String
	 */
	public void setStateOrProvince(String stateOrProvince) {
	    this.stateOrProvince = stateOrProvince;
	}
	/**
     * public getter
     *
     * 
     * The two-digit code representing the country of the user.<br>
     * <br>
     * If not provided as input for GetCart or SetCart, eBay uses the country associated
     * with the SiteID in effect when the call is made.<br>
     * <br>
     * For a Global Shipping Program order, GetSellerList returns the country code of the buyer, not the international shipping provider.<br>
     * <br>
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.CountryCodeType
	 */
	public CountryCodeType getCountry() {
	    return this.country;
	}
	
	/**
	 * public setter
	 *
     * 
     * The two-digit code representing the country of the user.<br>
     * <br>
     * If not provided as input for GetCart or SetCart, eBay uses the country associated
     * with the SiteID in effect when the call is made.<br>
     * <br>
     * For a Global Shipping Program order, GetSellerList returns the country code of the buyer, not the international shipping provider.<br>
     * <br>
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @param ebay.apis.eblbasecomponents.CountryCodeType
	 */
	public void setCountry(CountryCodeType country) {
	    this.country = country;
	}
	/**
     * public getter
     *
     * 
     * The name of the user's country.
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @returns java.lang.String
	 */
	public String getCountryName() {
	    return this.countryName;
	}
	
	/**
	 * public setter
	 *
     * 
     * The name of the user's country.
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @param java.lang.String
	 */
	public void setCountryName(String countryName) {
	    this.countryName = countryName;
	}
	/**
     * public getter
     *
     * 
     * User's primary phone number. This may return a value of
     * "Invalid Request" if you are not authorized to see the
     * user's phone number.
     * <br/><br/>
     * In the US, the area code (3 digits), the prefix (3 digits), the line number (4
     * digits), and phone extension (if specified by the user) are returned in this field.
     * The extension can be one or more digits. Non-breaking spaces are used as delimiters
     * between these phone number components.
     * <br/><br/>
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @returns java.lang.String
	 */
	public String getPhone() {
	    return this.phone;
	}
	
	/**
	 * public setter
	 *
     * 
     * User's primary phone number. This may return a value of
     * "Invalid Request" if you are not authorized to see the
     * user's phone number.
     * <br/><br/>
     * In the US, the area code (3 digits), the prefix (3 digits), the line number (4
     * digits), and phone extension (if specified by the user) are returned in this field.
     * The extension can be one or more digits. Non-breaking spaces are used as delimiters
     * between these phone number components.
     * <br/><br/>
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @param java.lang.String
	 */
	public void setPhone(String phone) {
	    this.phone = phone;
	}
	/**
     * public getter
     *
     * 
     * Standard ISO code for the country of the user's primay telephone phone number.
     * For Classifed Ad format listings, this code is used to look up the country's
     * international calling prefix. Both the ISO code and country phone prefix are
     * stored with listings of this type.
     * This field applies to Classified Ad format listings only.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.CountryCodeType
	 */
	public CountryCodeType getPhoneCountryCode() {
	    return this.phoneCountryCode;
	}
	
	/**
	 * public setter
	 *
     * 
     * Standard ISO code for the country of the user's primay telephone phone number.
     * For Classifed Ad format listings, this code is used to look up the country's
     * international calling prefix. Both the ISO code and country phone prefix are
     * stored with listings of this type.
     * This field applies to Classified Ad format listings only.
     * 
     *
     * @param ebay.apis.eblbasecomponents.CountryCodeType
	 */
	public void setPhoneCountryCode(CountryCodeType phoneCountryCode) {
	    this.phoneCountryCode = phoneCountryCode;
	}
	/**
     * public getter
     *
     * 
     * Country Prefix of the secondary phone number. This value is derived from
     * inputs supplied for PhoneCountryCode.
     * This field applies to Classified Ad format listings only.
     * 
     *
     * @returns java.lang.String
	 */
	public String getPhoneCountryPrefix() {
	    return this.phoneCountryPrefix;
	}
	
	/**
	 * public setter
	 *
     * 
     * Country Prefix of the secondary phone number. This value is derived from
     * inputs supplied for PhoneCountryCode.
     * This field applies to Classified Ad format listings only.
     * 
     *
     * @param java.lang.String
	 */
	public void setPhoneCountryPrefix(String phoneCountryPrefix) {
	    this.phoneCountryPrefix = phoneCountryPrefix;
	}
	/**
     * public getter
     *
     * 
     * Area or City Code of a user's primary phone number.
     * This field applies to Classified Ad format listings only.
     * 
     *
     * @returns java.lang.String
	 */
	public String getPhoneAreaOrCityCode() {
	    return this.phoneAreaOrCityCode;
	}
	
	/**
	 * public setter
	 *
     * 
     * Area or City Code of a user's primary phone number.
     * This field applies to Classified Ad format listings only.
     * 
     *
     * @param java.lang.String
	 */
	public void setPhoneAreaOrCityCode(String phoneAreaOrCityCode) {
	    this.phoneAreaOrCityCode = phoneAreaOrCityCode;
	}
	/**
     * public getter
     *
     * 
     * The local number portion of the user's primary phone number.
     * This field applies to Classified Ad format listings only.
     * <br>
     * <b>Note:</b> The full primary phone number is constructed by
     * combining PhoneLocalNumber with PhoneAreaOrCityCode and PhoneCountryPrefix.
     * Starting with API release 497, the full phone number can be entered in
     * PhoneLocalNumber. Refer to the release notes for additional information.
     * 
     *
     * @returns java.lang.String
	 */
	public String getPhoneLocalNumber() {
	    return this.phoneLocalNumber;
	}
	
	/**
	 * public setter
	 *
     * 
     * The local number portion of the user's primary phone number.
     * This field applies to Classified Ad format listings only.
     * <br>
     * <b>Note:</b> The full primary phone number is constructed by
     * combining PhoneLocalNumber with PhoneAreaOrCityCode and PhoneCountryPrefix.
     * Starting with API release 497, the full phone number can be entered in
     * PhoneLocalNumber. Refer to the release notes for additional information.
     * 
     *
     * @param java.lang.String
	 */
	public void setPhoneLocalNumber(String phoneLocalNumber) {
	    this.phoneLocalNumber = phoneLocalNumber;
	}
	/**
     * public getter
     *
     * 
     * Standard ISO code for the country of a user's secondary telephone phone
     * number. For Classifed Ad format listings, this code is used to look up the
     * country's international calling prefix. Both the ISO code and country phone
     * prefix are stored with listings of this type.
     * This field applies to Classified Ad format listings only.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.CountryCodeType
	 */
	public CountryCodeType getPhone2CountryCode() {
	    return this.phone2CountryCode;
	}
	
	/**
	 * public setter
	 *
     * 
     * Standard ISO code for the country of a user's secondary telephone phone
     * number. For Classifed Ad format listings, this code is used to look up the
     * country's international calling prefix. Both the ISO code and country phone
     * prefix are stored with listings of this type.
     * This field applies to Classified Ad format listings only.
     * 
     *
     * @param ebay.apis.eblbasecomponents.CountryCodeType
	 */
	public void setPhone2CountryCode(CountryCodeType phone2CountryCode) {
	    this.phone2CountryCode = phone2CountryCode;
	}
	/**
     * public getter
     *
     * 
     * Country prefix of a user's secondary phone number. This value is derived from
     * inputs supplied for Phone2CountryCode.
     * This field applies to Classified Ad format listings only.
     * 
     *
     * @returns java.lang.String
	 */
	public String getPhone2CountryPrefix() {
	    return this.phone2CountryPrefix;
	}
	
	/**
	 * public setter
	 *
     * 
     * Country prefix of a user's secondary phone number. This value is derived from
     * inputs supplied for Phone2CountryCode.
     * This field applies to Classified Ad format listings only.
     * 
     *
     * @param java.lang.String
	 */
	public void setPhone2CountryPrefix(String phone2CountryPrefix) {
	    this.phone2CountryPrefix = phone2CountryPrefix;
	}
	/**
     * public getter
     *
     * 
     * Area or City Code of a user's secondary phone number.
     * This field applies to Classified Ad format listings only.
     * 
     *
     * @returns java.lang.String
	 */
	public String getPhone2AreaOrCityCode() {
	    return this.phone2AreaOrCityCode;
	}
	
	/**
	 * public setter
	 *
     * 
     * Area or City Code of a user's secondary phone number.
     * This field applies to Classified Ad format listings only.
     * 
     *
     * @param java.lang.String
	 */
	public void setPhone2AreaOrCityCode(String phone2AreaOrCityCode) {
	    this.phone2AreaOrCityCode = phone2AreaOrCityCode;
	}
	/**
     * public getter
     *
     * 
     * The local number portion of the user's secondary phone number.
     * This field applies to Classified Ad format listings only.
     * <br>
     * <b>Note:</b> The full secondary phone number is constructed by
     * combining Phone2LocalNumber with Phone2AreaOrCityCode and Phone2CountryPrefix.
     * Starting with API release 497, the full phone number can be entered in
     * Phone2LocalNumber. Refer to the release notes for additional information.
     * 
     *
     * @returns java.lang.String
	 */
	public String getPhone2LocalNumber() {
	    return this.phone2LocalNumber;
	}
	
	/**
	 * public setter
	 *
     * 
     * The local number portion of the user's secondary phone number.
     * This field applies to Classified Ad format listings only.
     * <br>
     * <b>Note:</b> The full secondary phone number is constructed by
     * combining Phone2LocalNumber with Phone2AreaOrCityCode and Phone2CountryPrefix.
     * Starting with API release 497, the full phone number can be entered in
     * Phone2LocalNumber. Refer to the release notes for additional information.
     * 
     *
     * @param java.lang.String
	 */
	public void setPhone2LocalNumber(String phone2LocalNumber) {
	    this.phone2LocalNumber = phone2LocalNumber;
	}
	/**
     * public getter
     *
     * 
     * User's postal code.<br>
     * <br>
     * If not provided as input for GetCart or SetCart, eBay uses the country associated
     * with the SiteID in effect when the call is made.<br>
     * <br>
     * For a Global Shipping Program order, GetSellerList and GetMyeBaySelling return the postal code of the buyer, not that of the international shipping provider.<br>
     * <br>
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @returns java.lang.String
	 */
	public String getPostalCode() {
	    return this.postalCode;
	}
	
	/**
	 * public setter
	 *
     * 
     * User's postal code.<br>
     * <br>
     * If not provided as input for GetCart or SetCart, eBay uses the country associated
     * with the SiteID in effect when the call is made.<br>
     * <br>
     * For a Global Shipping Program order, GetSellerList and GetMyeBaySelling return the postal code of the buyer, not that of the international shipping provider.<br>
     * <br>
     * Also applicable to Half.com (for GetOrders).
     * 
     *
     * @param java.lang.String
	 */
	public void setPostalCode(String postalCode) {
	    this.postalCode = postalCode;
	}
	/**
     * public getter
     *
     * 
     * Unique ID for a user's address in the eBay database.
     * This value can help prevent the need to
     * store an address multiple times across multiple orders.
     * The ID changes if a user changes their address.
     * 
     *
     * @returns java.lang.String
	 */
	public String getAddressID() {
	    return this.addressID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Unique ID for a user's address in the eBay database.
     * This value can help prevent the need to
     * store an address multiple times across multiple orders.
     * The ID changes if a user changes their address.
     * 
     *
     * @param java.lang.String
	 */
	public void setAddressID(String addressID) {
	    this.addressID = addressID;
	}
	/**
     * public getter
     *
     * 
     * The realm to which the address belongs (e.g. eBay vs PayPal).
     * For GetOrders, applies only to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AddressOwnerCodeType
	 */
	public AddressOwnerCodeType getAddressOwner() {
	    return this.addressOwner;
	}
	
	/**
	 * public setter
	 *
     * 
     * The realm to which the address belongs (e.g. eBay vs PayPal).
     * For GetOrders, applies only to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AddressOwnerCodeType
	 */
	public void setAddressOwner(AddressOwnerCodeType addressOwner) {
	    this.addressOwner = addressOwner;
	}
	/**
     * public getter
     *
     * 
     * PayPal address status.
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AddressStatusCodeType
	 */
	public AddressStatusCodeType getAddressStatus() {
	    return this.addressStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * PayPal address status.
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AddressStatusCodeType
	 */
	public void setAddressStatus(AddressStatusCodeType addressStatus) {
	    this.addressStatus = addressStatus;
	}
	/**
     * public getter
     *
     * 
     * ID assigned to the address by the address owner, e.g. by the PayPal system.
     * Currently, the ExternalAddressID only applies for a customer address in the PayPal system.
     * The ID changes if a user changes their address.
     * Also see the AddressOwner field.
     * The ExternalAddressID value also is applicable to Half.com (for GetOrders).
     * 
     *
     * @returns java.lang.String
	 */
	public String getExternalAddressID() {
	    return this.externalAddressID;
	}
	
	/**
	 * public setter
	 *
     * 
     * ID assigned to the address by the address owner, e.g. by the PayPal system.
     * Currently, the ExternalAddressID only applies for a customer address in the PayPal system.
     * The ID changes if a user changes their address.
     * Also see the AddressOwner field.
     * The ExternalAddressID value also is applicable to Half.com (for GetOrders).
     * 
     *
     * @param java.lang.String
	 */
	public void setExternalAddressID(String externalAddressID) {
	    this.externalAddressID = externalAddressID;
	}
	/**
     * public getter
     *
     * 
     * Seller's international name that is associated with the payment address.
     * Only applicable to SellerPaymentAddress.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.String
	 */
	public String getInternationalName() {
	    return this.internationalName;
	}
	
	/**
	 * public setter
	 *
     * 
     * Seller's international name that is associated with the payment address.
     * Only applicable to SellerPaymentAddress.
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.String
	 */
	public void setInternationalName(String internationalName) {
	    this.internationalName = internationalName;
	}
	/**
     * public getter
     *
     * 
     * International state and city for the seller's payment address.
     * Only applicable to SellerPaymentAddress.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.String
	 */
	public String getInternationalStateAndCity() {
	    return this.internationalStateAndCity;
	}
	
	/**
	 * public setter
	 *
     * 
     * International state and city for the seller's payment address.
     * Only applicable to SellerPaymentAddress.
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.String
	 */
	public void setInternationalStateAndCity(String internationalStateAndCity) {
	    this.internationalStateAndCity = internationalStateAndCity;
	}
	/**
     * public getter
     *
     * 
     * Seller's international street address that is associated with the payment address.
     * Only applicable to SellerPaymentAddress.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.String
	 */
	public String getInternationalStreet() {
	    return this.internationalStreet;
	}
	
	/**
	 * public setter
	 *
     * 
     * Seller's international street address that is associated with the payment address.
     * Only applicable to SellerPaymentAddress.
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.String
	 */
	public void setInternationalStreet(String internationalStreet) {
	    this.internationalStreet = internationalStreet;
	}
	/**
     * public getter
     *
     * 
     * User's company name. Only returned if available.
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCompanyName() {
	    return this.companyName;
	}
	
	/**
	 * public setter
	 *
     * 
     * User's company name. Only returned if available.
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.String
	 */
	public void setCompanyName(String companyName) {
	    this.companyName = companyName;
	}
	/**
     * public getter
     *
     * 
     * Indicates the nature of the address (e.g., residential or business).
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AddressRecordTypeCodeType
	 */
	public AddressRecordTypeCodeType getAddressRecordType() {
	    return this.addressRecordType;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the nature of the address (e.g., residential or business).
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AddressRecordTypeCodeType
	 */
	public void setAddressRecordType(AddressRecordTypeCodeType addressRecordType) {
	    this.addressRecordType = addressRecordType;
	}
	/**
     * public getter
     *
     * 
     * Displays the first name of the seller (in a business card
     * format) if the seller's SellerBusinessCodeType is set to
     * 'Commercial'.
     * 
     *
     * @returns java.lang.String
	 */
	public String getFirstName() {
	    return this.firstName;
	}
	
	/**
	 * public setter
	 *
     * 
     * Displays the first name of the seller (in a business card
     * format) if the seller's SellerBusinessCodeType is set to
     * 'Commercial'.
     * 
     *
     * @param java.lang.String
	 */
	public void setFirstName(String firstName) {
	    this.firstName = firstName;
	}
	/**
     * public getter
     *
     * 
     * Displays the last name of the seller (in a business card
     * format) if the seller's SellerBusinessCodeType is set to
     * 'Commercial'.
     * 
     *
     * @returns java.lang.String
	 */
	public String getLastName() {
	    return this.lastName;
	}
	
	/**
	 * public setter
	 *
     * 
     * Displays the last name of the seller (in a business card
     * format) if the seller's SellerBusinessCodeType is set to
     * 'Commercial'.
     * 
     *
     * @param java.lang.String
	 */
	public void setLastName(String lastName) {
	    this.lastName = lastName;
	}
	/**
     * public getter
     *
     * 
     * Secondary Phone number of the lead. Not returned if information is unavailable.
     * 
     *
     * @returns java.lang.String
	 */
	public String getPhone2() {
	    return this.phone2;
	}
	
	/**
	 * public setter
	 *
     * 
     * Secondary Phone number of the lead. Not returned if information is unavailable.
     * 
     *
     * @param java.lang.String
	 */
	public void setPhone2(String phone2) {
	    this.phone2 = phone2;
	}
	/**
     * public getter
     *
     * 
     * This tag tells whether current address is a default shipping address or one of the shipping addresses in address book.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AddressUsageCodeType
	 */
	public AddressUsageCodeType getAddressUsage() {
	    return this.addressUsage;
	}
	
	/**
	 * public setter
	 *
     * 
     * This tag tells whether current address is a default shipping address or one of the shipping addresses in address book.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AddressUsageCodeType
	 */
	public void setAddressUsage(AddressUsageCodeType addressUsage) {
	    this.addressUsage = addressUsage;
	}
	/**
     * public getter
     *
     * 
     * Uniquely identifies an order shipped using the Global Shipping Program. This value is generated by eBay when the order is completed. The international shipping provider uses the ReferenceID as the primary reference when processing the shipment. Sellers must include this value on the package immediately above the street address of the international shipping provider.
     * <br/><br/>
     * Example: "Reference #1234567890123456"
     * 
     *
     * @returns java.lang.String
	 */
	public String getReferenceID() {
	    return this.referenceID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Uniquely identifies an order shipped using the Global Shipping Program. This value is generated by eBay when the order is completed. The international shipping provider uses the ReferenceID as the primary reference when processing the shipment. Sellers must include this value on the package immediately above the street address of the international shipping provider.
     * <br/><br/>
     * Example: "Reference #1234567890123456"
     * 
     *
     * @param java.lang.String
	 */
	public void setReferenceID(String referenceID) {
	    this.referenceID = referenceID;
	}

}