// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

/**
 * 
 * Enumerated type that indicates the next possible action that a DE/AT seller can take to
 * expedite the seller payout for an order subject to the new eBay payment process. 
 * 
 */
public enum RequiredSellerActionCodeType {

    /**
     * 
   * This value indicates that there is an open eBay Buyer Protection case involving
   * the DE/AT seller and the item. The seller must address and get the case resolved before
   * the funds can be scheduled for release to the seller's account. 
   * See the <a href="http://developer.ebay.com/DevZone/resolution-case-management/Concepts/ResoCaseAPIGuide.html">Resolution Case Management API User Guide</a> 
   * for information about retrieving and managing eBay Buyer Protection cases.
   * 
     */
    RESOLVEE_BP_CASE("ResolveeBPCase"),
  

    /**
     * 
   * This value indicates that the DE/AT seller must mark the order line item as shipped.
   * The seller can use the CompleteSale call to perform this action.
   * 
     */
    MARK_AS_SHIPPED("MarkAsShipped"),
  

    /**
     * 
   * This value indicates that the DE/AT seller should contact eBay Customer Support to discover 
   * the next required action.
   * 
     */
    CONTACTE_BAY_CS("ContacteBayCS"),
  

    /**
     * 
   * This value indicates that the DE/AT seller must resolve PayPal Buyer Protection case.
   * 
     */
    RESOLVE_PPP_ICASE("ResolvePPPIcase"),
  

    /**
     * 
   * This value indicates that the DE/AT seller must set up a valid payout account in order 
   * to receive seller payouts.
   * 
     */
    SETUP_PAYOUT_METHOD("SetupPayoutMethod"),
  

    /**
     * 
   * This value indicates that the DE/AT seller must update to a valid payout account in order 
   * to receive seller payouts.
   * 
     */
    UPDATE_PAYOUT_METHOD("UpdatePayoutMethod"),
  

    /**
     * 
   * This value indicates that there is no action required from the DE/AT seller 
   * to expedite seller payouts.
   * 
     */
    NONE("None"),
  

    /**
     * 
   * Reserved for internal or future use.
   * 
     */
    CUSTOM_CODE("CustomCode");
  
  
    private final String value;
  
    RequiredSellerActionCodeType(String v) {
        value = v;
    }
    
    public String value() {
        return value;
    }
    
    public static RequiredSellerActionCodeType fromValue(String v) {
        if (v != null) {
            for (RequiredSellerActionCodeType c: RequiredSellerActionCodeType.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
        }
        throw new IllegalArgumentException(v);
    }
}