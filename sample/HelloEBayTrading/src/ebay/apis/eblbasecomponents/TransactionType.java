// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;
import java.math.BigDecimal;
import java.util.Date;

/**
 * 
 * This type defines the Transaction container, which consists of detailed information
 * about a single line item in an order. The eBay system creates an order line item
 * when a buyer has committed to make a purchase in an auction or fixed-price listing.
 * A multiple-quantity, fixed-priced listing can spawn one or more order line items.
 * Auction listings and single-quantity, fixed-price listings can only spawn one order
 * line item.
 * 
 *       
 * <br>
 * 
 */
public class TransactionType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "AmountPaid")
	private AmountType amountPaid;
	
	@Element(name = "AdjustmentAmount")
	private AmountType adjustmentAmount;
	
	@Element(name = "ConvertedAdjustmentAmount")
	private AmountType convertedAdjustmentAmount;
	
	@Element(name = "Buyer")
	private UserType buyer;
	
	@Element(name = "ShippingDetails")
	private ShippingDetailsType shippingDetails;
	
	@Element(name = "ConvertedAmountPaid")
	private AmountType convertedAmountPaid;
	
	@Element(name = "ConvertedTransactionPrice")
	private AmountType convertedTransactionPrice;
	
	@Element(name = "CreatedDate")
	private Date createdDate;
	
	@Element(name = "DepositType")
	private DepositTypeCodeType depositType;
	
	@Element(name = "Item")
	private ItemType item;
	
	@Element(name = "QuantityPurchased")
	private Integer quantityPurchased;
	
	@Element(name = "Status")
	private TransactionStatusType status;
	
	@Element(name = "TransactionID")
	private String transactionID;
	
	@Element(name = "TransactionPrice")
	private AmountType transactionPrice;
	
	@Element(name = "BestOfferSale")
	private Boolean bestOfferSale;
	
	@Element(name = "VATPercent")
	private BigDecimal vatPercent;
	
	@Element(name = "ExternalTransaction")
	private List<ExternalTransactionType> externalTransaction;
	
	@Element(name = "SellingManagerProductDetails")
	private SellingManagerProductDetailsType sellingManagerProductDetails;
	
	@Element(name = "ShippingServiceSelected")
	private ShippingServiceOptionsType shippingServiceSelected;
	
	@Element(name = "BuyerMessage")
	private String buyerMessage;
	
	@Element(name = "DutchAuctionBid")
	private AmountType dutchAuctionBid;
	
	@Element(name = "BuyerPaidStatus")
	private PaidStatusCodeType buyerPaidStatus;
	
	@Element(name = "SellerPaidStatus")
	private PaidStatusCodeType sellerPaidStatus;
	
	@Element(name = "PaidTime")
	private Date paidTime;
	
	@Element(name = "ShippedTime")
	private Date shippedTime;
	
	@Element(name = "TotalPrice")
	private AmountType totalPrice;
	
	@Element(name = "FeedbackLeft")
	private FeedbackInfoType feedbackLeft;
	
	@Element(name = "FeedbackReceived")
	private FeedbackInfoType feedbackReceived;
	
	@Element(name = "ContainingOrder")
	private OrderType containingOrder;
	
	@Element(name = "FinalValueFee")
	private AmountType finalValueFee;
	
	@Element(name = "ListingCheckoutRedirectPreference")
	private ListingCheckoutRedirectPreferenceType listingCheckoutRedirectPreference;
	
	@Element(name = "RefundArray")
	private RefundArrayType refundArray;
	
	@Element(name = "TransactionSiteID")
	private SiteCodeType transactionSiteID;
	
	@Element(name = "Platform")
	private TransactionPlatformCodeType platform;
	
	@Element(name = "CartID")
	private String cartID;
	
	@Element(name = "SellerContactBuyerByEmail")
	private Boolean sellerContactBuyerByEmail;
	
	@Element(name = "PayPalEmailAddress")
	private String payPalEmailAddress;
	
	@Element(name = "PaisaPayID")
	private String paisaPayID;
	
	@Element(name = "BuyerGuaranteePrice")
	private AmountType buyerGuaranteePrice;
	
	@Element(name = "Variation")
	private VariationType variation;
	
	@Element(name = "BuyerCheckoutMessage")
	private String buyerCheckoutMessage;
	
	@Element(name = "TotalTransactionPrice")
	private AmountType totalTransactionPrice;
	
	@Element(name = "Taxes")
	private TaxesType taxes;
	
	@Element(name = "BundlePurchase")
	private Boolean bundlePurchase;
	
	@Element(name = "ActualShippingCost")
	private AmountType actualShippingCost;
	
	@Element(name = "ActualHandlingCost")
	private AmountType actualHandlingCost;
	
	@Element(name = "OrderLineItemID")
	private String orderLineItemID;
	
	@Element(name = "PaymentHoldDetails")
	private PaymentHoldDetailType paymentHoldDetails;
	
	@Element(name = "SellerDiscounts")
	private SellerDiscountsType sellerDiscounts;
	
	@Element(name = "RefundAmount")
	private AmountType refundAmount;
	
	@Element(name = "RefundStatus")
	private String refundStatus;
	
	@Element(name = "CodiceFiscale")
	private String codiceFiscale;
	
	@Element(name = "IsMultiLegShipping")
	private Boolean isMultiLegShipping;
	
	@Element(name = "MultiLegShippingDetails")
	private MultiLegShippingDetailsType multiLegShippingDetails;
	
	@Element(name = "InvoiceSentTime")
	private Date invoiceSentTime;
	
	@Element(name = "UnpaidItem")
	private UnpaidItemType unpaidItem;
	
	@Element(name = "IntangibleItem")
	private Boolean intangibleItem;
	
    
	/**
     * public getter
     *
     * 
     * This value indicates the total amount of the line item. This amount includes
     * the sale price, shipping and handling charges, shipping
     * insurance (if offered and selected by the buyer), additional services, and any
     * applied sales tax. This value is returned after the buyer has completed
     * checkout (the <b>CheckoutStatus.Status</b> output field reads "Complete"). If the
     * seller allowed the buyer to change the total for an order, the buyer is
     * able to change the total up until the time when checkout status is
     * Complete. Determine whether the buyer changed the amount by retrieving the
     * order line item data and comparing the <b>AmountPaid</b> value to
     * what the seller expected. If multiple order line items
     * between the same buyer and seller have been combined into a Combined
     * Payment order, the <b>AmountPaid</b> value returned in <b>GetSellerTransactions</b> and
     * <b>GetItemTransactions</b> reflects the amount paid for the Combined Payment order
     * and not the individual order line item. You can determine the
     * order line items that belong to the same Combined Payment order by checking
     * to see if the <b>ContainingOrder.OrderID</b> value is the same. For Motors items,
     * <b>AmountPaid</b> is the amount paid by the buyer for the deposit.<br/>
     * <br />
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getAmountPaid() {
	    return this.amountPaid;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the total amount of the line item. This amount includes
     * the sale price, shipping and handling charges, shipping
     * insurance (if offered and selected by the buyer), additional services, and any
     * applied sales tax. This value is returned after the buyer has completed
     * checkout (the <b>CheckoutStatus.Status</b> output field reads "Complete"). If the
     * seller allowed the buyer to change the total for an order, the buyer is
     * able to change the total up until the time when checkout status is
     * Complete. Determine whether the buyer changed the amount by retrieving the
     * order line item data and comparing the <b>AmountPaid</b> value to
     * what the seller expected. If multiple order line items
     * between the same buyer and seller have been combined into a Combined
     * Payment order, the <b>AmountPaid</b> value returned in <b>GetSellerTransactions</b> and
     * <b>GetItemTransactions</b> reflects the amount paid for the Combined Payment order
     * and not the individual order line item. You can determine the
     * order line items that belong to the same Combined Payment order by checking
     * to see if the <b>ContainingOrder.OrderID</b> value is the same. For Motors items,
     * <b>AmountPaid</b> is the amount paid by the buyer for the deposit.<br/>
     * <br />
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setAmountPaid(AmountType amountPaid) {
	    this.amountPaid = amountPaid;
	}
	/**
     * public getter
     *
     * 
     * This value indicates the dollar amount by which the buyer has adjusted the
     * order total. Adjustments to order costs may include shipping and handling,
     * shipping insurance, buyer discounts, or added services. A positive amount
     * indicates the amount is an extra charge being paid to the seller by the buyer.
     * A negative value indicates this amount is a credit given to the buyer by the
     * seller.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getAdjustmentAmount() {
	    return this.adjustmentAmount;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the dollar amount by which the buyer has adjusted the
     * order total. Adjustments to order costs may include shipping and handling,
     * shipping insurance, buyer discounts, or added services. A positive amount
     * indicates the amount is an extra charge being paid to the seller by the buyer.
     * A negative value indicates this amount is a credit given to the buyer by the
     * seller.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setAdjustmentAmount(AmountType adjustmentAmount) {
	    this.adjustmentAmount = adjustmentAmount;
	}
	/**
     * public getter
     *
     * 
     * This value indicates the converted value of <b>AdjustmentAmount</b> in the currency of the site that
     * returned the response. Refresh this value every 24 hours to pick up the
     * current conversion rates.
     * <br />
     * <br />
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getConvertedAdjustmentAmount() {
	    return this.convertedAdjustmentAmount;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the converted value of <b>AdjustmentAmount</b> in the currency of the site that
     * returned the response. Refresh this value every 24 hours to pick up the
     * current conversion rates.
     * <br />
     * <br />
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setConvertedAdjustmentAmount(AmountType convertedAdjustmentAmount) {
	    this.convertedAdjustmentAmount = convertedAdjustmentAmount;
	}
	/**
     * public getter
     *
     * 
     * UserType container consisting of eBay user data for the buyer. See
     * <b>UserType</b> for its child elements. Returned by
     * <b>GetItemsAwaitingFeedback</b> if the seller is making the request.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b> only).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.UserType
	 */
	public UserType getBuyer() {
	    return this.buyer;
	}
	
	/**
	 * public setter
	 *
     * 
     * UserType container consisting of eBay user data for the buyer. See
     * <b>UserType</b> for its child elements. Returned by
     * <b>GetItemsAwaitingFeedback</b> if the seller is making the request.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b> only).
     * 
     *
     * @param ebay.apis.eblbasecomponents.UserType
	 */
	public void setBuyer(UserType buyer) {
	    this.buyer = buyer;
	}
	/**
     * public getter
     *
     * 
     * Container consisting of shipping-related details for an order. Shipping
     * details include shipping rates, package dimensions, handling costs,
     * excluded shipping locations (if specified), shipping service options,
     * shipping insurance information, sales tax information (if applicable), and
     * shipment tracking details (if shipped).
     * <br><br>
     * For <b>GetSellerTransactions</b> and <b>GetItemTransactions</b>, the <b>ShippingDetails</b>
     * container is returned in the <b>Transaction</b> container. For <b>GetOrders</b> and
     * <b>GetOrderTransactions</b>, the <b>ShippingDetails</b> container is returned at the
     * Order level.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b> only).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ShippingDetailsType
	 */
	public ShippingDetailsType getShippingDetails() {
	    return this.shippingDetails;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of shipping-related details for an order. Shipping
     * details include shipping rates, package dimensions, handling costs,
     * excluded shipping locations (if specified), shipping service options,
     * shipping insurance information, sales tax information (if applicable), and
     * shipment tracking details (if shipped).
     * <br><br>
     * For <b>GetSellerTransactions</b> and <b>GetItemTransactions</b>, the <b>ShippingDetails</b>
     * container is returned in the <b>Transaction</b> container. For <b>GetOrders</b> and
     * <b>GetOrderTransactions</b>, the <b>ShippingDetails</b> container is returned at the
     * Order level.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b> only).
     * 
     *
     * @param ebay.apis.eblbasecomponents.ShippingDetailsType
	 */
	public void setShippingDetails(ShippingDetailsType shippingDetails) {
	    this.shippingDetails = shippingDetails;
	}
	/**
     * public getter
     *
     * 
     * This value indicates the converted value of <b>AmountPaid</b> in the currency of the site that returned the
     * response. Refresh this value every 24 hours to pick up the current
     * conversion rates.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getConvertedAmountPaid() {
	    return this.convertedAmountPaid;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the converted value of <b>AmountPaid</b> in the currency of the site that returned the
     * response. Refresh this value every 24 hours to pick up the current
     * conversion rates.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setConvertedAmountPaid(AmountType convertedAmountPaid) {
	    this.convertedAmountPaid = convertedAmountPaid;
	}
	/**
     * public getter
     *
     * 
     * This value indicates the converted value of <b>TransactionPrice</b> in the currency of the site that
     * returned the response. Refresh this value every 24 hours to pick up the
     * current conversion rates.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getConvertedTransactionPrice() {
	    return this.convertedTransactionPrice;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the converted value of <b>TransactionPrice</b> in the currency of the site that
     * returned the response. Refresh this value every 24 hours to pick up the
     * current conversion rates.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setConvertedTransactionPrice(AmountType convertedTransactionPrice) {
	    this.convertedTransactionPrice = convertedTransactionPrice;
	}
	/**
     * public getter
     *
     * 
     * Indicates the creation time of the order line item. For
     * auction listings, an order line item is created when that
     * listing ends with a high bidder whose bid meets or exceeds the Reserve
     * Price (if set). For a fixed-price listing or a Buy It Now auction listing,
     * an order line item is created once the buyer clicks the Buy
     * button.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b> only).
     * 
     *
     * @returns java.util.Date
	 */
	public Date getCreatedDate() {
	    return this.createdDate;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the creation time of the order line item. For
     * auction listings, an order line item is created when that
     * listing ends with a high bidder whose bid meets or exceeds the Reserve
     * Price (if set). For a fixed-price listing or a Buy It Now auction listing,
     * an order line item is created once the buyer clicks the Buy
     * button.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b> only).
     * 
     *
     * @param java.util.Date
	 */
	public void setCreatedDate(Date createdDate) {
	    this.createdDate = createdDate;
	}
	/**
     * public getter
     *
     * 
     * This value indicates whether or not the seller requires a deposit for the
     * vehicle. This field is only applicable to US eBay Motors Vehicle listings.
     * Otherwise, this field is returned as an empty value.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.DepositTypeCodeType
	 */
	public DepositTypeCodeType getDepositType() {
	    return this.depositType;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates whether or not the seller requires a deposit for the
     * vehicle. This field is only applicable to US eBay Motors Vehicle listings.
     * Otherwise, this field is returned as an empty value.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.DepositTypeCodeType
	 */
	public void setDepositType(DepositTypeCodeType depositType) {
	    this.depositType = depositType;
	}
	/**
     * public getter
     *
     * 
     * Container consisting of details about an item in a listing. The child
     * fields returned are dependent on the call, the type of item or listing, and
     * the listing site.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ItemType
	 */
	public ItemType getItem() {
	    return this.item;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of details about an item in a listing. The child
     * fields returned are dependent on the call, the type of item or listing, and
     * the listing site.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param ebay.apis.eblbasecomponents.ItemType
	 */
	public void setItem(ItemType item) {
	    this.item = item;
	}
	/**
     * public getter
     *
     * 
     * This value indicates the number of identical items purchased at the same
     * time by the same buyer from one listing. For auction listings, this value
     * is always 1. For fixed-price, non-variation listings, this value can be
     * greater than 1. In either case, this field is tied to the same order line
     * item.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getQuantityPurchased() {
	    return this.quantityPurchased;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the number of identical items purchased at the same
     * time by the same buyer from one listing. For auction listings, this value
     * is always 1. For fixed-price, non-variation listings, this value can be
     * greater than 1. In either case, this field is tied to the same order line
     * item.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param java.lang.Integer
	 */
	public void setQuantityPurchased(Integer quantityPurchased) {
	    this.quantityPurchased = quantityPurchased;
	}
	/**
     * public getter
     *
     * 
     * Container consisting of status details of an order line item,
     * including payment information. Several of these fields change values during
     * the checkout flow. See <b>TransactionStatusType</b> for its child elements.
     * <br><br>
     * For <b>GetOrders</b>, only the <b>
     * IntegratedMerchantCreditCardEnabled</b> and
     * <b>PaymentMethodUsed</b> child elements are returned.
     * The <b>PaymentHoldStatus</b> container will be returned for those sellers subject to the new eBay payment process.  The fields indicating the status of the order are
     * actually found in the <b>OrderArray.Order.CheckoutStatus</b>
     * container. <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.TransactionStatusType
	 */
	public TransactionStatusType getStatus() {
	    return this.status;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of status details of an order line item,
     * including payment information. Several of these fields change values during
     * the checkout flow. See <b>TransactionStatusType</b> for its child elements.
     * <br><br>
     * For <b>GetOrders</b>, only the <b>
     * IntegratedMerchantCreditCardEnabled</b> and
     * <b>PaymentMethodUsed</b> child elements are returned.
     * The <b>PaymentHoldStatus</b> container will be returned for those sellers subject to the new eBay payment process.  The fields indicating the status of the order are
     * actually found in the <b>OrderArray.Order.CheckoutStatus</b>
     * container. <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.TransactionStatusType
	 */
	public void setStatus(TransactionStatusType status) {
	    this.status = status;
	}
	/**
     * public getter
     *
     * 
     * Unique identifier for an eBay order line item. An order line
     * item is created once there is a commitment from a buyer to
     * purchase an item. Since an auction listing can only have one order line
     * item during the duration of the listing, the <b>TransactionID</b>
     * for auction listings is always 0. Along with its corresponding <b>ItemID</b>, a
     * <b>TransactionID</b> is used and referenced during an order checkout flow and
     * after checkout has been completed.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b> only).
     * 
     *
     * @returns java.lang.String
	 */
	public String getTransactionID() {
	    return this.transactionID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Unique identifier for an eBay order line item. An order line
     * item is created once there is a commitment from a buyer to
     * purchase an item. Since an auction listing can only have one order line
     * item during the duration of the listing, the <b>TransactionID</b>
     * for auction listings is always 0. Along with its corresponding <b>ItemID</b>, a
     * <b>TransactionID</b> is used and referenced during an order checkout flow and
     * after checkout has been completed.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b> only).
     * 
     *
     * @param java.lang.String
	 */
	public void setTransactionID(String transactionID) {
	    this.transactionID = transactionID;
	}
	/**
     * public getter
     *
     * 
     * The price of one order line item. 
     * <br><br>
     * This price is returned only for Best Offer items. This amount does not take into account shipping, sales tax, and other costs related to the order line item. If multiple units were purchased through Best Offer, this value is the per-unit price.
     * <br><br>
     *                   For eBay Motors Vehicle listings, <b>TransactionPrice</b> is the deposit amount. 
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getTransactionPrice() {
	    return this.transactionPrice;
	}
	
	/**
	 * public setter
	 *
     * 
     * The price of one order line item. 
     * <br><br>
     * This price is returned only for Best Offer items. This amount does not take into account shipping, sales tax, and other costs related to the order line item. If multiple units were purchased through Best Offer, this value is the per-unit price.
     * <br><br>
     *                   For eBay Motors Vehicle listings, <b>TransactionPrice</b> is the deposit amount. 
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b>).
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setTransactionPrice(AmountType transactionPrice) {
	    this.transactionPrice = transactionPrice;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether or not the order line item was created
     * as the result of the seller accepting a Best Offer from a buyer.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getBestOfferSale() {
	    return this.bestOfferSale;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether or not the order line item was created
     * as the result of the seller accepting a Best Offer from a buyer.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setBestOfferSale(Boolean bestOfferSale) {
	    this.bestOfferSale = bestOfferSale;
	}
	/**
     * public getter
     *
     * 
     * VAT rate for the item. When the <b>VATPercent</b> is specified, the item's VAT
     * information appears on the item's listing page. In addition, the seller
     * can choose to print an invoice that includes the item's net price, VAT
     * percent, VAT amount, and total price. Since VAT rates vary depending on the
     * item and on the user's country of residence, a seller is responsible for
     * entering the correct VAT rate; it is not calculated by eBay. To specify a
     * <b>VATPercent</b>, a seller must have a VAT-ID registered with eBay and must be
     * listing the item on a VAT-enabled site. Max precision 3 decimal places. Max
     * length 5 characters. Note: The View Item page displays the precision to 2
     * decimal places with no trailing zeros. However, the full value you send in is
     * stored.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns java.math.BigDecimal
	 */
	public BigDecimal getVatPercent() {
	    return this.vatPercent;
	}
	
	/**
	 * public setter
	 *
     * 
     * VAT rate for the item. When the <b>VATPercent</b> is specified, the item's VAT
     * information appears on the item's listing page. In addition, the seller
     * can choose to print an invoice that includes the item's net price, VAT
     * percent, VAT amount, and total price. Since VAT rates vary depending on the
     * item and on the user's country of residence, a seller is responsible for
     * entering the correct VAT rate; it is not calculated by eBay. To specify a
     * <b>VATPercent</b>, a seller must have a VAT-ID registered with eBay and must be
     * listing the item on a VAT-enabled site. Max precision 3 decimal places. Max
     * length 5 characters. Note: The View Item page displays the precision to 2
     * decimal places with no trailing zeros. However, the full value you send in is
     * stored.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param java.math.BigDecimal
	 */
	public void setVatPercent(BigDecimal vatPercent) {
	    this.vatPercent = vatPercent;
	}
	/**
     * public getter
     *
     * 
     * Container consisting of details for the electronic payment of an eBay order line item.
     * PayPal transactions may include a buyer payment or refund, or a fee or credit applied
     * to the seller's account. This field is only returned after payment for the order line
     * item has occurred. For DE and AT orders going through the new eBay payment process,
     * the <b>PaymentHoldDetails</b> container and <b>PaymentHoldStatus</b>
     * field will be returned instead of the <b>ExternalTransaction</b> container.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns java.util.List<ebay.apis.eblbasecomponents.ExternalTransactionType>
	 */
	public List<ExternalTransactionType> getExternalTransaction() {
	    return this.externalTransaction;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of details for the electronic payment of an eBay order line item.
     * PayPal transactions may include a buyer payment or refund, or a fee or credit applied
     * to the seller's account. This field is only returned after payment for the order line
     * item has occurred. For DE and AT orders going through the new eBay payment process,
     * the <b>PaymentHoldDetails</b> container and <b>PaymentHoldStatus</b>
     * field will be returned instead of the <b>ExternalTransaction</b> container.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param java.util.List<ebay.apis.eblbasecomponents.ExternalTransactionType>
	 */
	public void setExternalTransaction(List<ExternalTransactionType> externalTransaction) {
	    this.externalTransaction = externalTransaction;
	}
	/**
     * public getter
     *
     * 
     * This container consists of Selling Manager product details and is only
     * returned if the item was listed through Selling Manager.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SellingManagerProductDetailsType
	 */
	public SellingManagerProductDetailsType getSellingManagerProductDetails() {
	    return this.sellingManagerProductDetails;
	}
	
	/**
	 * public setter
	 *
     * 
     * This container consists of Selling Manager product details and is only
     * returned if the item was listed through Selling Manager.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SellingManagerProductDetailsType
	 */
	public void setSellingManagerProductDetails(SellingManagerProductDetailsType sellingManagerProductDetails) {
	    this.sellingManagerProductDetails = sellingManagerProductDetails;
	}
	/**
     * public getter
     *
     * 
     * Container consisting of details about the domestic or international shipping
     * service selected by the buyer.
     *       <br/><br/>
     *                   <span class="tablenote">
     *                   <strong>Note:</strong> For GetItemTransactions and GetSellerTransactions, this container does not return accurate shipping service and cost information for multiple line item orders. Use GetOrders instead, and provide the order's combined <strong>OrderID</strong> to retrieve this information.
     *                   </span>
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ShippingServiceOptionsType
	 */
	public ShippingServiceOptionsType getShippingServiceSelected() {
	    return this.shippingServiceSelected;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of details about the domestic or international shipping
     * service selected by the buyer.
     *       <br/><br/>
     *                   <span class="tablenote">
     *                   <strong>Note:</strong> For GetItemTransactions and GetSellerTransactions, this container does not return accurate shipping service and cost information for multiple line item orders. Use GetOrders instead, and provide the order's combined <strong>OrderID</strong> to retrieve this information.
     *                   </span>
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.ShippingServiceOptionsType
	 */
	public void setShippingServiceSelected(ShippingServiceOptionsType shippingServiceSelected) {
	    this.shippingServiceSelected = shippingServiceSelected;
	}
	/**
     * public getter
     *
     * 
     * Display message from buyer. This field holds transient data that is only
     * being returned in Checkout related notifications.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns java.lang.String
	 */
	public String getBuyerMessage() {
	    return this.buyerMessage;
	}
	
	/**
	 * public setter
	 *
     * 
     * Display message from buyer. This field holds transient data that is only
     * being returned in Checkout related notifications.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param java.lang.String
	 */
	public void setBuyerMessage(String buyerMessage) {
	    this.buyerMessage = buyerMessage;
	}
	/**
     * public getter
     *
     * 
     * Dutch auctions are deprecated.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getDutchAuctionBid() {
	    return this.dutchAuctionBid;
	}
	
	/**
	 * public setter
	 *
     * 
     * Dutch auctions are deprecated.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setDutchAuctionBid(AmountType dutchAuctionBid) {
	    this.dutchAuctionBid = dutchAuctionBid;
	}
	/**
     * public getter
     *
     * 
     * This value indicates the payment status of an order. This field is only returned for items that have actually
     * been purchased (fixed-price or Buy It Now) or won (auction listings) and not auction listings that have just
     * been bid on.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PaidStatusCodeType
	 */
	public PaidStatusCodeType getBuyerPaidStatus() {
	    return this.buyerPaidStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * This value indicates the payment status of an order. This field is only returned for items that have actually
     * been purchased (fixed-price or Buy It Now) or won (auction listings) and not auction listings that have just
     * been bid on.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.PaidStatusCodeType
	 */
	public void setBuyerPaidStatus(PaidStatusCodeType buyerPaidStatus) {
	    this.buyerPaidStatus = buyerPaidStatus;
	}
	/**
     * public getter
     *
     * 
     * Specifies the paid status of the order.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PaidStatusCodeType
	 */
	public PaidStatusCodeType getSellerPaidStatus() {
	    return this.sellerPaidStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * Specifies the paid status of the order.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.PaidStatusCodeType
	 */
	public void setSellerPaidStatus(PaidStatusCodeType sellerPaidStatus) {
	    this.sellerPaidStatus = sellerPaidStatus;
	}
	/**
     * public getter
     *
     * 
     * Indicates the time when the order was marked paid. This value will only be
     * visible to the user on either side of the order. An order can be marked as
     * paid in the following ways:
     * <ul>
     * <li>Automatically when a payment is made via PayPal </li>
     * <li>Seller marks the item as paid in My eBay or through Selling Manager Pro </li>
     * <li>Programmatically by the seller through the <b>ReviseCheckoutStatus</b> or <b>CompleteSale</b> calls.</li>
     * </ul>
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getPaidTime() {
	    return this.paidTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the time when the order was marked paid. This value will only be
     * visible to the user on either side of the order. An order can be marked as
     * paid in the following ways:
     * <ul>
     * <li>Automatically when a payment is made via PayPal </li>
     * <li>Seller marks the item as paid in My eBay or through Selling Manager Pro </li>
     * <li>Programmatically by the seller through the <b>ReviseCheckoutStatus</b> or <b>CompleteSale</b> calls.</li>
     * </ul>
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param java.util.Date
	 */
	public void setPaidTime(Date paidTime) {
	    this.paidTime = paidTime;
	}
	/**
     * public getter
     *
     * 
     * Indicates the time when the item(s) associated with the order were marked
     * as shipped. This value will only be visible to the user on either side of
     * the order. An order can be marked as shipped in My eBay or through Selling
     * Manager Pro, or programmatically by the seller through the <b>CompleteSale</b>
     * call.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b> only).
     * 
     *
     * @returns java.util.Date
	 */
	public Date getShippedTime() {
	    return this.shippedTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the time when the item(s) associated with the order were marked
     * as shipped. This value will only be visible to the user on either side of
     * the order. An order can be marked as shipped in My eBay or through Selling
     * Manager Pro, or programmatically by the seller through the <b>CompleteSale</b>
     * call.
     * <br><br>
     * Applicable to Half.com (for <b>GetOrders</b> only).
     * 
     *
     * @param java.util.Date
	 */
	public void setShippedTime(Date shippedTime) {
	    this.shippedTime = shippedTime;
	}
	/**
     * public getter
     *
     * 
     * This field indicates the total price for an order line item.
     * <br><br>
     * For <strong>GetMyeBaySelling</strong>, with Global Shipping Program orders, the value of this field depends on order status and the number of transactions in the order. For orders awaiting payment, the field contains the purchase price of the order line item; for paid orders, it contains the purchase price of the order line item plus the cost of domestic shipping to the international shipping provider's warehouse. With single-transaction orders, this field is returned under the <strong>OrderTransaction.Transaction</strong> container; with multiple-transaction orders, it's returned under the <strong>OrderTransaction.Order.TransactionArray.Transaction</strong> container.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getTotalPrice() {
	    return this.totalPrice;
	}
	
	/**
	 * public setter
	 *
     * 
     * This field indicates the total price for an order line item.
     * <br><br>
     * For <strong>GetMyeBaySelling</strong>, with Global Shipping Program orders, the value of this field depends on order status and the number of transactions in the order. For orders awaiting payment, the field contains the purchase price of the order line item; for paid orders, it contains the purchase price of the order line item plus the cost of domestic shipping to the international shipping provider's warehouse. With single-transaction orders, this field is returned under the <strong>OrderTransaction.Transaction</strong> container; with multiple-transaction orders, it's returned under the <strong>OrderTransaction.Order.TransactionArray.Transaction</strong> container.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setTotalPrice(AmountType totalPrice) {
	    this.totalPrice = totalPrice;
	}
	/**
     * public getter
     *
     * 
     * This container consists of Feedback left by the caller for their order
     * partner. This container is only returned if the order is complete and
     * feedback on the order line item has been left by the caller.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.FeedbackInfoType
	 */
	public FeedbackInfoType getFeedbackLeft() {
	    return this.feedbackLeft;
	}
	
	/**
	 * public setter
	 *
     * 
     * This container consists of Feedback left by the caller for their order
     * partner. This container is only returned if the order is complete and
     * feedback on the order line item has been left by the caller.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.FeedbackInfoType
	 */
	public void setFeedbackLeft(FeedbackInfoType feedbackLeft) {
	    this.feedbackLeft = feedbackLeft;
	}
	/**
     * public getter
     *
     * 
     * This container consists of Feedback received by the caller from their
     * order partner. This container is only returned if the order is complete and
     * feedback on the order line item has been received by the
     * caller.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.FeedbackInfoType
	 */
	public FeedbackInfoType getFeedbackReceived() {
	    return this.feedbackReceived;
	}
	
	/**
	 * public setter
	 *
     * 
     * This container consists of Feedback received by the caller from their
     * order partner. This container is only returned if the order is complete and
     * feedback on the order line item has been received by the
     * caller.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.FeedbackInfoType
	 */
	public void setFeedbackReceived(FeedbackInfoType feedbackReceived) {
	    this.feedbackReceived = feedbackReceived;
	}
	/**
     * public getter
     *
     * 
     * The Combined Payment order to which the order line item
     * belongs. This container is only returned if <b>IncludeContainingOrder</b> is
     * included and set to true in a <b>GetItemTransactions</b> or <b>GetSellerTransactions</b>
     * request.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.OrderType
	 */
	public OrderType getContainingOrder() {
	    return this.containingOrder;
	}
	
	/**
	 * public setter
	 *
     * 
     * The Combined Payment order to which the order line item
     * belongs. This container is only returned if <b>IncludeContainingOrder</b> is
     * included and set to true in a <b>GetItemTransactions</b> or <b>GetSellerTransactions</b>
     * request.
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.OrderType
	 */
	public void setContainingOrder(OrderType containingOrder) {
	    this.containingOrder = containingOrder;
	}
	/**
     * public getter
     *
     * 
     * A Final Value Fee is calculated and charged to a seller's account
     * immediately upon creation of an order line item. Note that this fee is created
     * before the buyer makes a payment.The Final Value Fee for each order line
     * item is returned by <b>GetSellerTransactions</b>, <b>GetItemTransactions</b>, <b>GetOrders</b>,
     * and <b>GetOrderTransactions</b>, regardless of the checkout status.
     * <br><br>
     * If a seller requests a Final Value Fee credit, the value of
     * <b>Transaction.FinalValueFee</b> will not change if a credit is
     * issued. The credit only appears in the seller's account data.
     * 
     *         
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getFinalValueFee() {
	    return this.finalValueFee;
	}
	
	/**
	 * public setter
	 *
     * 
     * A Final Value Fee is calculated and charged to a seller's account
     * immediately upon creation of an order line item. Note that this fee is created
     * before the buyer makes a payment.The Final Value Fee for each order line
     * item is returned by <b>GetSellerTransactions</b>, <b>GetItemTransactions</b>, <b>GetOrders</b>,
     * and <b>GetOrderTransactions</b>, regardless of the checkout status.
     * <br><br>
     * If a seller requests a Final Value Fee credit, the value of
     * <b>Transaction.FinalValueFee</b> will not change if a credit is
     * issued. The credit only appears in the seller's account data.
     * 
     *         
     * <br><br>
     * Not applicable to Half.com.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setFinalValueFee(AmountType finalValueFee) {
	    this.finalValueFee = finalValueFee;
	}
	/**
     * public getter
     *
     * 
     * ProStores listing level preferences regarding the store to which
     * checkout should be redirected for the listing if <b>Item.ThirdPartyCheckout</b>
     * is true.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.ListingCheckoutRedirectPreferenceType
	 */
	public ListingCheckoutRedirectPreferenceType getListingCheckoutRedirectPreference() {
	    return this.listingCheckoutRedirectPreference;
	}
	
	/**
	 * public setter
	 *
     * 
     * ProStores listing level preferences regarding the store to which
     * checkout should be redirected for the listing if <b>Item.ThirdPartyCheckout</b>
     * is true.
     * 
     *
     * @param ebay.apis.eblbasecomponents.ListingCheckoutRedirectPreferenceType
	 */
	public void setListingCheckoutRedirectPreference(ListingCheckoutRedirectPreferenceType listingCheckoutRedirectPreference) {
	    this.listingCheckoutRedirectPreference = listingCheckoutRedirectPreference;
	}
	/**
     * public getter
     *
     * 
     * Container consisting of one or more refund transactions to Half.com buyers.
     * Container consisting of one or more refund transactions for eBay's new payment process.
     * This container is only returned if a refund to a Half.com buyer has occurred or an refund was issued through eBay's new payment process
     * 
     *
     * @returns ebay.apis.eblbasecomponents.RefundArrayType
	 */
	public RefundArrayType getRefundArray() {
	    return this.refundArray;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of one or more refund transactions to Half.com buyers.
     * Container consisting of one or more refund transactions for eBay's new payment process.
     * This container is only returned if a refund to a Half.com buyer has occurred or an refund was issued through eBay's new payment process
     * 
     *
     * @param ebay.apis.eblbasecomponents.RefundArrayType
	 */
	public void setRefundArray(RefundArrayType refundArray) {
	    this.refundArray = refundArray;
	}
	/**
     * public getter
     *
     * 
     * The site upon which the order line item (transaction) was created.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SiteCodeType
	 */
	public SiteCodeType getTransactionSiteID() {
	    return this.transactionSiteID;
	}
	
	/**
	 * public setter
	 *
     * 
     * The site upon which the order line item (transaction) was created.
     * 
     *
     * @param ebay.apis.eblbasecomponents.SiteCodeType
	 */
	public void setTransactionSiteID(SiteCodeType transactionSiteID) {
	    this.transactionSiteID = transactionSiteID;
	}
	/**
     * public getter
     *
     * 
     * Name of the eBay co-branded site upon which the order line item
     * (transaction) was created.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.TransactionPlatformCodeType
	 */
	public TransactionPlatformCodeType getPlatform() {
	    return this.platform;
	}
	
	/**
	 * public setter
	 *
     * 
     * Name of the eBay co-branded site upon which the order line item
     * (transaction) was created.
     * 
     *
     * @param ebay.apis.eblbasecomponents.TransactionPlatformCodeType
	 */
	public void setPlatform(TransactionPlatformCodeType platform) {
	    this.platform = platform;
	}
	/**
     * public getter
     *
     * 
     * Unique identifier for an instance of Shopping.com shopping cart. This field is only
     * returned for Shopping.com order line items (transactions).
     * 
     *
     * @returns java.lang.String
	 */
	public String getCartID() {
	    return this.cartID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Unique identifier for an instance of Shopping.com shopping cart. This field is only
     * returned for Shopping.com order line items (transactions).
     * 
     *
     * @param java.lang.String
	 */
	public void setCartID(String cartID) {
	    this.cartID = cartID;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the buyer has opted to accept emails from all the selling
     * partners on Shopping.com. This field is only returned for order line items
     * purchased through the Shopping.com shopping cart.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getSellerContactBuyerByEmail() {
	    return this.sellerContactBuyerByEmail;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the buyer has opted to accept emails from all the selling
     * partners on Shopping.com. This field is only returned for order line items
     * purchased through the Shopping.com shopping cart.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setSellerContactBuyerByEmail(Boolean sellerContactBuyerByEmail) {
	    this.sellerContactBuyerByEmail = sellerContactBuyerByEmail;
	}
	/**
     * public getter
     *
     * 
     * The seller's Paypal email address. This value is only revealed if it is the
     * seller making the call.
     * 
     *
     * @returns java.lang.String
	 */
	public String getPayPalEmailAddress() {
	    return this.payPalEmailAddress;
	}
	
	/**
	 * public setter
	 *
     * 
     * The seller's Paypal email address. This value is only revealed if it is the
     * seller making the call.
     * 
     *
     * @param java.lang.String
	 */
	public void setPayPalEmailAddress(String payPalEmailAddress) {
	    this.payPalEmailAddress = payPalEmailAddress;
	}
	/**
     * public getter
     *
     * 
     * Unique identifier for a PaisaPay transaction. Only applicable for the India
     * site (203) if PaisaPay was the payment method used.
     * 
     *
     * @returns java.lang.String
	 */
	public String getPaisaPayID() {
	    return this.paisaPayID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Unique identifier for a PaisaPay transaction. Only applicable for the India
     * site (203) if PaisaPay was the payment method used.
     * 
     *
     * @param java.lang.String
	 */
	public void setPaisaPayID(String paisaPayID) {
	    this.paisaPayID = paisaPayID;
	}
	/**
     * public getter
     *
     * 
     * For the Australia site, <b>BuyerGuaranteePrice</b> is the PayPal Buyer Protection coverage,
     * offered for the item at the time of purchase. Details of coverage are in the
     * following sections of the View Item page: the Buy Safely section and the Payment
     * Details section.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getBuyerGuaranteePrice() {
	    return this.buyerGuaranteePrice;
	}
	
	/**
	 * public setter
	 *
     * 
     * For the Australia site, <b>BuyerGuaranteePrice</b> is the PayPal Buyer Protection coverage,
     * offered for the item at the time of purchase. Details of coverage are in the
     * following sections of the View Item page: the Buy Safely section and the Payment
     * Details section.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setBuyerGuaranteePrice(AmountType buyerGuaranteePrice) {
	    this.buyerGuaranteePrice = buyerGuaranteePrice;
	}
	/**
     * public getter
     *
     * 
     *  In a fixed-priced listing, a seller can offer variations of the same item.
     *  For example, the seller could create a fixed-priced listing for a t-shirt
     *  design and offer the shirt in different colors and sizes. In this case, each
     *  color and size combination is a separate variation. Each variation can have
     *  a different quantity and price. Due to the possible price differentiation,
     *  buyers can buy multiple items from this listing at the same time, but all of
     *  the items must be of the same variation. One order line item is created
     *  whether one or multiple items of the same variation are purchased.
     *  <br><br>
     *  The <b>Variation</b> node contains information about which variation
     *  was purchased. Therefore, applications that process orders
     *  should always check to see if this node is present.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.VariationType
	 */
	public VariationType getVariation() {
	    return this.variation;
	}
	
	/**
	 * public setter
	 *
     * 
     *  In a fixed-priced listing, a seller can offer variations of the same item.
     *  For example, the seller could create a fixed-priced listing for a t-shirt
     *  design and offer the shirt in different colors and sizes. In this case, each
     *  color and size combination is a separate variation. Each variation can have
     *  a different quantity and price. Due to the possible price differentiation,
     *  buyers can buy multiple items from this listing at the same time, but all of
     *  the items must be of the same variation. One order line item is created
     *  whether one or multiple items of the same variation are purchased.
     *  <br><br>
     *  The <b>Variation</b> node contains information about which variation
     *  was purchased. Therefore, applications that process orders
     *  should always check to see if this node is present.
     * 
     *
     * @param ebay.apis.eblbasecomponents.VariationType
	 */
	public void setVariation(VariationType variation) {
	    this.variation = variation;
	}
	/**
     * public getter
     *
     * 
     * This field is returned if a buyer left a comment for the seller during the
     * left by buyer during the checkout flow.
     * 
     *
     * @returns java.lang.String
	 */
	public String getBuyerCheckoutMessage() {
	    return this.buyerCheckoutMessage;
	}
	
	/**
	 * public setter
	 *
     * 
     * This field is returned if a buyer left a comment for the seller during the
     * left by buyer during the checkout flow.
     * 
     *
     * @param java.lang.String
	 */
	public void setBuyerCheckoutMessage(String buyerCheckoutMessage) {
	    this.buyerCheckoutMessage = buyerCheckoutMessage;
	}
	/**
     * public getter
     *
     * 
     * The price of one order line item. This amount does not take into account shipping, sales tax, and other costs related to the order line item. 
     *                   <br/><br/>
     *                   If multiple units were purchased through a non-variation, fixed-price listing, consider this value the per-unit price. To get the total amount, multiply <strong>TotalTransactionPrice</strong> by the <strong>Transaction.QuantityPurchased</strong> value. 
     *                   <br/><br/>
     *                   For eBay Motors Vehicle listings, <strong>TotalTransactionPrice</strong> is the deposit amount. 
     *                   <br/><br/>
     *                   Applicable to Half.com (for GetOrders). 
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getTotalTransactionPrice() {
	    return this.totalTransactionPrice;
	}
	
	/**
	 * public setter
	 *
     * 
     * The price of one order line item. This amount does not take into account shipping, sales tax, and other costs related to the order line item. 
     *                   <br/><br/>
     *                   If multiple units were purchased through a non-variation, fixed-price listing, consider this value the per-unit price. To get the total amount, multiply <strong>TotalTransactionPrice</strong> by the <strong>Transaction.QuantityPurchased</strong> value. 
     *                   <br/><br/>
     *                   For eBay Motors Vehicle listings, <strong>TotalTransactionPrice</strong> is the deposit amount. 
     *                   <br/><br/>
     *                   Applicable to Half.com (for GetOrders). 
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setTotalTransactionPrice(AmountType totalTransactionPrice) {
	    this.totalTransactionPrice = totalTransactionPrice;
	}
	/**
     * public getter
     *
     * 
     *
     * @returns ebay.apis.eblbasecomponents.TaxesType
	 */
	public TaxesType getTaxes() {
	    return this.taxes;
	}
	
	/**
	 * public setter
	 *
     * 
     *
     * @param ebay.apis.eblbasecomponents.TaxesType
	 */
	public void setTaxes(TaxesType taxes) {
	    this.taxes = taxes;
	}
	/**
     * public getter
     *
     * 
     * Boolean value indicating whether or not an order line item is
     * part of a bundle purchase using Product Configurator.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getBundlePurchase() {
	    return this.bundlePurchase;
	}
	
	/**
	 * public setter
	 *
     * 
     * Boolean value indicating whether or not an order line item is
     * part of a bundle purchase using Product Configurator.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setBundlePurchase(Boolean bundlePurchase) {
	    this.bundlePurchase = bundlePurchase;
	}
	/**
     * public getter
     *
     * 
     * The shipping cost charged to the buyer for the order line item.
     * <br/><br/>
     * For <strong>GetOrders</strong>, this field is returned only after checkout is completed on the order. A value of <code>0.00</code> indicates free shipping.
     * <br/><br/>
     * For other calls, this field is always returned but defaults to <code>0.00</code> until payment has been made on the order.
     * <br/><br/>
     * <span class="tablenote">
     *                   <strong>Note:</strong> This is different from the field of the same name returned by <strong>GetSellingManagerSaleRecord</strong> and <strong>ReviseSellingManagerSaleRecord</strong>, which contains the actual shipping cost paid by the seller.
     *                   </span>
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getActualShippingCost() {
	    return this.actualShippingCost;
	}
	
	/**
	 * public setter
	 *
     * 
     * The shipping cost charged to the buyer for the order line item.
     * <br/><br/>
     * For <strong>GetOrders</strong>, this field is returned only after checkout is completed on the order. A value of <code>0.00</code> indicates free shipping.
     * <br/><br/>
     * For other calls, this field is always returned but defaults to <code>0.00</code> until payment has been made on the order.
     * <br/><br/>
     * <span class="tablenote">
     *                   <strong>Note:</strong> This is different from the field of the same name returned by <strong>GetSellingManagerSaleRecord</strong> and <strong>ReviseSellingManagerSaleRecord</strong>, which contains the actual shipping cost paid by the seller.
     *                   </span>
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setActualShippingCost(AmountType actualShippingCost) {
	    this.actualShippingCost = actualShippingCost;
	}
	/**
     * public getter
     *
     * 
     * The handling cost for the order line item. The value of this field is
     * returned as zero dollars if the seller did not specify a handling cost for
     * the listing. It also will show as 0.00 dollars until payment has been made
     * on the order.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getActualHandlingCost() {
	    return this.actualHandlingCost;
	}
	
	/**
	 * public setter
	 *
     * 
     * The handling cost for the order line item. The value of this field is
     * returned as zero dollars if the seller did not specify a handling cost for
     * the listing. It also will show as 0.00 dollars until payment has been made
     * on the order.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setActualHandlingCost(AmountType actualHandlingCost) {
	    this.actualHandlingCost = actualHandlingCost;
	}
	/**
     * public getter
     *
     * 
     * A unique identifier for an eBay order line item. This field is created as
     * soon as there is a commitment to buy from the seller, and its value is
     * based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in
     * between these two IDs.
     * 
     *
     * @returns java.lang.String
	 */
	public String getOrderLineItemID() {
	    return this.orderLineItemID;
	}
	
	/**
	 * public setter
	 *
     * 
     * A unique identifier for an eBay order line item. This field is created as
     * soon as there is a commitment to buy from the seller, and its value is
     * based upon the concatenation of <b>ItemID</b> and <b>TransactionID</b>, with a hyphen in
     * between these two IDs.
     * 
     *
     * @param java.lang.String
	 */
	public void setOrderLineItemID(String orderLineItemID) {
	    this.orderLineItemID = orderLineItemID;
	}
	/**
     * public getter
     *
     * 
     * Shipping hold details
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PaymentHoldDetailType
	 */
	public PaymentHoldDetailType getPaymentHoldDetails() {
	    return this.paymentHoldDetails;
	}
	
	/**
	 * public setter
	 *
     * 
     * Shipping hold details
     * 
     *
     * @param ebay.apis.eblbasecomponents.PaymentHoldDetailType
	 */
	public void setPaymentHoldDetails(PaymentHoldDetailType paymentHoldDetails) {
	    this.paymentHoldDetails = paymentHoldDetails;
	}
	/**
     * public getter
     *
     * 
     * Seller Discounts
     * 
     *
     * @returns ebay.apis.eblbasecomponents.SellerDiscountsType
	 */
	public SellerDiscountsType getSellerDiscounts() {
	    return this.sellerDiscounts;
	}
	
	/**
	 * public setter
	 *
     * 
     * Seller Discounts
     * 
     *
     * @param ebay.apis.eblbasecomponents.SellerDiscountsType
	 */
	public void setSellerDiscounts(SellerDiscountsType sellerDiscounts) {
	    this.sellerDiscounts = sellerDiscounts;
	}
	/**
     * public getter
     *
     * 
     * Partial or Full refund amount from seller to the buyer
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getRefundAmount() {
	    return this.refundAmount;
	}
	
	/**
	 * public setter
	 *
     * 
     * Partial or Full refund amount from seller to the buyer
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setRefundAmount(AmountType refundAmount) {
	    this.refundAmount = refundAmount;
	}
	/**
     * public getter
     *
     * 
     * Refund Status Notification to Seller (Success, Failure, Pending)
     * 
     *
     * @returns java.lang.String
	 */
	public String getRefundStatus() {
	    return this.refundStatus;
	}
	
	/**
	 * public setter
	 *
     * 
     * Refund Status Notification to Seller (Success, Failure, Pending)
     * 
     *
     * @param java.lang.String
	 */
	public void setRefundStatus(String refundStatus) {
	    this.refundStatus = refundStatus;
	}
	/**
     * public getter
     *
     * 
     * This field is returned if the <b>IncludeCodeFiscale</b> flag is
     * included in the request and set to 'true', and if the buyer has provided this value
     * at checkout time.
     * <br/><br/>
     * This field is only applicable to Italian sellers. The Codice Fiscale number is
     * unique for each Italian citizen and is used for tax purposes.
     * 
     *
     * @returns java.lang.String
	 */
	public String getCodiceFiscale() {
	    return this.codiceFiscale;
	}
	
	/**
	 * public setter
	 *
     * 
     * This field is returned if the <b>IncludeCodeFiscale</b> flag is
     * included in the request and set to 'true', and if the buyer has provided this value
     * at checkout time.
     * <br/><br/>
     * This field is only applicable to Italian sellers. The Codice Fiscale number is
     * unique for each Italian citizen and is used for tax purposes.
     * 
     *
     * @param java.lang.String
	 */
	public void setCodiceFiscale(String codiceFiscale) {
	    this.codiceFiscale = codiceFiscale;
	}
	/**
     * public getter
     *
     * 
     * If <strong>IsMultilegShipping</strong> is true, the order or transaction uses the Global Shipping Program, in which the shipment has a domestic leg and an international leg. The buyer's shipping address is in a country other than the country where the items were listed, and the Get family of calls will return <code>InternationalPriorityShipping</code> as the default international shipping service in the listings of all the items in the order.
     * <br/><br/>
     * If <strong>IsMultilegShipping</strong> is false, the order or transaction does not use the Global Shipping Program. The shipment might use a different international shipping service, or it might be domestic.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getIsMultiLegShipping() {
	    return this.isMultiLegShipping;
	}
	
	/**
	 * public setter
	 *
     * 
     * If <strong>IsMultilegShipping</strong> is true, the order or transaction uses the Global Shipping Program, in which the shipment has a domestic leg and an international leg. The buyer's shipping address is in a country other than the country where the items were listed, and the Get family of calls will return <code>InternationalPriorityShipping</code> as the default international shipping service in the listings of all the items in the order.
     * <br/><br/>
     * If <strong>IsMultilegShipping</strong> is false, the order or transaction does not use the Global Shipping Program. The shipment might use a different international shipping service, or it might be domestic.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setIsMultiLegShipping(Boolean isMultiLegShipping) {
	    this.isMultiLegShipping = isMultiLegShipping;
	}
	/**
     * public getter
     *
     * 
     * Contains details about the domestic leg of a Global Shipping Program shipment.
     * <br/><br/>
     * This information is not returned if <strong>IsMultilegShipping</strong> is false.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.MultiLegShippingDetailsType
	 */
	public MultiLegShippingDetailsType getMultiLegShippingDetails() {
	    return this.multiLegShippingDetails;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains details about the domestic leg of a Global Shipping Program shipment.
     * <br/><br/>
     * This information is not returned if <strong>IsMultilegShipping</strong> is false.
     * 
     *
     * @param ebay.apis.eblbasecomponents.MultiLegShippingDetailsType
	 */
	public void setMultiLegShippingDetails(MultiLegShippingDetailsType multiLegShippingDetails) {
	    this.multiLegShippingDetails = multiLegShippingDetails;
	}
	/**
     * public getter
     *
     * 
     * This field indicates the date/time that an order invoice was sent from the seller
     * to the buyer. This field is only returned if an invoice (containing the order
     * line item) was sent to the buyer.
     * 
     *
     * @returns java.util.Date
	 */
	public Date getInvoiceSentTime() {
	    return this.invoiceSentTime;
	}
	
	/**
	 * public setter
	 *
     * 
     * This field indicates the date/time that an order invoice was sent from the seller
     * to the buyer. This field is only returned if an invoice (containing the order
     * line item) was sent to the buyer.
     * 
     *
     * @param java.util.Date
	 */
	public void setInvoiceSentTime(Date invoiceSentTime) {
	    this.invoiceSentTime = invoiceSentTime;
	}
	/**
     * public getter
     *
     * 
     * Container consisting of details related to the type and status of an Unpaid
     * Item case. This container is only returned if there is an open or closed
     * Unpaid Item case associated with the order line item.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.UnpaidItemType
	 */
	public UnpaidItemType getUnpaidItem() {
	    return this.unpaidItem;
	}
	
	/**
	 * public setter
	 *
     * 
     * Container consisting of details related to the type and status of an Unpaid
     * Item case. This container is only returned if there is an open or closed
     * Unpaid Item case associated with the order line item.
     * 
     *
     * @param ebay.apis.eblbasecomponents.UnpaidItemType
	 */
	public void setUnpaidItem(UnpaidItemType unpaidItem) {
	    this.unpaidItem = unpaidItem;
	}
	/**
     * public getter
     *
     * 
     *   This flag indicates whether or not the order line item is an
     * intangible good such as an MP3 track or a mobile phone ringtone. Intangible items
     * are not eligible for PayPal's Seller Protection program, so the seller will not be
     * able to open an Unpaid Item case against the buyer.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getIntangibleItem() {
	    return this.intangibleItem;
	}
	
	/**
	 * public setter
	 *
     * 
     *   This flag indicates whether or not the order line item is an
     * intangible good such as an MP3 track or a mobile phone ringtone. Intangible items
     * are not eligible for PayPal's Seller Protection program, so the seller will not be
     * able to open an Unpaid Item case against the buyer.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setIntangibleItem(Boolean intangibleItem) {
	    this.intangibleItem = intangibleItem;
	}

}