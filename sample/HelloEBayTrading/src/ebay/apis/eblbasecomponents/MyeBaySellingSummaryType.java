// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * 
 * Contains summary information about the items the seller is selling.
 * 
 */
public class MyeBaySellingSummaryType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "ActiveAuctionCount")
	private Integer activeAuctionCount;
	
	@Element(name = "AuctionSellingCount")
	private Integer auctionSellingCount;
	
	@Element(name = "AuctionBidCount")
	private Integer auctionBidCount;
	
	@Element(name = "TotalAuctionSellingValue")
	private AmountType totalAuctionSellingValue;
	
	@Element(name = "TotalSoldCount")
	private Integer totalSoldCount;
	
	@Element(name = "TotalSoldValue")
	private AmountType totalSoldValue;
	
	@Element(name = "SoldDurationInDays")
	private Integer soldDurationInDays;
	
	@Element(name = "ClassifiedAdCount")
	private Integer classifiedAdCount;
	
	@Element(name = "TotalLeadCount")
	private Integer totalLeadCount;
	
	@Element(name = "ClassifiedAdOfferCount")
	private Integer classifiedAdOfferCount;
	
	@Element(name = "TotalListingsWithLeads")
	private Integer totalListingsWithLeads;
	
	@Element(name = "QuantityLimitRemaining")
	private Long quantityLimitRemaining;
	
	@Element(name = "AmountLimitRemaining")
	private AmountType amountLimitRemaining;
	
    
	/**
     * public getter
     *
     * 
     * The number of currently active auctions that will sell. That
     * is, there is at least one bidder, and any reserve price has
     * been met. Equivalent to the "Will Sell" value in My eBay.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getActiveAuctionCount() {
	    return this.activeAuctionCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The number of currently active auctions that will sell. That
     * is, there is at least one bidder, and any reserve price has
     * been met. Equivalent to the "Will Sell" value in My eBay.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setActiveAuctionCount(Integer activeAuctionCount) {
	    this.activeAuctionCount = activeAuctionCount;
	}
	/**
     * public getter
     *
     * 
     * The total number of currently active auctions for a given
     * seller. Note that this does not include listings that are
     * FixedPriceItem or StoresFixedPrice. Equivalent to the
     * "Auction Quantity" value in My eBay.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getAuctionSellingCount() {
	    return this.auctionSellingCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total number of currently active auctions for a given
     * seller. Note that this does not include listings that are
     * FixedPriceItem or StoresFixedPrice. Equivalent to the
     * "Auction Quantity" value in My eBay.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setAuctionSellingCount(Integer auctionSellingCount) {
	    this.auctionSellingCount = auctionSellingCount;
	}
	/**
     * public getter
     *
     * 
     * The total number of bids made on the seller's active listings.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getAuctionBidCount() {
	    return this.auctionBidCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total number of bids made on the seller's active listings.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setAuctionBidCount(Integer auctionBidCount) {
	    this.auctionBidCount = auctionBidCount;
	}
	/**
     * public getter
     *
     * 
     * For all items that the seller has for sale, the total
     * selling values of those items having bids and where the
     * Reserve price is met (if a Reserve price is specified).
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getTotalAuctionSellingValue() {
	    return this.totalAuctionSellingValue;
	}
	
	/**
	 * public setter
	 *
     * 
     * For all items that the seller has for sale, the total
     * selling values of those items having bids and where the
     * Reserve price is met (if a Reserve price is specified).
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setTotalAuctionSellingValue(AmountType totalAuctionSellingValue) {
	    this.totalAuctionSellingValue = totalAuctionSellingValue;
	}
	/**
     * public getter
     *
     * 
     * The total number of items that the seller has sold in the
     * past 31 days.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getTotalSoldCount() {
	    return this.totalSoldCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total number of items that the seller has sold in the
     * past 31 days.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setTotalSoldCount(Integer totalSoldCount) {
	    this.totalSoldCount = totalSoldCount;
	}
	/**
     * public getter
     *
     * 
     * The total monetary value of the items the seller has sold.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getTotalSoldValue() {
	    return this.totalSoldValue;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total monetary value of the items the seller has sold.
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setTotalSoldValue(AmountType totalSoldValue) {
	    this.totalSoldValue = totalSoldValue;
	}
	/**
     * public getter
     *
     * 
     * The average duration, in days, of all items sold.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getSoldDurationInDays() {
	    return this.soldDurationInDays;
	}
	
	/**
	 * public setter
	 *
     * 
     * The average duration, in days, of all items sold.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setSoldDurationInDays(Integer soldDurationInDays) {
	    this.soldDurationInDays = soldDurationInDays;
	}
	/**
     * public getter
     *
     * 
     * The total number of Classified Ad listings listed by the
     * seller.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getClassifiedAdCount() {
	    return this.classifiedAdCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total number of Classified Ad listings listed by the
     * seller.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setClassifiedAdCount(Integer classifiedAdCount) {
	    this.classifiedAdCount = classifiedAdCount;
	}
	/**
     * public getter
     *
     * 
     * The total number of leads from the seller's classified
     * ad listings. Number indicates the total number of emails
     * received for the listings
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getTotalLeadCount() {
	    return this.totalLeadCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total number of leads from the seller's classified
     * ad listings. Number indicates the total number of emails
     * received for the listings
     * 
     *
     * @param java.lang.Integer
	 */
	public void setTotalLeadCount(Integer totalLeadCount) {
	    this.totalLeadCount = totalLeadCount;
	}
	/**
     * public getter
     *
     * 
     * The total number of offers received on active Classified
     * Ad listings.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getClassifiedAdOfferCount() {
	    return this.classifiedAdOfferCount;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total number of offers received on active Classified
     * Ad listings.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setClassifiedAdOfferCount(Integer classifiedAdOfferCount) {
	    this.classifiedAdOfferCount = classifiedAdOfferCount;
	}
	/**
     * public getter
     *
     * 
     * The total number of Classified Ad listings that have an
     * associated lead.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getTotalListingsWithLeads() {
	    return this.totalListingsWithLeads;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total number of Classified Ad listings that have an
     * associated lead.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setTotalListingsWithLeads(Integer totalListingsWithLeads) {
	    this.totalListingsWithLeads = totalListingsWithLeads;
	}
	/**
     * public getter
     *
     * 
     * The quantity of items that this seller can list. This number refers to the total quantity of items in all listings.
     * For example, if the seller's limit was a quantity of 100, this could be 100 listings of one item each, or one listing with a quantity of 100 items.
     * The seller will be unable to list additional items or quantities of items for sale in excess of this number for the
     * current month unless the seller requests an increase from eBay using the "Request higher selling limits" link in the All Selling section 
     * of My eBay. (Under "Selling Limits".) Notice that the amount limit (see AmountLimitRemaining) may be reached
     * before the quantity limit is reached. 
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getQuantityLimitRemaining() {
	    return this.quantityLimitRemaining;
	}
	
	/**
	 * public setter
	 *
     * 
     * The quantity of items that this seller can list. This number refers to the total quantity of items in all listings.
     * For example, if the seller's limit was a quantity of 100, this could be 100 listings of one item each, or one listing with a quantity of 100 items.
     * The seller will be unable to list additional items or quantities of items for sale in excess of this number for the
     * current month unless the seller requests an increase from eBay using the "Request higher selling limits" link in the All Selling section 
     * of My eBay. (Under "Selling Limits".) Notice that the amount limit (see AmountLimitRemaining) may be reached
     * before the quantity limit is reached. 
     * 
     *
     * @param java.lang.Long
	 */
	public void setQuantityLimitRemaining(Long quantityLimitRemaining) {
	    this.quantityLimitRemaining = quantityLimitRemaining;
	}
	/**
     * public getter
     *
     * 
     * The total value of the items listed price that this seller can list. This amount is the total of the prices
     * specified upon listing. For example, for fixed price listings, this is the total of the fixed price amounts.
     * For auction listings, this is the total of the starting prices.
     * The seller will be unable to list an item if the amount of the item's fixed price or starting price (for auctions)
     * exceeds the amount limit. 
     * This is part of the seller limit, which can be increased by requesting an increase from eBay using the 
     * "Request higher selling limits" link in the All Selling section 
     * of My eBay. (Under "Selling Limits".) Notice that the quantity limit (see QuantityLimitRemaining) may be reached
     * before the amount limit is reached. 
     * 
     *
     * @returns ebay.apis.eblbasecomponents.AmountType
	 */
	public AmountType getAmountLimitRemaining() {
	    return this.amountLimitRemaining;
	}
	
	/**
	 * public setter
	 *
     * 
     * The total value of the items listed price that this seller can list. This amount is the total of the prices
     * specified upon listing. For example, for fixed price listings, this is the total of the fixed price amounts.
     * For auction listings, this is the total of the starting prices.
     * The seller will be unable to list an item if the amount of the item's fixed price or starting price (for auctions)
     * exceeds the amount limit. 
     * This is part of the seller limit, which can be increased by requesting an increase from eBay using the 
     * "Request higher selling limits" link in the All Selling section 
     * of My eBay. (Under "Selling Limits".) Notice that the quantity limit (see QuantityLimitRemaining) may be reached
     * before the amount limit is reached. 
     * 
     *
     * @param ebay.apis.eblbasecomponents.AmountType
	 */
	public void setAmountLimitRemaining(AmountType amountLimitRemaining) {
	    this.amountLimitRemaining = amountLimitRemaining;
	}

}