// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * 
 * The GetFeedback response contains the feedback summary if a 
 * TransactionID or ItemID is specified, and contains the specified user's total
 * feedback score and feedback summary data if a UserID is specified. If no
 * value is supplied, the feedback score and feedback summary for the requesting
 * user will be returned. 
 * <br>
 * If a detail level value of ReturnAll is specified, an array of all feedback 
 * records will be returned.
 * 
 */
@RootElement(name = "GetFeedbackResponse", namespace = "urn:ebay:apis:eBLBaseComponents")
public class GetFeedbackResponseType extends AbstractResponseType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "FeedbackDetailArray")
	private FeedbackDetailArrayType feedbackDetailArray;
	
	@Element(name = "FeedbackDetailItemTotal")
	private Integer feedbackDetailItemTotal;
	
	@Element(name = "FeedbackSummary")
	private FeedbackSummaryType feedbackSummary;
	
	@Element(name = "FeedbackScore")
	private Integer feedbackScore;
	
	@Element(name = "PaginationResult")
	private PaginationResultType paginationResult;
	
	@Element(name = "EntriesPerPage")
	private Integer entriesPerPage;
	
	@Element(name = "PageNumber")
	private Integer pageNumber;
	
    
	/**
     * public getter
     *
     * 
     * Contains the individual feedback records for the user or order line item specified in the request. There is one FeedbackDetailType
     * object for each feedback record. Only populated with data when a detail level of ReturnAll is specified in the request. Not returned if you specify FeedbackID in the request.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.FeedbackDetailArrayType
	 */
	public FeedbackDetailArrayType getFeedbackDetailArray() {
	    return this.feedbackDetailArray;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains the individual feedback records for the user or order line item specified in the request. There is one FeedbackDetailType
     * object for each feedback record. Only populated with data when a detail level of ReturnAll is specified in the request. Not returned if you specify FeedbackID in the request.
     * 
     *
     * @param ebay.apis.eblbasecomponents.FeedbackDetailArrayType
	 */
	public void setFeedbackDetailArray(FeedbackDetailArrayType feedbackDetailArray) {
	    this.feedbackDetailArray = feedbackDetailArray;
	}
	/**
     * public getter
     *
     * 
     * Indicates the number of FeedbackDetailType objects returned in the
     * FeedbackDetailArray property. Only applicable if feedback details are
     * returned.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getFeedbackDetailItemTotal() {
	    return this.feedbackDetailItemTotal;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the number of FeedbackDetailType objects returned in the
     * FeedbackDetailArray property. Only applicable if feedback details are
     * returned.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setFeedbackDetailItemTotal(Integer feedbackDetailItemTotal) {
	    this.feedbackDetailItemTotal = feedbackDetailItemTotal;
	}
	/**
     * public getter
     *
     * 
     * Summary feedback data for the user. Contains counts of positive, neutral,
     * and negative feedback for pre-defined time periods. Only applicable if feedback details are returned.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.FeedbackSummaryType
	 */
	public FeedbackSummaryType getFeedbackSummary() {
	    return this.feedbackSummary;
	}
	
	/**
	 * public setter
	 *
     * 
     * Summary feedback data for the user. Contains counts of positive, neutral,
     * and negative feedback for pre-defined time periods. Only applicable if feedback details are returned.
     * 
     *
     * @param ebay.apis.eblbasecomponents.FeedbackSummaryType
	 */
	public void setFeedbackSummary(FeedbackSummaryType feedbackSummary) {
	    this.feedbackSummary = feedbackSummary;
	}
	/**
     * public getter
     *
     * 
     * Indicates the total feedback score for the user.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getFeedbackScore() {
	    return this.feedbackScore;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the total feedback score for the user.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setFeedbackScore(Integer feedbackScore) {
	    this.feedbackScore = feedbackScore;
	}
	/**
     * public getter
     *
     * 
     * Contains information regarding the pagination of data (if pagination is
     * used), including total number of pages and total number of entries. This
     * is only applicable when a User ID or no ID (requester option) is specified.
     * 
     *
     * @returns ebay.apis.eblbasecomponents.PaginationResultType
	 */
	public PaginationResultType getPaginationResult() {
	    return this.paginationResult;
	}
	
	/**
	 * public setter
	 *
     * 
     * Contains information regarding the pagination of data (if pagination is
     * used), including total number of pages and total number of entries. This
     * is only applicable when a User ID or no ID (requester option) is specified.
     * 
     *
     * @param ebay.apis.eblbasecomponents.PaginationResultType
	 */
	public void setPaginationResult(PaginationResultType paginationResult) {
	    this.paginationResult = paginationResult;
	}
	/**
     * public getter
     *
     * 
     * Indicates the number of entries (feedback detail) that are being 
     * returned per page of data (i.e., per call).  
     * Only returned if entries are returned.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getEntriesPerPage() {
	    return this.entriesPerPage;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates the number of entries (feedback detail) that are being 
     * returned per page of data (i.e., per call).  
     * Only returned if entries are returned.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setEntriesPerPage(Integer entriesPerPage) {
	    this.entriesPerPage = entriesPerPage;
	}
	/**
     * public getter
     *
     * 
     * Indicates which page of data was just returned. Will be the same as the
     * value specified in Pagination.PageNumber. (If the input is
     * higher than the total number of pages, the call fails with an error.)
     * Only returned if items are returned.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getPageNumber() {
	    return this.pageNumber;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates which page of data was just returned. Will be the same as the
     * value specified in Pagination.PageNumber. (If the input is
     * higher than the total number of pages, the call fails with an error.)
     * Only returned if items are returned.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setPageNumber(Integer pageNumber) {
	    this.pageNumber = pageNumber;
	}

}