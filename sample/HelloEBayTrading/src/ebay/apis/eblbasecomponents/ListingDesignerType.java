// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * 
 * Contains the IDs for the Listing Designer theme and template (if either are
 * used) associated with an item, which can optionally be used to enhance the
 * appearance of the item's description. Cannot be used with Photo Display.
 * 
 */
public class ListingDesignerType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "LayoutID")
	private Integer layoutID;
	
	@Element(name = "OptimalPictureSize")
	private Boolean optimalPictureSize;
	
	@Element(name = "ThemeID")
	private Integer themeID;
	
    
	/**
     * public getter
     *
     * 
     * Identifies the Layout template to use when displaying the
     * item's description. Call GetDescriptionTemplates for valid IDs.
     * Set to false in GetDescriptionTemplates (or do not specify
     * LayoutID) to get the standard layout. If a Listing Designer
     * layout is used (except standard layout), PhotoDisplayType must
     * be false (or not be specified).
     * When relisting an item, LayoutID is removed from the listing if you specify
     * ListingDesignerType without LayoutID. Alternatively, to remove this value
     * when revising or relisting an item, use DeletedField.
     *   
     *
     * @returns java.lang.Integer
	 */
	public Integer getLayoutID() {
	    return this.layoutID;
	}
	
	/**
	 * public setter
	 *
     * 
     * Identifies the Layout template to use when displaying the
     * item's description. Call GetDescriptionTemplates for valid IDs.
     * Set to false in GetDescriptionTemplates (or do not specify
     * LayoutID) to get the standard layout. If a Listing Designer
     * layout is used (except standard layout), PhotoDisplayType must
     * be false (or not be specified).
     * When relisting an item, LayoutID is removed from the listing if you specify
     * ListingDesignerType without LayoutID. Alternatively, to remove this value
     * when revising or relisting an item, use DeletedField.
     *   
     *
     * @param java.lang.Integer
	 */
	public void setLayoutID(Integer layoutID) {
	    this.layoutID = layoutID;
	}
	/**
     * public getter
     *
     * 
     * If true, indicates that the item's picture will be enlarged to fit description
     * of the item.
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getOptimalPictureSize() {
	    return this.optimalPictureSize;
	}
	
	/**
	 * public setter
	 *
     * 
     * If true, indicates that the item's picture will be enlarged to fit description
     * of the item.
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setOptimalPictureSize(Boolean optimalPictureSize) {
	    this.optimalPictureSize = optimalPictureSize;
	}
	/**
     * public getter
     *
     * 
     * ID for the Listing Designer theme template to use when
     * displaying the item's description.
     * When relisting, if you specify ListingDesignerType without
     * ThemeID, ThemeID is removed from the listing. Alternatively, to remove
     * this value when revising or relisting an item, use DeletedField.
     * 
     *
     * @returns java.lang.Integer
	 */
	public Integer getThemeID() {
	    return this.themeID;
	}
	
	/**
	 * public setter
	 *
     * 
     * ID for the Listing Designer theme template to use when
     * displaying the item's description.
     * When relisting, if you specify ListingDesignerType without
     * ThemeID, ThemeID is removed from the listing. Alternatively, to remove
     * this value when revising or relisting an item, use DeletedField.
     * 
     *
     * @param java.lang.Integer
	 */
	public void setThemeID(Integer themeID) {
	    this.themeID = themeID;
	}

}