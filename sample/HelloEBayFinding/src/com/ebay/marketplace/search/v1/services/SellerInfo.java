// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.ebay.marketplace.search.v1.services;

import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * Container for information about this listing's seller.
 * 
 */
public class SellerInfo   {

	@Element
	private String sellerUserName;
    
	@Element
	private Long feedbackScore;
    
	@Element
	private Double positiveFeedbackPercent;
    
	@Element
	private String feedbackRatingStar;
    
	@Element
	private Boolean topRatedSeller;
    
	@Element
	private String delimiter;
    
	private List<Object> any;
    
    
	/**
     * public getter
     *
     * 
     * The seller's eBay user name; a unique value.
     * 
     *
     * @returns java.lang.String
	 */
	public String getSellerUserName() {
	    return this.sellerUserName;
	}
	
	/**
	 * public setter
	 *
     * 
     * The seller's eBay user name; a unique value.
     * 
     *
     * @param java.lang.String
	 */
	public void setSellerUserName(String sellerUserName) {
	    this.sellerUserName = sellerUserName;
	}
	/**
     * public getter
     *
     * 
     * The aggregate feedback score of the seller. A seller's feedback score is
     * their net positive feedback minus their net negative feedback. Feedback
     * scores are a quantitative expression of the desirability of dealing with
     * a seller in a transaction.
     * 
     *
     * @returns java.lang.Long
	 */
	public Long getFeedbackScore() {
	    return this.feedbackScore;
	}
	
	/**
	 * public setter
	 *
     * 
     * The aggregate feedback score of the seller. A seller's feedback score is
     * their net positive feedback minus their net negative feedback. Feedback
     * scores are a quantitative expression of the desirability of dealing with
     * a seller in a transaction.
     * 
     *
     * @param java.lang.Long
	 */
	public void setFeedbackScore(Long feedbackScore) {
	    this.feedbackScore = feedbackScore;
	}
	/**
     * public getter
     *
     * 
     * The percentage value of a user's positive feedback (their positive
     * feedbackScore divided by their total positive plus negative feedback).
     * 
     *
     * @returns java.lang.Double
	 */
	public Double getPositiveFeedbackPercent() {
	    return this.positiveFeedbackPercent;
	}
	
	/**
	 * public setter
	 *
     * 
     * The percentage value of a user's positive feedback (their positive
     * feedbackScore divided by their total positive plus negative feedback).
     * 
     *
     * @param java.lang.Double
	 */
	public void setPositiveFeedbackPercent(Double positiveFeedbackPercent) {
	    this.positiveFeedbackPercent = positiveFeedbackPercent;
	}
	/**
     * public getter
     *
     * 
     * Visual indicator of user's feedback score.
     * <dl>
     * <dt>
     * <strong>feedbackRatingStar values:</strong>
     * </dt>
     * <dt>
     * None
     * </dt>
     * <dd>
     * No graphic displayed, feedback score 0-9.
     * </dd>
     * <dt>
     * Yellow
     * </dt>
     * <dd>
     * Yellow Star, feedback score 10-49.
     * </dd>
     * <dt>
     * Blue
     * </dt>
     * <dd>
     * Blue Star, feedback score 50-99.
     * </dd>
     * <dt>
     * Turquoise
     * </dt>
     * <dd>
     * Turquoise Star, feedback score 100-499.
     * </dd>
     * <dt>
     * Purple
     * </dt>
     * <dd>
     * Purple Star, feedback score 500-999.
     * </dd>
     * <dt>
     * Red
     * </dt>
     * <dd>
     * Red Star, feedback score 1,000-4,999.
     * </dd>
     * <dt>
     * Green
     * </dt>
     * <dd>
     * Green Star, feedback score 5,000-9,999.
     * </dd>
     * <dt>
     * YellowShooting
     * </dt>
     * <dd>
     * Yellow Shooting Star, feedback score 10,000-24,999.
     * </dd>
     * <dt>
     * TurquoiseShooting
     * </dt>
     * <dd>
     * Turquoise Shooting Star, feedback score 25,000-49,999.
     * </dd>
     * <dt>
     * PurpleShooting
     * </dt>
     * <dd>
     * Purple Shooting Star, feedback score 50,000-99,999.
     * </dd>
     * <dt>
     * RedShooting
     * </dt>
     * <dd>
     * Red Shooting Star, feedback score 100,000-499,000 and above.
     * </dd>
     * <dt>
     * GreenShooting
     * </dt>
     * <dd>
     * Green Shooting Star, feedback score 500,000-999,000 and above.
     * </dd>
     * <dt>
     * SilverShooting
     * </dt>
     * <dd>
     * Silver Shooting Star, feedback score 1,000,000 or more.
     * </dd>
     * </dl>
     * 
     *
     * @returns java.lang.String
	 */
	public String getFeedbackRatingStar() {
	    return this.feedbackRatingStar;
	}
	
	/**
	 * public setter
	 *
     * 
     * Visual indicator of user's feedback score.
     * <dl>
     * <dt>
     * <strong>feedbackRatingStar values:</strong>
     * </dt>
     * <dt>
     * None
     * </dt>
     * <dd>
     * No graphic displayed, feedback score 0-9.
     * </dd>
     * <dt>
     * Yellow
     * </dt>
     * <dd>
     * Yellow Star, feedback score 10-49.
     * </dd>
     * <dt>
     * Blue
     * </dt>
     * <dd>
     * Blue Star, feedback score 50-99.
     * </dd>
     * <dt>
     * Turquoise
     * </dt>
     * <dd>
     * Turquoise Star, feedback score 100-499.
     * </dd>
     * <dt>
     * Purple
     * </dt>
     * <dd>
     * Purple Star, feedback score 500-999.
     * </dd>
     * <dt>
     * Red
     * </dt>
     * <dd>
     * Red Star, feedback score 1,000-4,999.
     * </dd>
     * <dt>
     * Green
     * </dt>
     * <dd>
     * Green Star, feedback score 5,000-9,999.
     * </dd>
     * <dt>
     * YellowShooting
     * </dt>
     * <dd>
     * Yellow Shooting Star, feedback score 10,000-24,999.
     * </dd>
     * <dt>
     * TurquoiseShooting
     * </dt>
     * <dd>
     * Turquoise Shooting Star, feedback score 25,000-49,999.
     * </dd>
     * <dt>
     * PurpleShooting
     * </dt>
     * <dd>
     * Purple Shooting Star, feedback score 50,000-99,999.
     * </dd>
     * <dt>
     * RedShooting
     * </dt>
     * <dd>
     * Red Shooting Star, feedback score 100,000-499,000 and above.
     * </dd>
     * <dt>
     * GreenShooting
     * </dt>
     * <dd>
     * Green Shooting Star, feedback score 500,000-999,000 and above.
     * </dd>
     * <dt>
     * SilverShooting
     * </dt>
     * <dd>
     * Silver Shooting Star, feedback score 1,000,000 or more.
     * </dd>
     * </dl>
     * 
     *
     * @param java.lang.String
	 */
	public void setFeedbackRatingStar(String feedbackRatingStar) {
	    this.feedbackRatingStar = feedbackRatingStar;
	}
	/**
     * public getter
     *
     * 
     * Indicates whether the seller of the item is top-rated. A <b>Top-Rated Seller</b>:
     * <ul>
     * <li>Consistently receives highest buyers' ratings</li>
     * <li>Ships items quickly</li>
     * <li>Has earned a track record of excellent service</li>
     * </ul>
     * eBay regularly reviews the performance of these sellers to confirm
     * that they continue to meet the program's requirements.
     * <br><br>
     * This field is returned for the following sites only: US (EBAY-US), Motors
     * (EBAY-MOTOR), DE (EBAY-DE), AT (EBAY-AT), and CH (EBAY-CH).
     * 
     *
     * @returns java.lang.Boolean
	 */
	public Boolean getTopRatedSeller() {
	    return this.topRatedSeller;
	}
	
	/**
	 * public setter
	 *
     * 
     * Indicates whether the seller of the item is top-rated. A <b>Top-Rated Seller</b>:
     * <ul>
     * <li>Consistently receives highest buyers' ratings</li>
     * <li>Ships items quickly</li>
     * <li>Has earned a track record of excellent service</li>
     * </ul>
     * eBay regularly reviews the performance of these sellers to confirm
     * that they continue to meet the program's requirements.
     * <br><br>
     * This field is returned for the following sites only: US (EBAY-US), Motors
     * (EBAY-MOTOR), DE (EBAY-DE), AT (EBAY-AT), and CH (EBAY-CH).
     * 
     *
     * @param java.lang.Boolean
	 */
	public void setTopRatedSeller(Boolean topRatedSeller) {
	    this.topRatedSeller = topRatedSeller;
	}
	/**
	 * public getter
	 *
     * @returns java.lang.String
	 */
	public String getDelimiter() {
	    return this.delimiter;
	}
	
	/**
	 * public setter
	 *
     * @param java.lang.String
	 */
	public void setDelimiter(String delimiter) {
	    this.delimiter = delimiter;
	}
	/**
	 * public getter
	 *
     * @returns java.util.List<java.lang.Object>
	 */
	public List<Object> getAny() {
	    return this.any;
	}
	
	/**
	 * public setter
	 *
     * @param java.util.List<java.lang.Object>
	 */
	public void setAny(List<Object> any) {
	    this.any = any;
	}

}